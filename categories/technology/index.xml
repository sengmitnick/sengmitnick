<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology on Seng Mitnick</title>
    <link>https://sengmitnick.com/categories/technology/</link>
    <description>Recent content in technology on Seng Mitnick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 07 Jun 2022 07:15:16 +0000</lastBuildDate><atom:link href="https://sengmitnick.com/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于disqus-php-api在Hexo博客中使用Disqus</title>
      <link>https://sengmitnick.com/blog/104/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sengmitnick.com/blog/104/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;废话少说，这里基于 &lt;a href=&#34;https://fooleap.org&#34;&gt;fooleap&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/fooleap/disqus-php-api&#34;&gt;disqus-php-api&lt;/a&gt; 对Hexo中的NexT主题进行兼容。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小米平板1刷 LineageOS 16.0 教程</title>
      <link>https://sengmitnick.com/blog/356/</link>
      <pubDate>Tue, 07 Jun 2022 07:15:16 +0000</pubDate>
      
      <guid>https://sengmitnick.com/blog/356/</guid>
      <description> 本文只针对于小米平板1升级 lineageOS 16.0，其他版本可参考：https://www.jianshu.com/p/71aa0f22b466
 刷机文件下载 下载地址： 百度网盘：链接: https://pan.baidu.com/s/19jRRlYPdHOBsDp9wFoC9YA 提取码: ukcw
文件说明：  lineage-16.0-20200419-UNOFFICIAL-mocha.zip: lineageOS 系统文件，原版下载地址：lineage-16.0-20200419-UNOFFICIAL-mocha.zip mocha_repartition_1_2GB_RahulTheVirus.zip: 分区合并工具(这个文件很关键，很多合并分区文件都是旧版本，会导致刷机失败)，原版下载地址：mocha_repartition_1_2GB_RahulTheVirus.zip recovery-03.11.2018.zip：recovery镜像，原版下载地址：recovery-03.11.2018.zip tos.zip：底层镜像，原版下载地址：TosForPSCI-0.1.zip twrp-3.4.0-0-mocha.zip： TWRP recovery 文件，原版下载地址： twrp-3.4.0-0-mocha.zip LRbox.zip：线刷工具，内置 adb 和 fastboot 工具  </description>
    </item>
    
    <item>
      <title>Mac 电脑使用 ClashX 作为网关旁路由</title>
      <link>https://sengmitnick.com/blog/355/</link>
      <pubDate>Wed, 11 May 2022 03:31:55 +0000</pubDate>
      
      <guid>https://sengmitnick.com/blog/355/</guid>
      <description>前言 最近入手了 Pixelbook，初始化连接网络就需要访问 google。那就需要Wi-Fi具备科学上网功能了，但是也不想为此特意去购置新的路由器，于是想着是否可以通过现在的MAC电脑作为网关旁路由。
教程 安装 ClashX  ClashX Pro  准备 ClashX 的配置文件 一般你订阅的服务应该会给 Clash 的订阅链接，如果没有也没关系，你可以通过第三方 订阅转换 生成（推荐用这个，分流会丰富合理很多）:
 订阅链接填上你的 v2ray、ss 、trojan 的订阅（非 SSR 的订阅） 客户端选择 Clash 选择生成订阅链接就好了  自建Trojan节点 Trojan单节点示例 trojan://密码@服务器地址:443?peer=#节点别名1
添加配置 打开有 ClashX Pro 后，右上角会有一只小猫咪🐱的图标。右键选择 Config 配置 — Remote 托管配置 — Manage 管理。
 添加配置
   然后选择 Add 添加，URL 填上你上一步生成的 Clash 订阅地址，Config name 可以给它取一个名字备注，然后选择 OK 确定。
打开系统代理和增强模式 再次右键打开小猫咪选项，应该就能看到你的配置文件规则（你可以通过节点选择来配置默认的上网节点）。
我们还需打开
 Set as system proxy 设置为系统代理 Enhanced Mode 增强模式（正是这个起到了网关路由器的作用）   打开系统代理和增强模式</description>
    </item>
    
    <item>
      <title>转变，是为了更好的前进｜2021年度总结</title>
      <link>https://sengmitnick.com/blog/353/</link>
      <pubDate>Wed, 29 Dec 2021 15:24:31 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/353/</guid>
      <description>不知不觉已是秋，忙忙碌碌又一年。一年到头，收获还过得去，就在此对这一年多做个回顾和复盘吧。望明年更好～
 回顾往昔 时间过得真快，又一年了，看了一下，上一年定的目标大体都没完成。不过也算有个好收获了。先回顾总结一下吧～
 从创业到打工的身份转变。 连续换了两次房子，最后一次租金暴涨。 给公司做了 组件库 🥇 参加了 OpenHarmony组件开发大赛 并获得了一等奖。 🥈 参加了 OpenHarmony有奖征文 并获得了二等奖。 参加了 HDC.Together，并入坑鸿蒙体系，买了一系列装备。 搭建 Taro 多端开发体系，打造了一系列轮子。 初入股市，心态尚可，收益达10%以上。 出游：  凤凰古城 张家界天门山 丽江古城 泸沽湖    业余正业 第二次创业以主动退伙而告终。而第三次创业还没开始就夭折了，最后无奈回深重新成为一个打工人。
在退出忙碌的创业路后，认真规划了还没要搞的LCDP，并且起名为 mccree.js。可惜我高看自己了，一年到头，颓废懒惰战胜了自律勤劳的我，竟一句代码都没写。
然后分析了一堆，觉得现在的房子太窄，光线不足等外在环境也有一定的影响（其实也只是自欺欺人罢了）。然后我就毅然决然换了个高租金的房子。
高租金的房子还是有点用的，起码在参加了 OpenHarmony组件开发大赛 后，工作基本是在新房子完成的。
搬砖主业 新的工作虽然是打工，但是做的也是我想做的，其实 mccree.js 一直拖也有这方面的缘故吧（反正能赖就赖）。
大半年时间开发了第一个版本的 平行线组件库。也应用到了公司的业务中，一次次的迭代，也慢慢的成熟了。不过目前和公司的业务耦合度太高了，而且 H5 端一开始并没有考虑到小程序。所以实用性并不高。
在11月份，和老大多次讨论，开发了第二个版本的 平行线组件库。这一次前期的重点就在 小程序 和 H5 的融合上，框架选择了 Taro，但是里面并不是完全适用。针对公司业务和自己的一下设计，做了一系列的适配的工具。
目前只是完成了一部分，其他的将是下一年的工作重点了。如果到时候离职了，可能会换一个名字，继续基于现有的框架打磨下去，逐步完善，做一个 Taro React 组件库。
行万里路 通过 特邀嘉宾 参加了2021年的HDC.Together，涨了一番见识。
圣诞节🎄参加了 Gitee Day 深圳站，虽然目前还没用到 DevOps。不过还是受益匪浅的啦～
五月中旬去了张家界，国庆去了云南，这一年的出游目标也是破例完成了。而且我出游也不是去到一个地方什么都去，而是看时间随便逛逛就好。不过呢，我真坐实出游雨神的称号了，每次出游都是下雨，虽然在凤凰古城雨中漫步感觉也不错。当遭不住呀～</description>
    </item>
    
    <item>
      <title>Vant Openharmony 开发经验分享</title>
      <link>https://sengmitnick.com/blog/352/</link>
      <pubDate>Sun, 17 Oct 2021 16:21:36 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/352/</guid>
      <description>前言 一个朋友给我推了链接，就是OpenHarmony组件开发大赛啦。然后按照官网的参赛流程，加入了大赛的微信群。
过程 开发环境配置 按照官网提供的 OpenHarmony JS项目开发流程 逐步配置。在一个天清气朗的周末，把 open-harmony-js-demos 仓储运行起来啦。
PS: 还好途中没遇到奇奇怪怪的问题，哈哈:)
参赛选型 我看 Openharmony 组件 定位于手机和手表这一块，而在手机端的组件库全面性和活跃度，无疑是 Vant 了，而且最近给公司开发手机端的React&amp;amp;Taro组件库也是参考了 Vant 的源码的，熟悉程度也算可以了。
搭建仓储 开发一个组件库的流程，我们完全可以站在巨人的肩膀上，在这个搭建过程中，我参考了以下仓储的源码与其中思路：
 Vant Vant Weapp Ant Design  创建组织和仓储 一个开源组件库的仓储创建，一定不能在个人的名下，这对于后续社区的参与人员与维护都是极其不便利的，所以无论是国外的github还是国内的gitee都提供了创建组织的选项。
因为是gitee组织的比赛，所以选择了在gitee下创建了Vant Openharmony组织，然后在该组织下创建相应的仓储。
我这里创建了两个仓储，一个是组建库的源仓储，另一个是基于 open-harmony-js-demos 的 example ，主要用来测试和演示组件库的～
组织文件结构 既然做的是 Vant 的 Openharmony 版本，那么在 官方使用文档 这一块还是保持一致的好，通过阅读 Vant 的源码发现官方有一个 Vue 组件库构建工具 Vant Cli。所以在项目初始化可以通过 Vant Cli 构建我们的项目。
但是呢，Vant Cli 是 针对 Vue 组件库的构建工具，很明显它自带的文件结构并不符合 Openharmony 组件库的，需要我们对其进行进一步的改造。
我们把 Openharmony 自定义组件所需要的文件放到 packages 文件夹下，得到以下的文件结构。
但是呢，我自己更喜欢 typescript 和 less ，所以对其捣鼓一番就得到以下的文件结构。</description>
    </item>
    
    <item>
      <title>YARN--选择性依赖解决方案</title>
      <link>https://sengmitnick.com/blog/351/</link>
      <pubDate>Sat, 16 Oct 2021 17:25:05 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/351/</guid>
      <description>前言 才过了一晚，代码没怎么改过，用 jenkins 打包就报错了，截图如下：
思考 其实看截图意思还是很明了的，明显是某个依赖包最近更新版本了，然后新版本有Bug。
直接去npm看看，果不其然。
解决 但是这个依赖包并不在当前项目 dependencies 里面，很显然是某个子包下的 dependencies 了 (其实熟悉 Antd 的童鞋就知道这个包是在 antd =&amp;gt; rc-field-form =&amp;gt; async-validator)。这种情况我们也不可能去社区让人家改 async-validator 的版本呀！
那么怎么解决呢？
如果你使用 yarn 进行 install ，那么你这个时候就可以用 resolutions 了。
最终通过在 package.json 添加如下配置即可解决啦。
参考  Selective dependency resolutions  </description>
    </item>
    
    <item>
      <title>LazyMan的现代化实现</title>
      <link>https://sengmitnick.com/blog/350/</link>
      <pubDate>Mon, 11 Oct 2021 15:51:53 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/350/</guid>
      <description>实现一个LazyMan，可以按照以下方式调用: LazyMan(&amp;#34;Hank&amp;#34;)输出: Hi! This is Hank! LazyMan(&amp;#34;Hank&amp;#34;).sleep(10).eat(&amp;#34;dinner&amp;#34;)输出 Hi! This is Hank! //等待10秒.. Wake up after 10 Eat dinner~ LazyMan(&amp;#34;Hank&amp;#34;).eat(&amp;#34;dinner&amp;#34;).eat(&amp;#34;supper&amp;#34;)输出 Hi This is Hank! Eat dinner~ Eat supper~ LazyMan(&amp;#34;Hank&amp;#34;).sleepFirst(5).eat(&amp;#34;supper&amp;#34;)输出 //等待5秒 Wake up after 5 Hi This is Hank! Eat supper 以此类推。 class LazyManC {  constructor(name) {  this.name = name;  this.tasks = [this.log.bind(this)];  setTimeout(async () =&amp;gt; {  for (const fn of this.tasks) {  await fn();  }  }, 0);  }   log() {  console.</description>
    </item>
    
    <item>
      <title>记录一次样式多次被引入的问题解决过程</title>
      <link>https://sengmitnick.com/blog/336/</link>
      <pubDate>Tue, 24 Aug 2021 18:50:04 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/336/</guid>
      <description>新写的组件库有全局样式，引起了一次样式多次被引入的问题。遂，进行了一次详细的分析与解决过程。
 通过问题分析，发现导致样式多次被引入的问题有以下：
 自建组件库全局样式多次被引入； 第三方组件库（Antd）不合理的引入方式引起重复样式覆盖； 打包工具（umi）的按需引入所引起的样式重复引入。  自建组件库全局样式多次被引入 通过删除原有默认引入的模式，改为手动引入。
https://gitee.com/pxx-design/pxx-design/commit/2cbf741560cab34ac4724af2fecb1934c659378a
💡 Tips: 后续可以研究antd的全局样式解决方案。
第三方组件库不合理的引入方式 通过代码审查，发现组件库和项目中引入antd的样式路径有 antd/es/*、antd/lib/*。导致antd的样式会加载两次。
项目使用 umi 作为打包工具，其中，通过翻阅 plugin-antd 的源码，发现编译后以antd/es/*为基准。于是修改组件库的 babel-plugin-import 的配置和项目中的引入方式。
 plugin-antd
   💡 Tips: 目前只是在文档里规范了开发人员的规则，后续研究通过编译或eslint的方式强行提示。
打包工具的按需引入所引起的样式重复引入 该问题待解决，还没学到解决办法～
END……</description>
    </item>
    
    <item>
      <title>TypeScript 使用宝典</title>
      <link>https://sengmitnick.com/blog/333/</link>
      <pubDate>Fri, 06 Aug 2021 10:27:06 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/333/</guid>
      <description>jsDoc 详细资料：https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html
 is &amp;amp; typeof https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards https://www.typescriptlang.org/docs/handbook/advanced-types.html#instanceof-type-guards
非空断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator
// Compiled with --strictNullChecks function validateEntity(e?: Entity) {  // Throw exception if e is null or invalid entity } function processEntity(e?: Entity) {  validateEntity(e);  let s = e!.name; // Assert that e is non-null and access name } const 断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions
应用场景：自定义 hook 可以用得比较多， React.useState 就是如此
const useFlag = (initialValue = false) =&amp;gt; {  const [flag, setFlag] = React.</description>
    </item>
    
    <item>
      <title>umi.theme 参数剖析</title>
      <link>https://sengmitnick.com/blog/332/</link>
      <pubDate>Thu, 08 Jul 2021 10:24:07 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/332/</guid>
      <description>其实就是 less的modifyVars功能
如果是通过js引入，会转化成less的格式：
输入：
module.exports = {  &amp;#39;@hd&amp;#39;: &amp;#39;1px&amp;#39;,  &amp;#39;@primary-color&amp;#39;: &amp;#39;#1E78FF&amp;#39;,  &amp;#39;@url&amp;#39;: `&amp;#39;https://ant-design.gitee.io/components/upload-cn/&amp;#39;`, }; 输出：
@hd: 1px; @primary-color: #1E78FF; @url: &amp;#39;https://ant-design.gitee.io/components/upload-cn/&amp;#39;; PS: 注意声明链接时必须有引号，不然会报错哦～
基于modifyVars功能可以实现类似的CSS In JS 功能哦～</description>
    </item>
    
  </channel>
</rss>
