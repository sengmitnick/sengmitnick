<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seng Mitnick</title>
    <link>https://sengmitnick.com/</link>
    <description>Recent content on Seng Mitnick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 16:21:36 +0800</lastBuildDate><atom:link href="https://sengmitnick.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>时隔三年，我又回来了～</title>
      <link>https://sengmitnick.com/blog/300/</link>
      <pubDate>Wed, 09 Dec 2020 19:49:16 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/300/</guid>
      <description>&lt;p&gt;三年前，因为个人惰性及仕途上的决择，原网站&lt;a href=&#34;http://web.archive.org/web/20190327223210/http://smk17.cn/&#34;&gt;smk17.cn&lt;/a&gt;基本出于停更状态，后又因为忘记给其续费导致被别人抢注了，后悔万分呀～&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020 年度总结</title>
      <link>https://sengmitnick.com/blog/301/</link>
      <pubDate>Wed, 10 Feb 2021 19:00:00 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/301/</guid>
      <description>2020可真是多灾多难的一年啊！祸福倚伏，故此有了一些思考，也想通了一些事情，故有此次总结～
 概要 读书+工作多年，一直也没真正的总结过，之前虽然也有一些想法和一些行动，但还是停留在思想上，行动总是半途而废～
这一次算是对大学+工作多年的一个总结吧，下面是概要流程图～  9年大事记|2020总结
   我是谁 我一直觉得我比大多数迷茫的人好运多了，因为我好像一直都很明确我要做什么，但是回顾这9年，发现我又不如大部分人，甚至比那些循规蹈矩的人混得还差。
所以我在想问题出在哪？或许就是因为我喜欢捣腾却又容易半途而废的缘故吧！问题找到，那么离解决问题就不远了，所以今年我更折腾了，只为一个稳定而坚恒的环境～
人生第一次选择 高考失利，有限选择里选了计算机应用技术(嵌入式) 人总归要为自己的行为抉择买单，中考失利心态崩了，于是高中不再做书呆子，天天玩乐，到最后才开始冲刺却已晚，最后只能上个大专，选了我觉得符合我的**计算机应用技术(嵌入式)**专业。
不过我一直不知道自己适合往哪一块发展，所以在大一，加入电子协会，并于大二自学计算机其他方向，最后权衡之下决定走嵌入式工程师，也是我好喜折腾的原初显露吧～
人生第二次选择 第二次的抉择，是一个长期经验导向并在最后才决定的结果，所以这里会稍微唠叨一下～
自己在大二暑假期间打造了一套简单的CMS系统，最后直接作为毕业设计作品了 第一次有了技术宅的感觉了，虽然之前也偶尔有过，但这确实是我第一次因为自己想做一个东西而忘情投入最长的一次了。
因为之前被朋友带起的博客风，又因为自己专业与兴趣，自己尝试了各个博客系统，还GET到wordpress这一类CMS系统，最后产生了自己也搞一个类似的念头，然后就一发不可收拾，于是在暑假期间宅家里胡捣了一番，终于做了一个简陋版，大大的满足和成就感，特别是后面作为毕业设计得到大家一致认可的feel，我觉得我选对了～
但是那时候对于前端、后端、嵌入式之间还没有很清晰的分辨，所以在选择工作上还是倾向于本专业（嵌入式）。
龙芯培训考核项目，主导并涉及web前端界面和后端API的设计与实现 人生的第一份工作，是一家传统转型IT的企业，有种拿着工资创业的感觉，一开始大家的工作都是差不多，焊板子、烧写程序，调试代码，和最重要的码程序了。
后来，部门想搞一套智能家居中控系统，此时，大家就开始有分工了，因为我之前搞过web相关，所以在整体上，我把控整个项目，并负责其APP端和后端的开发。
经过这一次的项目，我越发觉得我更喜欢做APP一类的前端工作，但是因为目前工作尚可也就没多想～
多灾多难的本命年，决定新工作，新环境，新职业 2016，本命年，患病分手失业统统发生，憔悴但还是要生存，当时给一个朋友公司做前端兼职，失业后也就加入了这家公司。后，该司基于各方面的考虑打算迁往武汉，当时我也无心重找工作和折腾，也不想待广深，于是便一同去之～
2020 日志： 立足于当下，未来可期 公司前端业务平台趋于稳定 经过长达一年的探索，一年时间的打磨，在2019年末，公司的平台基本稳定，后面的工作无非就是改改bug和新功能开发，内核不变。于是有了更多时间去学习，探索新事物和新的视野。
疫情在家，线上办公，自律生活 庆幸于提早的放假，而不必留于武汉过年，也因为疫情的原因，公司开启了长达4个月的线上办公，而我因在家线上办公，于是在时间上有了更多的把控权，开始了自己的生活作息规律。
回汉工作4个月后，决然退出 回汉后，原有环境变化，导致已有的自律生活不复存在，一直想重新恢复却有难度，算是环境+个人因素了。
而随着工作的舒适度递增，还有公司工作氛围的消极化、掌权人的变更等一系列的变化，便逐渐有了离开的心思。后又有新的合作，于是决然离去，但是新的机会不到个月就泡汤了，于是一个人重回广东，思考往后该怎么走～
第二次分手，重新找工作 原打算乘着失业期间梳理现有资源与规划未来，但突如其来的失恋，导致无心于此，便先重新招工作，等待合适机会了～
新工作，自律生活重启，未来可期 新的工作，一开始人还是蛮颓废的，除了上班平时就玩游戏，后来慢慢因为工作的规律化，把自律生活重新提前，渐渐习惯与5点起床，做饭、洗漱、运动和冥想，而早起自律带来精神面貌的改变是明显的，一开始周六周末不上班就去图书馆（因为一开始在宿舍根本无法安心作业），后面也可以在宿舍作业了。
当自律生活慢慢形成习惯，就有了新的规划了～
再次失业，却不再茫然 临近年底放假，却被通知公司解散，但经不起我的一丝波澜。让我们立足当下，未来可期～
2021 目标与期许 上面说到的新规划，就放到2021实现啦～
 个人站点的重新出发与更新 塑造后期自由职业或第二副业的基建（或曰：工作时间自由前期筹备） 打造自己的页面搭建平台 学习理财，积攒本金，积累经验 每个月最少外出玩乐两次  最后附上喜马拉雅|年度收听报告的截图：  喜马拉雅|年度收听报告
   凡是过往即为序章
立足当下未来可期💪
&amp;mdash;END</description>
    </item>
    
    <item>
      <title>基于disqus-php-api在Hexo博客中使用Disqus</title>
      <link>https://sengmitnick.com/blog/104/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sengmitnick.com/blog/104/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;废话少说，这里基于 &lt;a href=&#34;https://fooleap.org&#34;&gt;fooleap&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/fooleap/disqus-php-api&#34;&gt;disqus-php-api&lt;/a&gt; 对Hexo中的NexT主题进行兼容。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Vant Openharmony 开发经验分享</title>
      <link>https://sengmitnick.com/blog/352/</link>
      <pubDate>Sun, 17 Oct 2021 16:21:36 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/352/</guid>
      <description>前言 一个朋友给我推了链接，就是OpenHarmony组件开发大赛啦。然后按照官网的参赛流程，加入了大赛的微信群。
过程 开发环境配置 按照官网提供的 OpenHarmony JS项目开发流程 逐步配置。在一个天清气朗的周末，把 open-harmony-js-demos 仓储运行起来啦。
PS: 还好途中没遇到奇奇怪怪的问题，哈哈:)
参赛选型 我看 Openharmony 组件 定位于手机和手表这一块，而在手机端的组件库全面性和活跃度，无疑是 Vant 了，而且最近给公司开发手机端的React&amp;amp;Taro组件库也是参考了 Vant 的源码的，熟悉程度也算可以了。
搭建仓储 开发一个组件库的流程，我们完全可以站在巨人的肩膀上，在这个搭建过程中，我参考了以下仓储的源码与其中思路：
 Vant Vant Weapp Ant Design  创建组织和仓储 一个开源组件库的仓储创建，一定不能在个人的名下，这对于后续社区的参与人员与维护都是极其不便利的，所以无论是国外的github还是国内的gitee都提供了创建组织的选项。
因为是gitee组织的比赛，所以选择了在gitee下创建了Vant Openharmony组织，然后在该组织下创建相应的仓储。
我这里创建了两个仓储，一个是组建库的源仓储，另一个是基于 open-harmony-js-demos 的 example ，主要用来测试和演示组件库的～
组织文件结构 既然做的是 Vant 的 Openharmony 版本，那么在 官方使用文档 这一块还是保持一致的好，通过阅读 Vant 的源码发现官方有一个 Vue 组件库构建工具 Vant Cli。所以在项目初始化可以通过 Vant Cli 构建我们的项目。
但是呢，Vant Cli 是 针对 Vue 组件库的构建工具，很明显它自带的文件结构并不符合 Openharmony 组件库的，需要我们对其进行进一步的改造。
我们把 Openharmony 自定义组件所需要的文件放到 packages 文件夹下，得到以下的文件结构。
但是呢，我自己更喜欢 typescript 和 less ，所以对其捣鼓一番就得到以下的文件结构。</description>
    </item>
    
    <item>
      <title>YARN--选择性依赖解决方案</title>
      <link>https://sengmitnick.com/blog/351/</link>
      <pubDate>Sat, 16 Oct 2021 17:25:05 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/351/</guid>
      <description>前言 才过了一晚，代码没怎么改过，用 jenkins 打包就报错了，截图如下：
思考 其实看截图意思还是很明了的，明显是某个依赖包最近更新版本了，然后新版本有Bug。
直接去npm看看，果不其然。
解决 但是这个依赖包并不在当前项目 dependencies 里面，很显然是某个子包下的 dependencies 了 (其实熟悉 Antd 的童鞋就知道这个包是在 antd =&amp;gt; rc-field-form =&amp;gt; async-validator)。这种情况我们也不可能去社区让人家改 async-validator 的版本呀！
那么怎么解决呢？
如果你使用 yarn 进行 install ，那么你这个时候就可以用 resolutions 了。
最终通过在 package.json 添加如下配置即可解决啦。
参考  Selective dependency resolutions  </description>
    </item>
    
    <item>
      <title>LazyMan的现代化实现</title>
      <link>https://sengmitnick.com/blog/350/</link>
      <pubDate>Mon, 11 Oct 2021 15:51:53 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/350/</guid>
      <description>实现一个LazyMan，可以按照以下方式调用: LazyMan(&amp;quot;Hank&amp;quot;)输出: Hi! This is Hank! LazyMan(&amp;quot;Hank&amp;quot;).sleep(10).eat(&amp;quot;dinner&amp;quot;)输出 Hi! This is Hank! //等待10秒.. Wake up after 10 Eat dinner~ LazyMan(&amp;quot;Hank&amp;quot;).eat(&amp;quot;dinner&amp;quot;).eat(&amp;quot;supper&amp;quot;)输出 Hi This is Hank! Eat dinner~ Eat supper~ LazyMan(&amp;quot;Hank&amp;quot;).sleepFirst(5).eat(&amp;quot;supper&amp;quot;)输出 //等待5秒 Wake up after 5 Hi This is Hank! Eat supper 以此类推。 class LazyManC { constructor(name) { this.name = name; this.tasks = [this.log.bind(this)]; setTimeout(async () =&amp;gt; { for (const fn of this.tasks) { await fn(); } }, 0); } log() { console.log(`Hi! This is ${this.</description>
    </item>
    
    <item>
      <title>记录一次样式多次被引入的问题解决过程</title>
      <link>https://sengmitnick.com/blog/336/</link>
      <pubDate>Tue, 24 Aug 2021 18:50:04 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/336/</guid>
      <description>新写的组件库有全局样式，引起了一次样式多次被引入的问题。遂，进行了一次详细的分析与解决过程。
 通过问题分析，发现导致样式多次被引入的问题有以下：
 自建组件库全局样式多次被引入； 第三方组件库（Antd）不合理的引入方式引起重复样式覆盖； 打包工具（umi）的按需引入所引起的样式重复引入。  自建组件库全局样式多次被引入 通过删除原有默认引入的模式，改为手动引入。
https://gitee.com/pxx-design/pxx-design/commit/2cbf741560cab34ac4724af2fecb1934c659378a
💡 Tips: 后续可以研究antd的全局样式解决方案。
第三方组件库不合理的引入方式 通过代码审查，发现组件库和项目中引入antd的样式路径有 antd/es/*、antd/lib/*。导致antd的样式会加载两次。
项目使用 umi 作为打包工具，其中，通过翻阅 plugin-antd 的源码，发现编译后以antd/es/*为基准。于是修改组件库的 babel-plugin-import 的配置和项目中的引入方式。
 plugin-antd
   💡 Tips: 目前只是在文档里规范了开发人员的规则，后续研究通过编译或eslint的方式强行提示。
打包工具的按需引入所引起的样式重复引入 该问题待解决，还没学到解决办法～
END……</description>
    </item>
    
    <item>
      <title>TypeScript 使用宝典</title>
      <link>https://sengmitnick.com/blog/333/</link>
      <pubDate>Fri, 06 Aug 2021 10:27:06 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/333/</guid>
      <description>jsDoc 详细资料：https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html
 is &amp;amp; typeof https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards https://www.typescriptlang.org/docs/handbook/advanced-types.html#instanceof-type-guards
非空断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator
// Compiled with --strictNullChecks function validateEntity(e?: Entity) { // Throw exception if e is null or invalid entity } function processEntity(e?: Entity) { validateEntity(e); let s = e!.name; // Assert that e is non-null and access name } const 断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions
应用场景：自定义 hook 可以用得比较多， React.useState 就是如此
const useFlag = (initialValue = false) =&amp;gt; { const [flag, setFlag] = React.useState(initialValue); const up = React.</description>
    </item>
    
    <item>
      <title>umi.theme 参数剖析</title>
      <link>https://sengmitnick.com/blog/332/</link>
      <pubDate>Thu, 08 Jul 2021 10:24:07 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/332/</guid>
      <description>其实就是 less的modifyVars功能
如果是通过js引入，会转化成less的格式：
输入：
module.exports = { &amp;#39;@hd&amp;#39;: &amp;#39;1px&amp;#39;, &amp;#39;@primary-color&amp;#39;: &amp;#39;#1E78FF&amp;#39;, &amp;#39;@url&amp;#39;: `&amp;#39;https://ant-design.gitee.io/components/upload-cn/&amp;#39;`, }; 输出：
@hd: 1px; @primary-color: #1E78FF; @url: &#39;https://ant-design.gitee.io/components/upload-cn/&#39;; PS: 注意声明链接时必须有引号，不然会报错哦～
基于modifyVars功能可以实现类似的CSS In JS 功能哦～</description>
    </item>
    
    <item>
      <title>Prettier 使用宝典</title>
      <link>https://sengmitnick.com/blog/330/</link>
      <pubDate>Tue, 25 May 2021 13:47:05 +0800</pubDate>
      
      <guid>https://sengmitnick.com/blog/330/</guid>
      <description>VSCODE 安装 Prettier 的官方扩展：https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
配置 resolveGlobalModules ，使 Prettier 使用项目本地依赖项中 Prettier。
{ &amp;#34;prettier.resolveGlobalModules&amp;#34;: true, &amp;#34;[typescriptreact]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, &amp;#34;[typescript]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; } } NPM 安装 prettier lint-staged pre-commit
以下是 package.json 配置：
{ &amp;#34;pre-commit&amp;#34;: [ &amp;#34;lint-staged&amp;#34; ], &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{js,jsx,less,md,json}&amp;#34;: [ &amp;#34;prettier --write&amp;#34; ], &amp;#34;*.ts?(x)&amp;#34;: [ &amp;#34;prettier --parser=typescript --write&amp;#34; ] }, } 参考  https://github.com/prettier/prettier-vscode#prettier-resolution https://prettier.io/docs/en/configuration.html  </description>
    </item>
    
  </channel>
</rss>
