<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blogs on Seng Mitnick</title>
        <link>https://sengmitnick.com/blog/</link>
        <description>Recent content in Blogs on Seng Mitnick</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 08 Aug 2021 10:24:07 +0800</lastBuildDate>
        <atom:link href="https://sengmitnick.com/blog/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>时隔三年，我又回来了～</title>
            <link>https://sengmitnick.com/blog/300/</link>
            <pubDate>Wed, 09 Dec 2020 19:49:16 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/300/</guid>
            <description>&lt;p&gt;三年前，因为个人惰性及仕途上的决择，原网站&lt;a href=&#34;http://web.archive.org/web/20190327223210/http://smk17.cn/&#34;&gt;smk17.cn&lt;/a&gt;基本出于停更状态，后又因为忘记给其续费导致被别人抢注了，后悔万分呀～&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>三年前，因为个人惰性及仕途上的决择，原网站<a href="http://web.archive.org/web/20190327223210/http://smk17.cn/">smk17.cn</a>基本出于停更状态，后又因为忘记给其续费导致被别人抢注了，后悔万分呀～</p>
  <figure>
    <a href="/blog/300/1.png" target="_blank">
      <img src="/blog/300/1.png" alt="抢注信息"/>
      <figcaption><p>抢注信息</p></figcaption>
    </a>
    
  </figure>

<p>乘着失业之际，就重新把个人网站给搞起来，之前的文章也不见了，还好有<a href="http://web.archive.org/">这个网站</a>，可以看到以前的历史站点，就慢慢逐步恢复过来新站点了～</p>
<p>而每一次的停更重归，我都会想和过去的做个道别，上一次就从<code>typecho</code>转移到<code>Hexo</code>，具体可以看<a href="/blog/86/">这里</a>。而这一次，就转移到<code>Hugo</code>啦～</p>
<p>关于站点的评论信息，还好之前用的是<a href="https://disqus.com/">disqus</a>,通过修改原有<code>Discussions</code>中的<code>Link</code>即可恢复～</p>]]></content>
        </item>
        
        <item>
            <title>2020 年度总结</title>
            <link>https://sengmitnick.com/blog/301/</link>
            <pubDate>Wed, 10 Feb 2021 19:00:00 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/301/</guid>
            <description>2020可真是多灾多难的一年啊！祸福倚伏，故此有了一些思考，也想通了一些事情，故有此次总结～
 概要 读书+工作多年，一直也没真正的总结过，之前虽然也有一些想法和一些行动，但还是停留在思想上，行动总是半途而废～
这一次算是对大学+工作多年的一个总结吧，下面是概要流程图～  9年大事记|2020总结
   我是谁 我一直觉得我比大多数迷茫的人好运多了，因为我好像一直都很明确我要做什么，但是回顾这9年，发现我又不如大部分人，甚至比那些循规蹈矩的人混得还差。
所以我在想问题出在哪？或许就是因为我喜欢捣腾却又容易半途而废的缘故吧！问题找到，那么离解决问题就不远了，所以今年我更折腾了，只为一个稳定而坚恒的环境～
人生第一次选择 高考失利，有限选择里选了计算机应用技术(嵌入式) 人总归要为自己的行为抉择买单，中考失利心态崩了，于是高中不再做书呆子，天天玩乐，到最后才开始冲刺却已晚，最后只能上个大专，选了我觉得符合我的**计算机应用技术(嵌入式)**专业。
不过我一直不知道自己适合往哪一块发展，所以在大一，加入电子协会，并于大二自学计算机其他方向，最后权衡之下决定走嵌入式工程师，也是我好喜折腾的原初显露吧～
人生第二次选择 第二次的抉择，是一个长期经验导向并在最后才决定的结果，所以这里会稍微唠叨一下～
自己在大二暑假期间打造了一套简单的CMS系统，最后直接作为毕业设计作品了 第一次有了技术宅的感觉了，虽然之前也偶尔有过，但这确实是我第一次因为自己想做一个东西而忘情投入最长的一次了。
因为之前被朋友带起的博客风，又因为自己专业与兴趣，自己尝试了各个博客系统，还GET到wordpress这一类CMS系统，最后产生了自己也搞一个类似的念头，然后就一发不可收拾，于是在暑假期间宅家里胡捣了一番，终于做了一个简陋版，大大的满足和成就感，特别是后面作为毕业设计得到大家一致认可的feel，我觉得我选对了～
但是那时候对于前端、后端、嵌入式之间还没有很清晰的分辨，所以在选择工作上还是倾向于本专业（嵌入式）。
龙芯培训考核项目，主导并涉及web前端界面和后端API的设计与实现 人生的第一份工作，是一家传统转型IT的企业，有种拿着工资创业的感觉，一开始大家的工作都是差不多，焊板子、烧写程序，调试代码，和最重要的码程序了。
后来，部门想搞一套智能家居中控系统，此时，大家就开始有分工了，因为我之前搞过web相关，所以在整体上，我把控整个项目，并负责其APP端和后端的开发。
经过这一次的项目，我越发觉得我更喜欢做APP一类的前端工作，但是因为目前工作尚可也就没多想～
多灾多难的本命年，决定新工作，新环境，新职业 2016，本命年，患病分手失业统统发生，憔悴但还是要生存，当时给一个朋友公司做前端兼职，失业后也就加入了这家公司。后，该司基于各方面的考虑打算迁往武汉，当时我也无心重找工作和折腾，也不想待广深，于是便一同去之～
2020 日志： 立足于当下，未来可期 公司前端业务平台趋于稳定 经过长达一年的探索，一年时间的打磨，在2019年末，公司的平台基本稳定，后面的工作无非就是改改bug和新功能开发，内核不变。于是有了更多时间去学习，探索新事物和新的视野。
疫情在家，线上办公，自律生活 庆幸于提早的放假，而不必留于武汉过年，也因为疫情的原因，公司开启了长达4个月的线上办公，而我因在家线上办公，于是在时间上有了更多的把控权，开始了自己的生活作息规律。
回汉工作4个月后，决然退出 回汉后，原有环境变化，导致已有的自律生活不复存在，一直想重新恢复却有难度，算是环境+个人因素了。
而随着工作的舒适度递增，还有公司工作氛围的消极化、掌权人的变更等一系列的变化，便逐渐有了离开的心思。后又有新的合作，于是决然离去，但是新的机会不到个月就泡汤了，于是一个人重回广东，思考往后该怎么走～
第二次分手，重新找工作 原打算乘着失业期间梳理现有资源与规划未来，但突如其来的失恋，导致无心于此，便先重新招工作，等待合适机会了～
新工作，自律生活重启，未来可期 新的工作，一开始人还是蛮颓废的，除了上班平时就玩游戏，后来慢慢因为工作的规律化，把自律生活重新提前，渐渐习惯与5点起床，做饭、洗漱、运动和冥想，而早起自律带来精神面貌的改变是明显的，一开始周六周末不上班就去图书馆（因为一开始在宿舍根本无法安心作业），后面也可以在宿舍作业了。
当自律生活慢慢形成习惯，就有了新的规划了～
再次失业，却不再茫然 临近年底放假，却被通知公司解散，但经不起我的一丝波澜。让我们立足当下，未来可期～
2021 目标与期许 上面说到的新规划，就放到2021实现啦～
 个人站点的重新出发与更新 塑造后期自由职业或第二副业的基建（或曰：工作时间自由前期筹备） 打造自己的页面搭建平台 学习理财，积攒本金，积累经验 每个月最少外出玩乐两次  最后附上喜马拉雅|年度收听报告的截图：  喜马拉雅|年度收听报告
   凡是过往即为序章
立足当下未来可期💪
&amp;mdash;END</description>
            <content type="html"><![CDATA[<blockquote>
<p>2020可真是多灾多难的一年啊！祸福倚伏，故此有了一些思考，也想通了一些事情，故有此次总结～</p>
</blockquote>
<h2 id="概要">概要</h2>
<p>读书+工作多年，一直也没真正的总结过，之前虽然也有一些想法和一些行动，但还是停留在思想上，行动总是半途而废～</p>
<p>这一次算是对大学+工作多年的一个总结吧，下面是概要流程图～



  <figure>
    <a href="/blog/301/1.jpg" target="_blank">
      <img src="/blog/301/1.jpg" alt="9年大事记|2020总结"/>
      <figcaption><p>9年大事记|2020总结</p></figcaption>
    </a>
    
  </figure>
</p>
<h2 id="我是谁">我是谁</h2>
<p>我一直觉得我比大多数迷茫的人好运多了，因为我好像一直都很明确我要做什么，但是回顾这9年，发现我又不如大部分人，甚至比那些循规蹈矩的人混得还差。</p>
<p>所以我在想问题出在哪？或许就是因为我喜欢捣腾却又容易半途而废的缘故吧！问题找到，那么离解决问题就不远了，所以今年我更折腾了，只为一个稳定而坚恒的环境～</p>
<h2 id="人生第一次选择">人生第一次选择</h2>
<h3 id="高考失利有限选择里选了计算机应用技术嵌入式">高考失利，有限选择里选了计算机应用技术(嵌入式)</h3>
<p>人总归要为自己的行为抉择买单，中考失利心态崩了，于是高中不再做书呆子，天天玩乐，到最后才开始冲刺却已晚，最后只能上个大专，选了我觉得符合我的**计算机应用技术(嵌入式)**专业。</p>
<p>不过我一直不知道自己适合往哪一块发展，所以在大一，加入电子协会，并于大二自学计算机其他方向，最后权衡之下决定走<strong>嵌入式工程师</strong>，也是我好喜折腾的原初显露吧～</p>
<h2 id="人生第二次选择">人生第二次选择</h2>
<p>第二次的抉择，是一个长期经验导向并在最后才决定的结果，所以这里会稍微唠叨一下～</p>
<h3 id="自己在大二暑假期间打造了一套简单的cms系统最后直接作为毕业设计作品了">自己在大二暑假期间打造了一套简单的CMS系统，最后直接作为毕业设计作品了</h3>
<p>第一次有了技术宅的感觉了，虽然之前也偶尔有过，但这确实是我第一次因为自己想做一个东西而忘情投入最长的一次了。</p>
<p>因为之前被朋友带起的博客风，又因为自己专业与兴趣，自己尝试了各个博客系统，还GET到<strong>wordpress</strong>这一类CMS系统，最后产生了自己也搞一个类似的念头，然后就一发不可收拾，于是在暑假期间宅家里胡捣了一番，终于做了一个简陋版，大大的满足和成就感，特别是后面作为毕业设计得到大家一致认可的feel，我觉得我选对了～</p>
<p>但是那时候对于前端、后端、嵌入式之间还没有很清晰的分辨，所以在选择工作上还是倾向于本专业（嵌入式）。</p>
<h3 id="龙芯培训考核项目主导并涉及web前端界面和后端api的设计与实现">龙芯培训考核项目，主导并涉及web前端界面和后端API的设计与实现</h3>
<p>人生的第一份工作，是一家传统转型IT的企业，有种拿着工资创业的感觉，一开始大家的工作都是差不多，焊板子、烧写程序，调试代码，和最重要的码程序了。</p>
<p>后来，部门想搞一套智能家居中控系统，此时，大家就开始有分工了，因为我之前搞过web相关，所以在整体上，我把控整个项目，并负责其APP端和后端的开发。</p>
<p>经过这一次的项目，我越发觉得我更喜欢做APP一类的前端工作，但是因为目前工作尚可也就没多想～</p>
<h3 id="多灾多难的本命年决定新工作新环境新职业">多灾多难的本命年，决定新工作，新环境，新职业</h3>
<p>2016，本命年，患病分手失业统统发生，憔悴但还是要生存，当时给一个朋友公司做前端兼职，失业后也就加入了这家公司。后，该司基于各方面的考虑打算迁往武汉，当时我也无心重找工作和折腾，也不想待广深，于是便一同去之～</p>
<h2 id="2020-日志-立足于当下未来可期">2020 日志： 立足于当下，未来可期</h2>
<h3 id="公司前端业务平台趋于稳定">公司前端业务平台趋于稳定</h3>
<p>经过长达一年的探索，一年时间的打磨，在2019年末，公司的平台基本稳定，后面的工作无非就是改改bug和新功能开发，内核不变。于是有了更多时间去学习，探索新事物和新的视野。</p>
<h3 id="疫情在家线上办公自律生活">疫情在家，线上办公，自律生活</h3>
<p>庆幸于提早的放假，而不必留于武汉过年，也因为疫情的原因，公司开启了长达4个月的线上办公，而我因在家线上办公，于是在时间上有了更多的把控权，开始了自己的生活作息规律。</p>
<h3 id="回汉工作4个月后决然退出">回汉工作4个月后，决然退出</h3>
<p>回汉后，原有环境变化，导致已有的自律生活不复存在，一直想重新恢复却有难度，算是环境+个人因素了。</p>
<p>而随着工作的舒适度递增，还有公司工作氛围的消极化、掌权人的变更等一系列的变化，便逐渐有了离开的心思。后又有新的合作，于是决然离去，但是新的机会不到个月就泡汤了，于是一个人重回广东，思考往后该怎么走～</p>
<h3 id="第二次分手重新找工作">第二次分手，重新找工作</h3>
<p>原打算乘着失业期间梳理现有资源与规划未来，但突如其来的失恋，导致无心于此，便先重新招工作，等待合适机会了～</p>
<h3 id="新工作自律生活重启未来可期">新工作，自律生活重启，未来可期</h3>
<p>新的工作，一开始人还是蛮颓废的，除了上班平时就玩游戏，后来慢慢因为工作的规律化，把自律生活重新提前，渐渐习惯与5点起床，做饭、洗漱、运动和冥想，而早起自律带来精神面貌的改变是明显的，一开始周六周末不上班就去图书馆（因为一开始在宿舍根本无法安心作业），后面也可以在宿舍作业了。</p>
<p>当自律生活慢慢形成习惯，就有了新的规划了～</p>
<h3 id="再次失业却不再茫然">再次失业，却不再茫然</h3>
<p>临近年底放假，却被通知公司解散，但经不起我的一丝波澜。让我们立足当下，未来可期～</p>
<h2 id="2021-目标与期许">2021 目标与期许</h2>
<p>上面说到的新规划，就放到2021实现啦～</p>
<ul>
<li>个人站点的重新出发与更新</li>
<li>塑造后期自由职业或第二副业的基建（或曰：工作时间自由前期筹备）</li>
<li>打造自己的<strong>页面搭建平台</strong></li>
<li>学习理财，积攒本金，积累经验</li>
<li>每个月最少外出玩乐两次</li>
</ul>
<p>最后附上<code>喜马拉雅|年度收听报告</code>的截图：



  <figure>
    <a href="/blog/301/2.png" target="_blank">
      <img src="/blog/301/2.png" alt="喜马拉雅|年度收听报告"/>
      <figcaption><p>喜马拉雅|年度收听报告</p></figcaption>
    </a>
    
  </figure>
</p>
<p>凡是过往即为序章</p>
<p>立足当下未来可期💪</p>
<p><strong>&mdash;END</strong></p>
]]></content>
        </item>
        
        <item>
            <title>基于disqus-php-api在Hexo博客中使用Disqus</title>
            <link>https://sengmitnick.com/blog/104/</link>
            <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/104/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;废话少说，这里基于 &lt;a href=&#34;https://fooleap.org&#34;&gt;fooleap&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/fooleap/disqus-php-api&#34;&gt;disqus-php-api&lt;/a&gt; 对Hexo中的NexT主题进行兼容。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>废话少说，这里基于 <a href="https://fooleap.org">fooleap</a> 的 <a href="https://github.com/fooleap/disqus-php-api">disqus-php-api</a> 对Hexo中的NexT主题进行兼容。</p>
</blockquote>
<h2 id="更新">更新</h2>
<h3 id="修复-同一篇文章url不同都需要创建thread-的-bug">修复 <code>同一篇文章url不同都需要创建Thread</code> 的 bug</h3>
<p>问题描述： 就用我这篇文章的链接做例子吧～ 对于链接 <code>http://smk17.cn/posts/104/</code> 、 <code>http://smk17.cn/posts/104/index.html</code> 、<code>http://smk17.cn/posts/104/?xxx</code> 、 <code>http://smk17.cn/posts/104/index.html?xxx</code> ,如果在 <code>http://smk17.cn/posts/104/</code> 创建了Thread在打开其他四个依然要你创建Thread的。</p>
<p>修复方案：
如果你已经阅读了本文，那么应该知道 <code>disqusapi.swig</code> 这个文件，修复方法就是修改改文件：
定位到该文件创建实例的位置，添加url参数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">disq</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">iDisqus</span>(<span style="color:#e6db74">&#39;comments&#39;</span>, {
    <span style="color:#a6e22e">forum</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;{{ theme.disqusapi.forum }}&#39;</span>,
    <span style="color:#a6e22e">site</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;{{ theme.disqusapi.site }}&#39;</span>,
    <span style="color:#a6e22e">api</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;{{ theme.disqusapi.api }}&#39;</span>,
    <span style="color:#a6e22e">mode</span><span style="color:#f92672">:</span> {{ <span style="color:#a6e22e">theme</span>.<span style="color:#a6e22e">disqusapi</span>.<span style="color:#a6e22e">mode</span> }},
    <span style="color:#a6e22e">badge</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;{{ theme.disqusapi.badge }}&#39;</span>,
    <span style="color:#a6e22e">timeout</span><span style="color:#f92672">:</span> {{ <span style="color:#a6e22e">theme</span>.<span style="color:#a6e22e">disqusapi</span>.<span style="color:#a6e22e">timeout</span> }},
    <span style="color:#a6e22e">init</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
    <span style="color:#a6e22e">url</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;index.html&#39;</span>,<span style="color:#e6db74">&#39;&#39;</span>),
    <span style="color:#a6e22e">emoji_list</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">emojiList</span>
});
</code></pre></div><p>PS： url参数是比较新版本才有的，如果你添加了改参数后bug没修复，那你需要更新一下了。</p>
<h3 id="修复-no-access-control-allow-origin-header-is-present-on-the-requested-resource">修复 <code>No 'Access-Control-Allow-Origin' header is present on the requested resource.</code></h3>
<p>问题描述： 在使用smk17.cn这个域名访问时，disqus的加载完全没问题，但是当我用www.smk17.cn或者类似于cdn.smk17.cn的域名访问时就不行了，会一直加载（如图）：</p>



  <figure>
    <a href="/blog/104/2.gif" target="_blank">
      <img src="/blog/104/2.gif" alt="bug界面效果"/>
      <figcaption><p>bug界面效果</p></figcaption>
    </a>
    
  </figure>

<p>在浏览器打开调试窗口的 Console 可以看到是因为 请求资源上不存在“Access-Control-Allow-Origin”标头(如图)：</p>



  <figure>
    <a href="/blog/104/1.png" target="_blank">
      <img src="/blog/104/1.png" alt="原因"/>
      <figcaption><p>原因</p></figcaption>
    </a>
    
  </figure>

<p>修复方案：</p>
<p>在这里，我们就需要修改服务端的代码，要修改的文件路径为：<code>your-disqus-php-path/init.php</code></p>
<p>找到 <code>init.php</code> 文件中设置 <code>Access-Control-Allow-Origin</code> 部分：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">namespace</span> <span style="color:#a6e22e">Emojione</span>;
<span style="color:#66d9ef">require_once</span>(<span style="color:#e6db74">&#39;config.php&#39;</span>);
<span style="color:#66d9ef">require_once</span>(<span style="color:#e6db74">&#39;emojione/autoload.php&#39;</span>);
<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Content-type:text/json&#39;</span>);
$origin <span style="color:#f92672">=</span> <span style="color:#a6e22e">isset</span>($_SERVER[<span style="color:#e6db74">&#39;HTTP_ORIGIN&#39;</span>])<span style="color:#f92672">?</span> $_SERVER[<span style="color:#e6db74">&#39;HTTP_ORIGIN&#39;</span>] <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>;  
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#39;(localhost|127\.0\.0\.1|&#39;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">DISQUS_WEBSITE</span><span style="color:#f92672">.</span><span style="color:#e6db74">&#39;)&#39;</span>, $origin)){
    <span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Access-Control-Allow-Origin: &#39;</span><span style="color:#f92672">.</span>$origin);
}
$client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Client</span>(<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Ruleset</span>());
</code></pre></div><p>删除原本设置 <code>Access-Control-Allow-Origin</code> 的代码，替换以下的代码：
(其中，变量 <code>allow_origin</code> 是你要允许可以调用你后端的域名网址)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">namespace</span> <span style="color:#a6e22e">Emojione</span>;
<span style="color:#66d9ef">require_once</span>(<span style="color:#e6db74">&#39;config.php&#39;</span>);
<span style="color:#66d9ef">require_once</span>(<span style="color:#e6db74">&#39;emojione/autoload.php&#39;</span>);
<span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Content-type:text/json&#39;</span>);
<span style="color:#75715e">//跨域访问的时候才会存在此字段  
</span><span style="color:#75715e"></span>$origin <span style="color:#f92672">=</span> <span style="color:#a6e22e">isset</span>($_SERVER[<span style="color:#e6db74">&#39;HTTP_ORIGIN&#39;</span>]) <span style="color:#f92672">?</span> $_SERVER[<span style="color:#e6db74">&#39;HTTP_ORIGIN&#39;</span>] <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>;    
     
$allow_origin <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(    
    <span style="color:#e6db74">&#39;http://smk17.cn&#39;</span>,
    <span style="color:#e6db74">&#39;http://www.smk17.cn&#39;</span>
);    
     
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">in_array</span>($origin, $allow_origin)){    
    <span style="color:#a6e22e">header</span>(<span style="color:#e6db74">&#39;Access-Control-Allow-Origin:&#39;</span><span style="color:#f92672">.</span>$origin);     
}
$client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Client</span>(<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Ruleset</span>());
</code></pre></div><h2 id="搭建评论系统后端">搭建评论系统后端</h2>
<p>在这里我使用 <code>Hostker</code> 作为后端服务器，并且为了省钱，是跟本博客放在一起的,如果看过 <a href="/blog/99">Hostker+Hexo+TravisCI构建自动化</a> <code>博客就知道我的博客搭建过程，Hostker</code> 是只支持 <code>php</code> 和静态网站，并且<code>PHP</code>是只能通过 <code>git</code> 上传才可以使用的，不过他价格非常便宜，在没什么流量的情况下只需要一天3分钱。（以下基于 <code>Hostker</code> 操作）</p>
<h3 id="获取-disqus-php-api">获取 <code>disqus-php-api</code></h3>
<p>输入以下命令行获取 <code>disqus-php-api</code> ：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">git clone https://github.com/fooleap/disqus-php-api
</code></pre></div><h3 id="移动并重命名">移动并重命名</h3>
<p>然后把<code>disqus-php</code>文件夹移动到<code>smk17</code>(你在本地的网站目录)下并重命名为<code>disqus</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">mv disqus-php /path/to/smk17/disqus
</code></pre></div><h3 id="修改-configphp">修改 config.php</h3>
<p>修改 <code>config.php</code> 的 <code>Disqus</code> 设置 那一块（以下是我网站的配置）；</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_PUBKEY&#39;</span>, <span style="color:#e6db74">&#39;E8Uh5l5fHZ6gD8U3KycjAIAk46f68Zw7C6eW8WSjZvCLXebZ7p0r1yrYDrLilk2F&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_USERNAME&#39;</span>, <span style="color:#e6db74">&#39;your-blog&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_EMAIL&#39;</span>, <span style="color:#e6db74">&#39;your-email@163.com&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_PASSWORD&#39;</span>, <span style="color:#e6db74">&#39;your-password&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_WEBSITE&#39;</span>, <span style="color:#e6db74">&#39;http://your-website.cn&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_SHORTNAME&#39;</span>, <span style="color:#e6db74">&#39;your-shortname&#39;</span>);
<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;DISQUS_APPROVED&#39;</span>, <span style="color:#66d9ef">true</span>);
</code></pre></div><p>PS: 注意 <code>DISQUS_WEBSITE</code> 是你的网站域名，如：<code>http://smk17.cn</code>，之前我填写为<code>http://smk17.cn/</code>,就是因为多了个 <code>/</code>, 导致一直处于 创建 Thread 的情况。</p>
<h3 id="上传到服务器">上传到服务器</h3>
<p>修改完成后就可以上传到服务器了：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">git add --all .
git commit -m <span style="color:#e6db74">&#34;updata website&#34;</span>
git push -u origin master
</code></pre></div><h2 id="前端兼容next主题">前端，兼容nexT主题</h2>
<h3 id="修改-next-配置文件">修改 Next 配置文件</h3>
<p>首先需要在 Next 的配置文件中添加 disqus 的相关参数，配置文件路径为：<code>your-blog-path/themes/next/_config.yml</code></p>
<p>找到配置文件中评论模块部分：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Swiftype Search API Key</span>
<span style="color:#75715e">#swiftype_key:</span>
<span style="color:#75715e"># Baidu Analytics ID</span>
<span style="color:#75715e">#baidu_analytics:</span>
<span style="color:#75715e"># Duoshuo ShortName</span>
<span style="color:#75715e">#duoshuo_shortname:</span>
<span style="color:#75715e"># Disqus</span>
<span style="color:#f92672">disqus</span>:
  <span style="color:#f92672">enable</span>: <span style="color:#66d9ef">false</span>
  <span style="color:#f92672">shortname</span>: <span style="color:#ae81ff">smk17</span>
  <span style="color:#f92672">count</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>在后面添加下面的代码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">disqusapi</span>:
  <span style="color:#f92672">enable</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">forum</span>: <span style="color:#e6db74">&#39;smk17&#39;</span>
  <span style="color:#f92672">site</span>: <span style="color:#e6db74">&#39;http://smk17.cn&#39;</span>
  <span style="color:#f92672">api</span>: <span style="color:#e6db74">&#39;http://smk17.cn/disqus/api&#39;</span>
  <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">2</span>
  <span style="color:#f92672">badge</span>: <span style="color:#e6db74">&#39;博主&#39;</span>
  <span style="color:#f92672">timeout</span>: <span style="color:#ae81ff">3000</span>
</code></pre></div><p>现在就可以通过修改配置文件轻松的打开关闭</p>
<h3 id="添加-disqusapi-模块">添加 disqusapi 模块</h3>
<p>Next 中的评论模块都存在下面的路径中： <code>your-blog-path/themes/next/layout/_third-party/comments/</code></p>
<p>在其中新建名为 <code>disqusapi.swig</code> 的文件，内容为：</p>
<pre><code class="language-swig" data-lang="swig">{% if theme.disqusapi.enable %}
    &lt;link rel=&quot;stylesheet&quot; href=&quot;/disqus/dist/iDisqus.min.css&quot; /&gt;
    &lt;script src=&quot;/disqus/dist/iDisqus.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var emojiList = [{
            code:'smile',
            title:'笑脸',
            unicode:'1f604'
        },{
            code:'mask',
            title:'生病',
            unicode:'1f637'
        },{
            code:'joy',
            title:'破涕为笑',
            unicode:'1f602'
        },{
            code:'stuck_out_tongue_closed_eyes',
            title:'吐舌',
            unicode:'1f61d'
        },{
            code:'flushed',
            title:'脸红',
            unicode:'1f633'
        },{
            code:'scream',
            title:'恐惧',
            unicode:'1f631'
        },{
            code:'pensive',
            title:'失望',
            unicode:'1f614'
        },{
            code:'unamused',
            title:'无语',
            unicode:'1f612'
        },{
            code:'grin',
            title:'露齿笑',
            unicode:'1f601'
        },{
            code:'heart_eyes',
            title:'色',
            unicode:'1f60d'
        },{
            code:'sweat',
            title:'汗',
            unicode:'1f613'
        },{
            code:'smirk',
            title:'得意',
            unicode:'1f60f'
        }]; 
        var disq = new iDisqus('comments', {
            forum: '{{ theme.disqusapi.forum }}',
            site: '{{ theme.disqusapi.site }}',
            api: '{{ theme.disqusapi.api }}',
            mode: {{ theme.disqusapi.mode }},
            badge: '{{ theme.disqusapi.badge }}',
            timeout: {{ theme.disqusapi.timeout }},
            init: true,
            emoji_list: emojiList
        });
        disq.count();
    &lt;/script&gt;
{% endif %}
</code></pre><p>添加引用
在同一目录下的 <code>index.swig</code> 中添加：</p>
<pre><code class="language-swig" data-lang="swig">{% include 'disqusapi.swig' %}
</code></pre><p>现在，重新生成发布博客， <code>Disqus</code> 评论插件就出现在文章后面了。
不过每篇文章你可能需要创建 <code>Thread</code> 。不过如果你可以科学上网的话，<code>mode</code>选择1在加载原生<code>Disqus</code>评论系统就会为你自动创建了。</p>
<p><strong>&mdash;END</strong></p>]]></content>
        </item>
        
        <item>
            <title>umi.theme 参数剖析</title>
            <link>https://sengmitnick.com/blog/332/</link>
            <pubDate>Sun, 08 Aug 2021 10:24:07 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/332/</guid>
            <description>其实就是 less的modifyVars功能
如果是通过js引入，会转化成less的格式：
输入：
module.exports = { &amp;#39;@hd&amp;#39;: &amp;#39;1px&amp;#39;, &amp;#39;@primary-color&amp;#39;: &amp;#39;#1E78FF&amp;#39;, &amp;#39;@url&amp;#39;: `&amp;#39;https://ant-design.gitee.io/components/upload-cn/&amp;#39;`, }; 输出：
@hd: 1px; @primary-color: #1E78FF; @url: &#39;https://ant-design.gitee.io/components/upload-cn/&#39;; PS: 注意声明链接时必须有引号，不然会报错哦～
基于modifyVars功能可以实现类似的CSS In JS 功能哦～</description>
            <content type="html"><![CDATA[<p>其实就是 less的modifyVars功能</p>
<p>如果是通过js引入，会转化成less的格式：</p>
<p>输入：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
  <span style="color:#e6db74">&#39;@hd&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1px&#39;</span>,
  <span style="color:#e6db74">&#39;@primary-color&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#1E78FF&#39;</span>,
  <span style="color:#e6db74">&#39;@url&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">`&#39;https://ant-design.gitee.io/components/upload-cn/&#39;`</span>,
};
</code></pre></div><p>输出：</p>
<pre><code class="language-less" data-lang="less">@hd: 1px;
@primary-color: #1E78FF;
@url: 'https://ant-design.gitee.io/components/upload-cn/';
</code></pre><p>PS: 注意声明链接时必须有引号，不然会报错哦～</p>
<p>基于modifyVars功能可以实现类似的CSS In JS 功能哦～</p>
]]></content>
        </item>
        
        <item>
            <title>TypeScript 使用宝典</title>
            <link>https://sengmitnick.com/blog/333/</link>
            <pubDate>Fri, 06 Aug 2021 10:27:06 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/333/</guid>
            <description>jsDoc 详细资料：https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html
 is &amp;amp; typeof https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards https://www.typescriptlang.org/docs/handbook/advanced-types.html#instanceof-type-guards
非空断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator
// Compiled with --strictNullChecks function validateEntity(e?: Entity) { // Throw exception if e is null or invalid entity } function processEntity(e?: Entity) { validateEntity(e); let s = e!.name; // Assert that e is non-null and access name } const 断言 https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions
应用场景：自定义 hook 可以用得比较多， React.useState 就是如此
const useFlag = (initialValue = false) =&amp;gt; { const [flag, setFlag] = React.useState(initialValue); const up = React.</description>
            <content type="html"><![CDATA[<h2 id="jsdoc">jsDoc</h2>
<p>详细资料：https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html</p>



<iframe 
  src="https://stackblitz.com/edit/node-y66mjg?embed=1&amp;file=jsdoc.ts&amp;hideNavigation=1&amp;view=editor"
  style="
    width: 100%;
    height: 500px;
    border: 0;
    border-radius: 4px;
    overflow: hidden;
  " 
  title="jsDoc使用示例"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking">
</iframe>
<h2 id="is--typeof">is &amp; typeof</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards">https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards</a>
<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#instanceof-type-guards">https://www.typescriptlang.org/docs/handbook/advanced-types.html#instanceof-type-guards</a></p>
<h2 id="非空断言">非空断言</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-TypeScript" data-lang="TypeScript"><span style="color:#75715e">// Compiled with --strictNullChecks
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">validateEntity</span>(<span style="color:#a6e22e">e?</span>: <span style="color:#66d9ef">Entity</span>) {
  <span style="color:#75715e">// Throw exception if e is null or invalid entity
</span><span style="color:#75715e"></span>}
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">processEntity</span>(<span style="color:#a6e22e">e?</span>: <span style="color:#66d9ef">Entity</span>) {
  <span style="color:#a6e22e">validateEntity</span>(<span style="color:#a6e22e">e</span>);
  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">e</span><span style="color:#f92672">!</span>.<span style="color:#a6e22e">name</span>; <span style="color:#75715e">// Assert that e is non-null and access name
</span><span style="color:#75715e"></span>}
</code></pre></div><h2 id="const-断言">const 断言</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions</a></p>
<p>应用场景：自定义 hook 可以用得比较多， <code>React.useState</code> 就是如此</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">useFlag</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">initialValue</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>) <span style="color:#f92672">=&gt;</span> {
  <span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">flag</span>, <span style="color:#a6e22e">setFlag</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">useState</span>(<span style="color:#a6e22e">initialValue</span>);
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">up</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">useCallback</span>(() <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">setFlag</span>(<span style="color:#66d9ef">true</span>), []);
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">down</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">React</span>.<span style="color:#a6e22e">useCallback</span>(() <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">setFlag</span>(<span style="color:#66d9ef">false</span>), []);
  <span style="color:#66d9ef">return</span> [<span style="color:#a6e22e">flag</span>, <span style="color:#a6e22e">up</span>, <span style="color:#a6e22e">down</span>] <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">const</span>;
};

<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">modalVisible</span>, <span style="color:#a6e22e">showModal</span>, <span style="color:#a6e22e">hideModal</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">useFlag</span>();
</code></pre></div><h2 id="number-下标"><code>[number]</code> 下标</h2>
<p>通过 <code>[number]</code> 下标可以完成 Union2Tuple 的骚操作：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">DRINK_LIST</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Beer&#39;</span>, <span style="color:#e6db74">&#39;Wine&#39;</span>, <span style="color:#e6db74">&#39;Water&#39;</span>] <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">const</span>;
<span style="color:#75715e">// 相当于: type Drink = &#39;Beer&#39; | &#39;Wine&#39; | &#39;Water&#39;;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Drink</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">DRINK_LIST</span>[<span style="color:#66d9ef">number</span>];
</code></pre></div><p>获取到的Union类型还可以用到 Record 当中。</p>
<h2 id="record--dictionary">Record &amp; Dictionary</h2>
<p>业务中，我们经常会写枚举和对应的映射:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">AnimalType</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;cat&#39;</span> <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;dog&#39;</span> <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;frog&#39;</span>;
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">AnimalMap</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">cat</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;猫&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span>},
  <span style="color:#a6e22e">dog</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;狗&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span> },
  <span style="color:#a6e22e">forg</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;蛙&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span> },
};
</code></pre></div><p>注意到上面 forg 拼错了吗？
Record 可以保证映射完整:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">AnimalType</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;cat&#39;</span> <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;dog&#39;</span> <span style="color:#f92672">|</span> <span style="color:#e6db74">&#39;frog&#39;</span>;
<span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">AnimalDescription</span> { <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">icon</span>: <span style="color:#66d9ef">string</span> }
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">AnimalMap</span>: <span style="color:#66d9ef">Record</span>&lt;<span style="color:#f92672">AnimalType</span><span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#a6e22e">AnimalDescription</span>&gt; <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">cat</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;猫&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span>},
  <span style="color:#a6e22e">dog</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;狗&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span> },
  <span style="color:#a6e22e">forg</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;蛙&#39;</span>, <span style="color:#a6e22e">icon</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39; &#39;</span> }, <span style="color:#75715e">// Hey!
</span><span style="color:#75715e"></span>};
</code></pre></div><p>建议大家在声明一个 object 时，尽量用 <code>Record&lt;string, any&gt;</code> 。</p>
<h2 id="required--partial--pick">Required &amp; Partial &amp; Pick</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">User</span> {
  <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">age</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span>;
  <span style="color:#a6e22e">op?</span>: <span style="color:#66d9ef">string</span>;
};

<span style="color:#75715e">// 相当于: type PickUser = { id: number; age: number;name: string;op: string; }
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PartialUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Partial</span>&lt;<span style="color:#f92672">User</span>&gt;

<span style="color:#75715e">// 相当于: type PartialUser = { id?: number; age?: number; name?: string; }
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PartialUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Partial</span>&lt;<span style="color:#f92672">User</span>&gt;

<span style="color:#75715e">// 相当于: type PickUser = { id: number; age: number; }
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PickUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Pick</span>&lt;<span style="color:#f92672">User</span><span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">id</span><span style="color:#960050;background-color:#1e0010">&#34;</span> <span style="color:#960050;background-color:#1e0010">|</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">age</span><span style="color:#960050;background-color:#1e0010">&#34;</span>&gt;
</code></pre></div><p>目前我自己用Partial比较多，主要应用在以下场景：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">import</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">React</span> <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;react&#39;</span>;
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">useSetState</span> } <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;ahooks&#39;</span>;

<span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">State</span> {
  <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">age</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span>;
}

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">demo</span>: <span style="color:#66d9ef">React.FC</span><span style="color:#f92672">&lt;</span>{ <span style="color:#a6e22e">a</span>: <span style="color:#66d9ef">boolean</span> }<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">props</span>) <span style="color:#f92672">=&gt;</span> {
  <span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">state</span>, <span style="color:#a6e22e">setState</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">useSetState</span>&lt;<span style="color:#f92672">State</span>&gt;({ <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">0</span>, <span style="color:#a6e22e">age</span>: <span style="color:#66d9ef">0</span>, <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span> });

  <span style="color:#66d9ef">return</span> (
    &lt;<span style="color:#f92672">div</span>
      <span style="color:#a6e22e">onClick</span><span style="color:#f92672">=</span>{() <span style="color:#f92672">=&gt;</span> {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">newState</span>: <span style="color:#66d9ef">Partial</span>&lt;<span style="color:#f92672">State</span>&gt; <span style="color:#f92672">=</span> {};
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">props</span>.<span style="color:#a6e22e">a</span>) {
          <span style="color:#a6e22e">newState</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">age</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
        }
        <span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">newState</span>);
      }}
    &gt;&lt;/<span style="color:#f92672">div</span>&gt;
  );
};
</code></pre></div><h2 id="omit--union--tuple">Omit &amp; Union &amp; Tuple</h2>
<p>Omit 是 never、Exclude和Pick的组合，大致效果如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">User</span> {
  <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">age</span>: <span style="color:#66d9ef">number</span>;
  <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span>;
};

<span style="color:#75715e">// 相当于: type PickUser = { age: number; name: string; }
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">OmitUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Omit</span>&lt;<span style="color:#f92672">User</span><span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#960050;background-color:#1e0010">&#34;</span><span style="color:#a6e22e">id</span><span style="color:#960050;background-color:#1e0010">&#34;</span>&gt;
</code></pre></div><p>使用场景：对某些组件进行二次开发是对其Props的重新定义，一般会搭配_.omit使用</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">import</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">React</span> <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;react&#39;</span>;
<span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">omit</span> } <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;lodash-es&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">RcUpload</span>, { <span style="color:#a6e22e">UploadProps</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">RcUploadProps</span>, } <span style="color:#66d9ef">from</span> <span style="color:#e6db74">&#39;antd/es/upload&#39;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">omitUploadType</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;type&#39;</span>, <span style="color:#e6db74">&#39;listType&#39;</span>, <span style="color:#e6db74">&#39;onChange&#39;</span>] <span style="color:#66d9ef">as</span> <span style="color:#66d9ef">const</span>;
<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">OmitUploadType</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">omitUploadType</span>[<span style="color:#66d9ef">number</span>];

<span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">UploadProps</span>&lt;<span style="color:#f92672">T</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#a6e22e">any</span>&gt; <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Omit</span>&lt;<span style="color:#f92672">RcUploadProps</span><span style="color:#960050;background-color:#1e0010">,</span> <span style="color:#a6e22e">OmitUploadType</span>&gt; {
  <span style="color:#a6e22e">value?</span>: <span style="color:#66d9ef">T</span>;
  <span style="color:#a6e22e">onChange</span><span style="color:#f92672">?:</span> (<span style="color:#a6e22e">value</span>: <span style="color:#66d9ef">T</span> <span style="color:#f92672">|</span> <span style="color:#a6e22e">OCRResponse</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">void</span>;
  }
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Demo</span>: <span style="color:#66d9ef">React.FC</span><span style="color:#f92672">&lt;</span>{ <span style="color:#a6e22e">a</span>: <span style="color:#66d9ef">boolean</span> }<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">props</span>) <span style="color:#f92672">=&gt;</span> {
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rcUploadProps</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">omit</span>(<span style="color:#a6e22e">props</span>,<span style="color:#a6e22e">omitUploadType</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>
};
</code></pre></div><h2 id="泛型">泛型</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-types">https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-types</a></p>
<h2 id="泛型组件">泛型组件</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// &lt;Demo&lt;string&gt; ... /&gt;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Demo</span> <span style="color:#f92672">=</span> &lt;<span style="color:#f92672">T</span> <span style="color:#a6e22e">extends</span> {}&gt;(<span style="color:#a6e22e">props</span>: <span style="color:#66d9ef">DemoProps</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">null</span>
</code></pre></div><h2 id="泛型函数">泛型函数</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">identity</span>&lt;<span style="color:#f92672">Type</span>&gt;(<span style="color:#a6e22e">arg</span>: <span style="color:#66d9ef">Type</span>)<span style="color:#f92672">:</span> <span style="color:#a6e22e">Type</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arg</span>;
}

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">myIdentity</span>: <span style="color:#66d9ef">identity</span>(<span style="color:#ae81ff">0</span>); <span style="color:#75715e">//ts会根据泛型自动推导出返回类型。
</span></code></pre></div><p>合理运用泛型写函数、类和组件，会让你的代码更上一层哦～
小课题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#75715e">// 第一个是组件类型，第二个是组件的Props，怎么写可以实现传入一个组件，
</span><span style="color:#75715e">// 自动推导出properties类型呢？
</span><span style="color:#75715e">// 提示： 会用到 extends 和 React的内置类型
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">identity</span>&lt;<span style="color:#f92672">C</span><span style="color:#960050;background-color:#1e0010">,</span><span style="color:#a6e22e">P</span>&gt;(<span style="color:#a6e22e">Component</span>: <span style="color:#66d9ef">any</span>, <span style="color:#a6e22e">properties</span>: <span style="color:#66d9ef">any</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">any</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arg</span>;
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ts" data-lang="ts"><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">API</span> {
  <span style="color:#e6db74">&#39;/user&#39;</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span> },
  <span style="color:#e6db74">&#39;/menu&#39;</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">foods</span>: <span style="color:#66d9ef">Food</span>[] },
}
<span style="color:#75715e">// 根据传入的 url 返回 对应url的类型，并且url只能是API接口的key
</span><span style="color:#75715e">// 提示： keyof
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">identity</span>&lt;<span style="color:#f92672">URL</span>&gt;<span style="color:#66d9ef">get</span>(<span style="color:#a6e22e">url</span>: <span style="color:#66d9ef">URL</span>)<span style="color:#f92672">:</span> <span style="color:#66d9ef">any</span> {
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arg</span>;
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Prettier 使用宝典</title>
            <link>https://sengmitnick.com/blog/330/</link>
            <pubDate>Tue, 25 May 2021 13:47:05 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/330/</guid>
            <description>VSCODE 安装 Prettier 的官方扩展：https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode
配置 resolveGlobalModules ，使 Prettier 使用项目本地依赖项中 Prettier。
{ &amp;#34;prettier.resolveGlobalModules&amp;#34;: true, &amp;#34;[typescriptreact]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; }, &amp;#34;[typescript]&amp;#34;: { &amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;esbenp.prettier-vscode&amp;#34; } } NPM 安装 prettier lint-staged pre-commit
以下是 package.json 配置：
{ &amp;#34;pre-commit&amp;#34;: [ &amp;#34;lint-staged&amp;#34; ], &amp;#34;lint-staged&amp;#34;: { &amp;#34;*.{js,jsx,less,md,json}&amp;#34;: [ &amp;#34;prettier --write&amp;#34; ], &amp;#34;*.ts?(x)&amp;#34;: [ &amp;#34;prettier --parser=typescript --write&amp;#34; ] }, } 参考  https://github.com/prettier/prettier-vscode#prettier-resolution https://prettier.io/docs/en/configuration.html  </description>
            <content type="html"><![CDATA[<h2 id="vscode">VSCODE</h2>
<p>安装 <code>Prettier</code> 的官方扩展：<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode</a></p>
<p>配置 <code>resolveGlobalModules</code> ，使 <code>Prettier</code> 使用项目本地依赖项中 <code>Prettier</code>。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;prettier.resolveGlobalModules&#34;</span>: <span style="color:#66d9ef">true</span>,
  <span style="color:#f92672">&#34;[typescriptreact]&#34;</span>: {
    <span style="color:#f92672">&#34;editor.defaultFormatter&#34;</span>: <span style="color:#e6db74">&#34;esbenp.prettier-vscode&#34;</span>
  },
  <span style="color:#f92672">&#34;[typescript]&#34;</span>: {
    <span style="color:#f92672">&#34;editor.defaultFormatter&#34;</span>: <span style="color:#e6db74">&#34;esbenp.prettier-vscode&#34;</span>
  }
}
</code></pre></div><h2 id="npm">NPM</h2>
<p>安装 prettier lint-staged pre-commit</p>
<p>以下是 <code>package.json</code> 配置：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;pre-commit&#34;</span>: [
    <span style="color:#e6db74">&#34;lint-staged&#34;</span>
  ],
  <span style="color:#f92672">&#34;lint-staged&#34;</span>: {
    <span style="color:#f92672">&#34;*.{js,jsx,less,md,json}&#34;</span>: [
      <span style="color:#e6db74">&#34;prettier --write&#34;</span>
    ],
    <span style="color:#f92672">&#34;*.ts?(x)&#34;</span>: [
      <span style="color:#e6db74">&#34;prettier --parser=typescript --write&#34;</span>
    ]
  },
}
</code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/prettier/prettier-vscode#prettier-resolution">https://github.com/prettier/prettier-vscode#prettier-resolution</a></li>
<li><a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>umi.define 应用问题</title>
            <link>https://sengmitnick.com/blog/331/</link>
            <pubDate>Mon, 10 May 2021 14:52:35 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/331/</guid>
            <description>这是工作中看到同事的错误写法，特意记录下来～
  错误写法
   相关使用文档：https://umijs.org/zh-CN/config#define
 原理分析
   原理分析： define 中的变量在生产环境会被压缩掉，如果通过 const {PXX_ENV1, PLATFORM1} = process.env; 方式取值，会先被编译成以上截图代码，导致在生产环境中并没有被压缩掉～</description>
            <content type="html"><![CDATA[<blockquote>
<p>这是工作中看到同事的错误写法，特意记录下来～</p>
</blockquote>



  <figure>
    <a href="/blog/331/01.png" target="_blank">
      <img src="/blog/331/01.png" alt="错误写法"/>
      <figcaption><p>错误写法</p></figcaption>
    </a>
    
  </figure>

<p>相关使用文档：https://umijs.org/zh-CN/config#define</p>



  <figure>
    <a href="/blog/331/02.png" target="_blank">
      <img src="/blog/331/02.png" alt="原理分析"/>
      <figcaption><p>原理分析</p></figcaption>
    </a>
    
  </figure>

<p>原理分析： <code>define</code> 中的变量在生产环境会被压缩掉，如果通过 <code>const {PXX_ENV1, PLATFORM1} = process.env;</code> 方式取值，会先被编译成以上截图代码，导致在生产环境中并没有被压缩掉～</p>
]]></content>
        </item>
        
        <item>
            <title>利用 gitee pages 提速自己的个人网站</title>
            <link>https://sengmitnick.com/blog/317/</link>
            <pubDate>Sun, 25 Apr 2021 16:35:30 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/317/</guid>
            <description>前言 前阵子我在服务器上搭建的 v2Ray 挂了，无奈之下启动B计划，搭建了 Trojan 服务器，但是搭建成功后，虽然可以继续愉快的科学上网，却导致之前基于 Nginx 搭建的站点都挂掉了。不过还好，我的Nginx上面只配置了两个站点，一个就是目前的博客，还有就是我的 Cloud IED 了。
Cloud IED 可以通过修改 Trojan 服务器-伪装站点的 root 位置继续使用。而本来的博客站点，则可以考虑通过 GiteePages + dcnd 进行解决。
开启 Gitee Pages 服务 之前我的源码是放在GitHub上面，通过 Gitee 的导入仓库功能就可以导入我的源码到其上了。然后就是通过 gh-pages 进行作业啦～
could not find image 就是每次更新站点有点繁琐，需要先同步GitHub，然后到 Gitee Pages 的页面进行更新。
通过阿里的 DCDN 进行全球加速 如果使用的是 GitHub Pages 功能的话，通过其中的自定义域名即可把自己的域名绑定并且可以自动更新HTTPS证书了。但是 Gitee Pages 并没有开放该功能（之前貌似有的，不过好像因为国内政策问题就关掉了），而我的站点评论使用的是 disqus，如果直接用 Gitee 提供的域名的花，评论数据就比较麻烦了。
所以我在想是否可以通过CDN的方式来曲线实现原有的自定义功能呢？一开始我是使用七牛的CDN进行的，因为一开始我就打算通过七牛的 Kodo + CDN 进行网站的迁移+提升，但是发现Kodo的站点功能有点缺陷，最后才选择了 Gitee Pages 。后面单纯的使用七牛的CDN也不行，一直卡在测试不通过。最后通过了阿里云的全站加速DCDN实现了，至于后面有什么坑再说啦～
&amp;mdash;END</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>前阵子我在服务器上搭建的 <strong>v2Ray</strong> 挂了，无奈之下启动B计划，搭建了 <strong>Trojan</strong> 服务器，但是搭建成功后，虽然可以继续愉快的科学上网，却导致之前基于 <strong>Nginx</strong> 搭建的站点都挂掉了。不过还好，我的Nginx上面只配置了两个站点，一个就是目前的博客，还有就是我的 <strong>Cloud IED</strong> 了。</p>
<p><strong>Cloud IED</strong> 可以通过修改 <strong>Trojan</strong> 服务器-伪装站点的 <strong>root</strong> 位置继续使用。而本来的博客站点，则可以考虑通过 GiteePages + dcnd 进行解决。</p>
<h2 id="开启-gitee-pages-服务">开启 Gitee Pages 服务</h2>
<p>之前我的源码是放在<strong>GitHub</strong>上面，通过 <strong>Gitee</strong> 的导入仓库功能就可以导入我的源码到其上了。然后就是通过 <strong>gh-pages</strong> 进行作业啦～</p>



  could not find image

<p>就是每次更新站点有点繁琐，需要先同步GitHub，然后到 <strong>Gitee Pages</strong> 的页面进行更新。</p>
<h2 id="通过阿里的-dcdn-进行全球加速">通过阿里的 DCDN 进行全球加速</h2>
<p>如果使用的是 GitHub Pages 功能的话，通过其中的自定义域名即可把自己的域名绑定并且可以自动更新<strong>HTTPS证书</strong>了。但是 <strong>Gitee Pages</strong> 并没有开放该功能（之前貌似有的，不过好像因为国内政策问题就关掉了），而我的站点评论使用的是 <strong>disqus</strong>，如果直接用 <strong>Gitee</strong> 提供的域名的花，评论数据就比较麻烦了。</p>
<p>所以我在想是否可以通过CDN的方式来曲线实现原有的自定义功能呢？一开始我是使用<strong>七牛</strong>的CDN进行的，因为一开始我就打算通过<strong>七牛</strong>的 <strong>Kodo</strong> + <strong>CDN</strong> 进行网站的迁移+提升，但是发现<strong>Kodo</strong>的站点功能有点缺陷，最后才选择了 <strong>Gitee Pages</strong> 。后面单纯的使用<strong>七牛</strong>的CDN也不行，一直卡在测试不通过。最后通过了阿里云的全站加速<strong>DCDN</strong>实现了，至于后面有什么坑再说啦～</p>
<p><strong>&mdash;END</strong></p>
]]></content>
        </item>
        
        <item>
            <title>dumi build后，demo中引用的组件样式丢失</title>
            <link>https://sengmitnick.com/blog/316/</link>
            <pubDate>Thu, 25 Mar 2021 15:55:56 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/316/</guid>
            <description>最近在基于 dumi 封装组件库 Parallel Line，发布到线上环境后发现样式丢失问题。这里记录一下解决经过与结果~
 我的组件库项目是一个 lerna 项目， 和 #225 中描述的问题一致，但是里面说到的方法都解决不了我的问题，最终只能简单粗暴的通过 gulp 处理。
// gulpfile.js var gulp = require(&amp;#39;gulp&amp;#39;); var del = require(&amp;#39;del&amp;#39;); var less = require(&amp;#39;gulp-less&amp;#39;); var LessNpmImport = require(&amp;#39;less-plugin-npm-import&amp;#39;); gulp.task(&amp;#39;clean&amp;#39;, () =&amp;gt; del([&amp;#39;dist/**/*&amp;#39;])); gulp.task(&amp;#39;less&amp;#39;, () =&amp;gt; gulp .src(&amp;#39;src/components/**/*.less&amp;#39;) .pipe( less({ plugins: [new LessNpmImport({ prefix: &amp;#39;~&amp;#39; })], javascriptEnabled: true, }), ) .pipe(gulp.dest(&amp;#39;dist/&amp;#39;)), ); gulp.task(&amp;#39;default&amp;#39;, gulp.series(&amp;#39;clean&amp;#39;, &amp;#39;less&amp;#39;)); 参考  dumi #225  &amp;mdash;END</description>
            <content type="html"><![CDATA[<blockquote>
<p>最近在基于 <a href="https://d.umijs.org/">dumi</a> 封装组件库 <a href="https://supermoonlmy.gitee.io/parallel-line/">Parallel Line</a>，发布到线上环境后发现样式丢失问题。这里记录一下解决经过与结果~</p>
</blockquote>
<p>我的组件库项目是一个 lerna 项目， 和 <a href="https://github.com/umijs/dumi/issues/225">#225</a> 中描述的问题一致，但是里面说到的方法都解决不了我的问题，最终只能简单粗暴的通过 gulp 处理。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// gulpfile.js
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gulp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">del</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;del&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">less</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;gulp-less&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">LessNpmImport</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;less-plugin-npm-import&#39;</span>);

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;clean&#39;</span>, () =&gt; <span style="color:#a6e22e">del</span>([<span style="color:#e6db74">&#39;dist/**/*&#39;</span>]));

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;less&#39;</span>, () =&gt;
  <span style="color:#a6e22e">gulp</span>
    .<span style="color:#a6e22e">src</span>(<span style="color:#e6db74">&#39;src/components/**/*.less&#39;</span>)
    .<span style="color:#a6e22e">pipe</span>(
      <span style="color:#a6e22e">less</span>({
        <span style="color:#a6e22e">plugins</span><span style="color:#f92672">:</span> [<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">LessNpmImport</span>({ <span style="color:#a6e22e">prefix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;~&#39;</span> })],
        <span style="color:#a6e22e">javascriptEnabled</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
      }),
    )
    .<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">dest</span>(<span style="color:#e6db74">&#39;dist/&#39;</span>)),
);

<span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">task</span>(<span style="color:#e6db74">&#39;default&#39;</span>, <span style="color:#a6e22e">gulp</span>.<span style="color:#a6e22e">series</span>(<span style="color:#e6db74">&#39;clean&#39;</span>, <span style="color:#e6db74">&#39;less&#39;</span>));
</code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://d.umijs.org/">dumi</a></li>
<li><a href="https://github.com/umijs/dumi/issues/225">#225</a></li>
</ul>
<p><strong>&mdash;END</strong></p>
]]></content>
        </item>
        
        <item>
            <title>什么时候使用 useMemo 和 useCallback</title>
            <link>https://sengmitnick.com/blog/320/</link>
            <pubDate>Sun, 21 Mar 2021 13:55:43 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/320/</guid>
            <description> 前阵子，在帮同事查看一个 Bug 时，发现用的一个组件里面，在调用事件里面使用值一直不生效，最后发现是 改组件渲染部分用了 useMemo 所致。
 演示  参考  【译】什么时候使用 useMemo 和 useCallback When to useMemo and useCallback  </description>
            <content type="html"><![CDATA[<blockquote>
<p>前阵子，在帮同事查看一个 Bug 时，发现用的一个组件里面，在调用事件里面使用值一直不生效，最后发现是 改组件渲染部分用了 useMemo 所致。</p>
</blockquote>
<h2 id="演示">演示</h2>



<iframe
  src="https://codesandbox.io/embed/usememo-decuowushiyongshili-dqwgp?fontsize=14&hidenavigation=1&theme=dark"
  style="
    width: 100%;
    height: 500px;
    border: 0;
    border-radius: 4px;
    overflow: hidden;
  "
  title="useMemo 的错误使用示例"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<!-- raw HTML omitted -->
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://jancat.github.io/post/2019/translation-usememo-and-usecallback/">【译】什么时候使用 useMemo 和 useCallback</a></li>
<li><a href="https://kentcdodds.com/blog/usememo-and-usecallback">When to useMemo and useCallback</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>WSL 使用指北</title>
            <link>https://sengmitnick.com/blog/313/</link>
            <pubDate>Thu, 11 Mar 2021 11:26:49 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/313/</guid>
            <description>什么是 WSL  WSL - Windows Subsystem for Linux The Windows Subsystem for Linux lets developers run Linux environments &amp;ndash; including most command-line tools, utilities, and applications &amp;ndash; directly on Windows, unmodified, without the overhead of a virtual machine.
 Linux 的 Windows 子系统让开发人员无需虚拟机就可以直接在 Windows 上运行 Linux 环境，包括大多数命令行工具、程序和应用。
使用 WSL 的好处是：
与在虚拟机下使用 Linux 相比，WSL 更加流畅； WSL 可以对 Windows 文件系统下的文件直接进行读写，文件传输更方便； 剪贴板互通，可以直接在 Windows 下其它地方复制文本内容，粘贴到 WSL；
开启 WSL 在 控制面板&amp;ndash;&amp;gt;程序和功能 页面找到 Windows 功能 ，在 Windows 功能 窗口中勾选 适用于 Linux 的 Windows 子系统 功能，点击确定，并按照提示重启电脑。</description>
            <content type="html"><![CDATA[<h2 id="什么是-wsl">什么是 WSL</h2>
<blockquote>
<p>WSL - Windows Subsystem for Linux
The Windows Subsystem for Linux lets developers run Linux environments &ndash; including most command-line tools, utilities, and applications &ndash; directly on Windows, unmodified, without the overhead of a virtual machine.</p>
</blockquote>
<p>Linux 的 Windows 子系统让开发人员无需虚拟机就可以直接在 Windows 上运行 Linux 环境，包括大多数命令行工具、程序和应用。</p>
<p>使用 WSL 的好处是：</p>
<p>与在虚拟机下使用 Linux 相比，WSL 更加流畅；
WSL 可以对 Windows 文件系统下的文件直接进行读写，文件传输更方便；
剪贴板互通，可以直接在 Windows 下其它地方复制文本内容，粘贴到 WSL；</p>
<h2 id="开启-wsl">开启 WSL</h2>
<p>在 <strong>控制面板&ndash;&gt;程序和功能</strong> 页面找到 <strong>Windows 功能</strong> ，在 <strong>Windows 功能</strong> 窗口中勾选 <strong>适用于 Linux 的 Windows 子系统</strong> 功能，点击确定，并按照提示重启电脑。</p>



  <figure>
    <a href="/blog/313/01.jpg" target="_blank">
      <img src="/blog/313/01.jpg" alt="开启 WSL"/>
      <figcaption><p>开启 WSL</p></figcaption>
    </a>
    
  </figure>

<h2 id="升级到wsl2">升级到WSL2</h2>
<blockquote>
<p>下面的所有命令均需在有管理员权限的 PowerShell 中执行</p>
</blockquote>
<h3 id="安装wsl2功能模块">安装WSL2功能模块</h3>
<ol>
<li>如果之前没有用过 WSL，那么首先需要安装 Windows 10 的 WSL 功能：</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
</code></pre></div><ol start="2">
<li>安装 WSL2 功能模块：</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
</code></pre></div><ol start="3">
<li>上面的命令执行完毕后，重启电脑完成 WSL2 的安装。</li>
</ol>
<h3 id="安装linux内核">安装Linux内核</h3>
<p>至此为止我们只是开启了 WSL2 的功能，但是还需要安装对应的 Linux 系统内核。 请按照官方文档中的说明下载并安装对应软件包。
在 PowerShell 中，将 WSL 默认版本设置为2，这样之后安装的 Linux 发行版才会都安装在 WSL2 中。若没有安装上一步中的内核，此时系统会提醒你到对应的网址下载内核并安装。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wsl --set-default-version <span style="color:#ae81ff">2</span>
</code></pre></div><h2 id="安装喜欢的-wsl-发行版">安装喜欢的 WSL 发行版</h2>
<p>在 Windows 应用商店搜索 WSL ，然后搜索栏会提示“在 Windows 上运行 Linux”，点进去，选择自己喜欢的 Linux 发行版，安装即可。这里我选择的是 Ubuntu，之后的所有内容也是基于 WSL Ubuntu 编写。</p>



  <figure>
    <a href="/blog/313/02.png" target="_blank">
      <img src="/blog/313/02.png" alt="安装 WSL 发行版"/>
      <figcaption><p>安装 WSL 发行版</p></figcaption>
    </a>
    
  </figure>

<h2 id="初始化-wsl">初始化 WSL</h2>
<p>安装完成后可在开始菜单里找到 Ubuntu 的快捷方式，打开 Ubuntu 的快捷方式，第一次打开需要等待一段时间让它完成初始化。</p>



  <figure>
    <a href="/blog/313/03.jpg" target="_blank">
      <img src="/blog/313/03.jpg" alt="初始化 WSL"/>
      <figcaption><p>初始化 WSL</p></figcaption>
    </a>
    
  </figure>

<p>初始化完成后，按照提示输入用户名和密码。（PS：在 Linux 命令行中输入密码时，密码不会出现*号占位符）。</p>
<p>在输入用户名时，你所输入的用户是打开命令行时默认登陆的用户，建议不要使用 root 作为默认登陆用户。如果使用了 root 作为默认登陆用户也没有什么大碍，可以再创建一个普通管理员用户并设置成 WSL 默认登陆用户，具体步骤会在下文中讲解。</p>
<h2 id="启用-root-用户">启用 root 用户</h2>
<p>输入以下命令，为 root 用户设置密码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo passwd root
</code></pre></div><h2 id="更改-wsl-默认登陆账号">更改 WSL 默认登陆账号</h2>
<blockquote>
<p>此处默认子系统为 Ubuntu 20.04，如果你是其他 Linux 子系统可做参考进行类比~</p>
</blockquote>
<p>在开始按钮右键，在弹出菜单中打开 Power shell，执行下面命令，查看已安装的 Linux 子系统：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wslconfig /list
</code></pre></div><p>Power shell 执行 bash 命令默认运行 Ubuntu：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wslconfig /setdefault Ubuntu-20.04
</code></pre></div><p>Power shell 设置 WSL Ubuntu 默认登陆用户，下面命令中 username 替换成你需要设为默认登陆的用户：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ubuntu2004.exe config --default-user username
</code></pre></div><p>PS: 这里我主要设置默认登陆用户为 root 。</p>
<p>Power shell 执行下面命令，可查看 Ubuntu 命令的帮助信息：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ubuntu2004.exe /?
</code></pre></div><h2 id="安装-nodejs-开发环境">安装 nodejs 开发环境</h2>
<h3 id="设置代理">设置代理</h3>
<blockquote>
<p>该设置基于 宿主Windows 使用 V2Ray 进行代理上网。</p>
</blockquote>
<ol>
<li>设置Windows防火墙</li>
</ol>
<p>直接把防火墙关掉乃最快方式。</p>
<ol start="2">
<li>把宿主的代理软件设置成可以局域网共享：</li>
</ol>



  <figure>
    <a href="/blog/313/10.png" target="_blank">
      <img src="/blog/313/10.png" alt="局域网共享"/>
      <figcaption><p>局域网共享</p></figcaption>
    </a>
    
  </figure>

<ol start="3">
<li>然后设置相应的环境变量即可。</li>
</ol>
<h4 id="bash">bash</h4>
<p>编辑<code>.bashrc</code>文件，底部添加以下代码：（参考<a href="https://wiki.imalan.cn/archives/WSL%202%20%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/">WSL 2 中配置终端走主机代理</a>）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">export hostip<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /etc/resolv.conf |grep -oP <span style="color:#e6db74">&#39;(?&lt;=nameserver\ ).*&#39;</span><span style="color:#66d9ef">)</span>;
export https_proxy<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://</span><span style="color:#e6db74">${</span>hostip<span style="color:#e6db74">}</span><span style="color:#e6db74">:9999&#34;</span>;
export http_proxy<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://</span><span style="color:#e6db74">${</span>hostip<span style="color:#e6db74">}</span><span style="color:#e6db74">:9999&#34;</span>;
export all_proxy<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;socks5://</span><span style="color:#e6db74">${</span>hostip<span style="color:#e6db74">}</span><span style="color:#e6db74">:1081&#34;</span>;
</code></pre></div><h3 id="配置-git">配置 Git</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config --global user.name <span style="color:#e6db74">&#34;John Doe&#34;</span>
git config --global user.email johndoe@example.com

<span style="color:#75715e"># git status shows all files as modified #184</span>
git config --global core.filemode false
git config --global core.autocrlf true
</code></pre></div><p>如果你 <strong>git clone</strong> 代码基于ssh，还需要执行以下命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Load key &#34;/root/.ssh/id_rsa&#34;: bad permissions</span>
cd ~/.ssh
chmod <span style="color:#ae81ff">600</span> *
</code></pre></div><h3 id="安装-nvm">安装 NVM</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh
sh ./install.sh
</code></pre></div><h3 id="配置环境变量">配置环境变量</h3>
<h4 id="bash-1">bash</h4>
<p>编辑<code>.bashrc</code>文件，底部添加以下代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">export NVM_DIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.nvm&#34;</span>
<span style="color:#f92672">[</span> -s <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/nvm.sh&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\.</span> <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/nvm.sh&#34;</span>  <span style="color:#75715e"># This loads nvm</span>
export PATH<span style="color:#f92672">=</span>$PATH:$NVM_BIN
</code></pre></div><h3 id="安装-npm-和-yarn">安装 npm 和 yarn</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nvm install --lts
npm i -g yarn
</code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/36482795">WSL 使用指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/144583887">WSL2来了！但是能正常使用并不简单</a></li>
<li><a href="https://blog.csdn.net/zcy_wxy/article/details/103621808">修改 Wsl 为 root 登录，并修改 root 密码</a></li>
<li><a href="https://github.com/Microsoft/WSL/issues/184">git status shows all files as modified #184</a></li>
<li><a href="https://wiki.imalan.cn/archives/WSL%202%20%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/">WSL 2 中配置终端走主机代理</a></li>
<li><a href="https://github.com/v2ray/discussion/issues/740">WSL能否直接使用win10代理 ＃740</a></li>
<li><a href="https://blog.csdn.net/qq_19004627/article/details/103417673">使用git时ssh提示“Load key &ldquo;/home/devid/.ssh/id_rsa&rdquo;: bad permissions”的解决办法</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>dependencies和devDependencies的区别</title>
            <link>https://sengmitnick.com/blog/312/</link>
            <pubDate>Wed, 10 Mar 2021 16:28:36 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/312/</guid>
            <description>当我们项目需要下载一个模块的时候，我们安装npm包（在项目目录下面npm install module_name）的时候，很多时候我们会在后面加上–save-dev 或 –save。这两个参数代表什么呢？
初识 相信很多人都会回答：
npm install module-name -save 自动把模块和版本号添加到dependencies部分 npm install module-name -save-dev 自动把模块和版本号添加到devdependencies部分
dependencies是什么呢？ 生产环境。 devdependencies是什么呢？ 开发环境。 网上也可以查到很多资料，大概回答意思是，我们搭建一个webpack+react+es6的项目，像webpack babel这种负责打包编译的，我们就应该装在开发环境，像react之类的装在生产环境。 可是为什么呢？ 我们不能告诉我们这样做，我们就只这样做，我们要知之其所以然呀。 恩。我试着吧react放进了dependencies，打包出来的文件依然可以运行，并没有什么问题。 why ？？？难道文档只是建议而已吗？？？
实质区别 如果我们只是单纯的做项目，那么我们可简单地认为生产环境和开发环境做为一种友善的提示，实质没有什么区别；但是，如果在发布npm包的时候，两种环境安装方式是有很大区别的！！！
假设有以下两个模块： 模块A
 devDependencies 模块B dependencies 模块C 模块D devDependencies 模块E dependencies 模块A npm install D的时候， 下载的模块为： D A C 当我们下载了模块D的源码，并且在根目录下npm install， 下载的模块为： A C E 所以，在发布npm包的时候，本身dependencies下的模块会作为依赖，一起被下载；devDependencies下面的模块就不会自动下载了；但对于项目而言，npm install 会自动下载devDependencies和dependencies下面的模块。  参考  specifying-dependencies-and-devdependencies-in-a-package-json-file 包应该放在devDependencies还是dependencies  </description>
            <content type="html"><![CDATA[<p>当我们项目需要下载一个模块的时候，我们安装npm包（在项目目录下面npm install module_name）的时候，很多时候我们会在后面加上–save-dev 或 –save。这两个参数代表什么呢？</p>
<p>初识
相信很多人都会回答：</p>
<p>npm install module-name -save 自动把模块和版本号添加到dependencies部分
npm install module-name -save-dev 自动把模块和版本号添加到devdependencies部分</p>
<p>dependencies是什么呢？ 生产环境。
devdependencies是什么呢？ 开发环境。
网上也可以查到很多资料，大概回答意思是，我们搭建一个webpack+react+es6的项目，像webpack babel这种负责打包编译的，我们就应该装在开发环境，像react之类的装在生产环境。
可是为什么呢？
我们不能告诉我们这样做，我们就只这样做，我们要知之其所以然呀。
恩。我试着吧react放进了dependencies，打包出来的文件依然可以运行，并没有什么问题。
why ？？？难道文档只是建议而已吗？？？</p>
<p>实质区别
如果我们只是单纯的做项目，那么我们可简单地认为生产环境和开发环境做为一种友善的提示，实质没有什么区别；但是，如果在发布npm包的时候，两种环境安装方式是有很大区别的！！！</p>
<p>假设有以下两个模块：
模块A</p>
<ul>
<li>devDependencies
模块B</li>
<li>dependencies
模块C
模块D</li>
<li>devDependencies
模块E</li>
<li>dependencies
模块A
npm install D的时候， 下载的模块为：</li>
<li>D</li>
<li>A</li>
<li>C
当我们下载了模块D的源码，并且在根目录下npm install， 下载的模块为：</li>
<li>A</li>
<li>C</li>
<li>E
所以，在发布npm包的时候，本身dependencies下的模块会作为依赖，一起被下载；devDependencies下面的模块就不会自动下载了；但对于项目而言，npm install 会自动下载devDependencies和dependencies下面的模块。</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file">specifying-dependencies-and-devdependencies-in-a-package-json-file</a></li>
<li><a href="https://guxinyan.github.io/2017/11/02/%E5%8C%85%E5%BA%94%E8%AF%A5%E6%94%BE%E5%9C%A8devDependencies%E8%BF%98%E6%98%AFdependencies/">包应该放在devDependencies还是dependencies</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>打造专属自己的CloudIDE</title>
            <link>https://sengmitnick.com/blog/308/</link>
            <pubDate>Mon, 22 Feb 2021 21:09:48 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/308/</guid>
            <description>前言 最近带着小白到处玩，发现小白太重了，究其原因，是因为小白的本重+充电器。遂想能否有一台较轻并且续航久的笔记本用来外出使用呢？一开始想通过iPad+code-server发现效果不是很完美，于是再三选择用google pixel slate+code-server。于是就有了这篇文章。
安装 安装code-server curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run nginx 反向代理 使用公网ip访问，非常不优雅，而且无法正常使用 https。因此需要使用反向代理的方式，通过指定的域名，让反向代理服务器将对应的请求Request发送到本地对应的端口上去，这样就实现了可以直接使用域名来访问，不必再加上端口号。
upstream wss_code { server 127.0.0.1:内网穿透/code-server的端口 weight=1; } server { listen 80; server_name 域名; server_tokens off; return 301 https://$server_name$request_uri; } server { listen 443 ssl; ssl_certificate 公钥路径; # path to your cacert.pem ssl_certificate_key 私钥路径; # path to your privkey.pem server_name 域名; #配置共享会话缓存大小 ssl_session_cache shared:SSL:10m; #配置会话超时时间 ssl_session_timeout 10m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &amp;#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS&amp;#39;; server_tokens off; location / { proxy_pass http://wss_code; # 转发 proxy_read_timeout 1200s; proxy_set_header Host $host; proxy_set_header X-Real_IP $remote_addr; proxy_set_header X-Forwarded-For $remote_addr:$remote_port; proxy_http_version 1.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近带着小白到处玩，发现小白太重了，究其原因，是因为小白的本重+充电器。遂想能否有一台较轻并且续航久的笔记本用来外出使用呢？一开始想通过<code>iPad</code>+<code>code-server</code>发现效果不是很完美，于是再三选择用<code>google pixel slate</code>+<code>code-server</code>。于是就有了这篇文章。</p>
<h2 id="安装">安装</h2>
<h3 id="安装code-server">安装code-server</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run
</code></pre></div><h3 id="nginx-反向代理">nginx 反向代理</h3>
<p>使用公网ip访问，非常不优雅，而且无法正常使用 https。因此需要使用反向代理的方式，通过指定的域名，让反向代理服务器将对应的请求Request发送到本地对应的端口上去，这样就实现了可以直接使用域名来访问，不必再加上端口号。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">upstream wss_code <span style="color:#f92672">{</span>
    server 127.0.0.1:内网穿透/code-server的端口 weight<span style="color:#f92672">=</span>1;
<span style="color:#f92672">}</span>
server <span style="color:#f92672">{</span>
    listen       80;
    server_name 域名;
    server_tokens off;

	  <span style="color:#66d9ef">return</span>       <span style="color:#ae81ff">301</span> https://$server_name$request_uri;
<span style="color:#f92672">}</span>
server <span style="color:#f92672">{</span>
    listen <span style="color:#ae81ff">443</span> ssl;
    ssl_certificate  公钥路径;        <span style="color:#75715e"># path to your cacert.pem</span>
    ssl_certificate_key  私钥路径;   <span style="color:#75715e"># path to your privkey.pem</span>
    server_name 域名;

		<span style="color:#75715e">#配置共享会话缓存大小</span>
    ssl_session_cache   shared:SSL:10m;
    <span style="color:#75715e">#配置会话超时时间</span>
    ssl_session_timeout 10m;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers <span style="color:#e6db74">&#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS&#39;</span>;
    server_tokens off;

    location / <span style="color:#f92672">{</span>
        proxy_pass http://wss_code;      <span style="color:#75715e"># 转发</span>

        proxy_read_timeout  1200s;
        proxy_set_header Host $host;
        proxy_set_header X-Real_IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr:$remote_port;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;   <span style="color:#75715e"># 升级协议头</span>
        proxy_set_header Connection upgrade;
    <span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>反向代理配置好之后，就可以直接输入域名来访问 code-server 了。</p>
<p>PS: CDN 配置待续……</p>
<h3 id="安装zsh和oh-my-zsh">安装zsh和oh-my-zsh</h3>
<p>参考<a href="/blog/305/">《 Ubuntu下安装zsh和oh-my-zsh 》</a></p>
<h2 id="改造">改造</h2>
<h3 id="获取code-server安装位置">获取code-server安装位置</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">which code-server 
cat /usr/bin/code-server
</code></pre></div><p>输出以下结果</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/usr/bin/env sh
</span><span style="color:#75715e"></span>
exec /usr/lib/code-server/bin/code-server <span style="color:#e6db74">&#34;</span>$@<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>可得知<code>code-server</code>安装目录位置在<code>/usr/lib/code-server</code>下;</p>
<h3 id="替换code-server默认图标">替换code-server默认图标</h3>
<blockquote>
<p><code>code-server</code>默认的图标也太丑了，所以换掉:)</p>
</blockquote>
<p>替换 <code>/usr/lib/code-server/src/browser/media</code> 下图标：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">➜  ~ ls /usr/lib/code-server/src/browser/media 
favicon.ico  favicon.svg  manifest.json  pwa-icon-192.png  pwa-icon-512.png  pwa-icon.png
</code></pre></div><p>PS: 除<code>manifest.json</code>其他图片都需要替换。</p>
<h3 id="支持powerline字体">支持Powerline字体</h3>
<blockquote>
<p>因为我的<code>zsh</code>用了<code>agnoster</code>字体，所以需要支持<code>Powerline</code>字体.</p>
</blockquote>
<p>创建目录<code>/usr/lib/code-server/src/browser/media/fonts</code>,并添加<code>MesloLGLDZRegular_for_Powerline</code>字体到该目录下;</p>
<p>编辑<code>/usr/lib/code-server/src/browser/pages/vscode.html</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">  <span style="color:#75715e">&lt;!-- Copyright (C) Microsoft Corporation. All rights reserved. --&gt;</span>
  <span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
  &lt;<span style="color:#f92672">html</span>&gt;
    &lt;<span style="color:#f92672">head</span>&gt;
      <span style="color:#75715e">&lt;!-- more --&gt;</span>

      &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;coder-options&#34;</span> <span style="color:#a6e22e">data-settings</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{{OPTIONS}}&#34;</span> /&gt;

+     &lt;<span style="color:#f92672">style</span>&gt;
<span style="color:#f92672">+</span>       @<span style="color:#66d9ef">font-face</span> {
<span style="color:#f92672">+</span>         <span style="color:#f92672">font-family</span><span style="color:#f92672">:</span> <span style="color:#f92672">Meslo</span> <span style="color:#f92672">LG</span> <span style="color:#f92672">L</span> <span style="color:#f92672">DZ</span> <span style="color:#f92672">for</span> <span style="color:#f92672">Powerline</span><span style="color:#f92672">;</span>
<span style="color:#f92672">+</span>         <span style="color:#f92672">src</span><span style="color:#f92672">:</span> <span style="color:#f92672">url</span><span style="color:#f92672">(</span>{<span style="color:#960050;background-color:#1e0010">{CS_STATIC_BASE</span>}}<span style="color:#f92672">/</span><span style="color:#f92672">src</span><span style="color:#f92672">/</span><span style="color:#f92672">browser</span><span style="color:#f92672">/</span><span style="color:#f92672">media</span><span style="color:#f92672">/</span><span style="color:#f92672">fonts</span><span style="color:#f92672">/</span><span style="color:#f92672">MesloLGLDZRegular_for_Powerline</span>.<span style="color:#a6e22e">ttf</span><span style="color:#f92672">);</span>
<span style="color:#f92672">+</span>       <span style="color:#960050;background-color:#1e0010">}</span>
<span style="color:#f92672">+</span>     &lt;/<span style="color:#f92672">style</span>&gt;
    &lt;/<span style="color:#f92672">head</span>&gt;
    <span style="color:#75715e">&lt;!-- more --&gt;</span>
  &lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://sspai.com/post/60456">为 iPad 部署基于 VS Code 的远程开发环境</a></li>
<li><a href="https://blog.sumblog.cn/archives/code-server.html">在线代码编写环境——云端的vscode：code-server</a></li>
</ul>
<p><strong>……大功告成</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu下安装zsh和oh-my-zsh</title>
            <link>https://sengmitnick.com/blog/305/</link>
            <pubDate>Tue, 16 Feb 2021 12:03:26 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/305/</guid>
            <description>前言 网上教程一堆，为什么我还要写一篇？ 其实按照步骤及其简单，就两句命令行。但是，我之前在新的MacOS安装，并配置了一些插件，以达到我之前的小白下的模式，发现总感觉差了点。逐有了这一篇教程，主要还是备份下在新的系统下安装了什么插件～
安装 官方安装文档教程：
 Installing ZSH Install oh-my-zsh now  我在Ubuntu下执行以下命令：
apt install zsh sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 安装并配置ohmyz插件 安装zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 配置文件.zshrc如下：
# If you come from bash you might have to change your $PATH. export PATH=$HOME/bin:/usr/local/bin:$PATH # Path to your oh-my-zsh installation. export ZSH=&amp;#34;/root/.oh-my-zsh&amp;#34; # Set name of the theme to load --- if set to &amp;#34;random&amp;#34;, it will # load a random theme each time oh-my-zsh is loaded, in which case, # to know which specific one was loaded, run: echo $RANDOM_THEME # See https://github.</description>
            <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<h3 id="网上教程一堆为什么我还要写一篇">网上教程一堆，为什么我还要写一篇？</h3>
<p>其实按照步骤及其简单，就两句命令行。但是，我之前在新的<code>MacOS</code>安装，并配置了一些插件，以达到我之前的小白下的模式，发现总感觉差了点。逐有了这一篇教程，主要还是备份下在新的系统下安装了什么插件～</p>
<h2 id="安装">安装</h2>
<p>官方安装文档教程：</p>
<ul>
<li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">Installing ZSH</a></li>
<li><a href="https://ohmyz.sh/#install">Install oh-my-zsh now</a></li>
</ul>
<p>我在<code>Ubuntu</code>下执行以下命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt install zsh
sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><h2 id="安装并配置ohmyz插件">安装并配置ohmyz插件</h2>
<h3 id="安装zsh-syntax-highlighting">安装zsh-syntax-highlighting</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div><p>配置文件<code>.zshrc</code>如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># If you come from bash you might have to change your $PATH.</span>
export PATH<span style="color:#f92672">=</span>$HOME/bin:/usr/local/bin:$PATH

<span style="color:#75715e"># Path to your oh-my-zsh installation.</span>
export ZSH<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/root/.oh-my-zsh&#34;</span>

<span style="color:#75715e"># Set name of the theme to load --- if set to &#34;random&#34;, it will</span>
<span style="color:#75715e"># load a random theme each time oh-my-zsh is loaded, in which case,</span>
<span style="color:#75715e"># to know which specific one was loaded, run: echo $RANDOM_THEME</span>
<span style="color:#75715e"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span>
ZSH_THEME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;agnoster&#34;</span>

<span style="color:#75715e"># Set list of themes to pick from when loading at random</span>
<span style="color:#75715e"># Setting this variable when ZSH_THEME=random will cause zsh to load</span>
<span style="color:#75715e"># a theme from this variable instead of looking in $ZSH/themes/</span>
<span style="color:#75715e"># If set to an empty array, this variable will have no effect.</span>
<span style="color:#75715e"># ZSH_THEME_RANDOM_CANDIDATES=( &#34;robbyrussell&#34; &#34;agnoster&#34; )</span>

<span style="color:#75715e"># Uncomment the following line to use case-sensitive completion.</span>
<span style="color:#75715e"># CASE_SENSITIVE=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to use hyphen-insensitive completion.</span>
<span style="color:#75715e"># Case-sensitive completion must be off. _ and - will be interchangeable.</span>
<span style="color:#75715e"># HYPHEN_INSENSITIVE=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to disable bi-weekly auto-update checks.</span>
<span style="color:#75715e"># DISABLE_AUTO_UPDATE=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to automatically update without prompting.</span>
<span style="color:#75715e"># DISABLE_UPDATE_PROMPT=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to change how often to auto-update (in days).</span>
<span style="color:#75715e"># export UPDATE_ZSH_DAYS=13</span>

<span style="color:#75715e"># Uncomment the following line if pasting URLs and other text is messed up.</span>
<span style="color:#75715e"># DISABLE_MAGIC_FUNCTIONS=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to disable colors in ls.</span>
<span style="color:#75715e"># DISABLE_LS_COLORS=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to disable auto-setting terminal title.</span>
<span style="color:#75715e"># DISABLE_AUTO_TITLE=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to enable command auto-correction.</span>
<span style="color:#75715e"># ENABLE_CORRECTION=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line to display red dots whilst waiting for completion.</span>
<span style="color:#75715e"># Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)</span>
<span style="color:#75715e"># See https://github.com/ohmyzsh/ohmyzsh/issues/5765</span>
<span style="color:#75715e"># COMPLETION_WAITING_DOTS=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line if you want to disable marking untracked files</span>
<span style="color:#75715e"># under VCS as dirty. This makes repository status check for large repositories</span>
<span style="color:#75715e"># much, much faster.</span>
<span style="color:#75715e"># DISABLE_UNTRACKED_FILES_DIRTY=&#34;true&#34;</span>

<span style="color:#75715e"># Uncomment the following line if you want to change the command execution time</span>
<span style="color:#75715e"># stamp shown in the history command output.</span>
<span style="color:#75715e"># You can set one of the optional three formats:</span>
<span style="color:#75715e"># &#34;mm/dd/yyyy&#34;|&#34;dd.mm.yyyy&#34;|&#34;yyyy-mm-dd&#34;</span>
<span style="color:#75715e"># or set a custom format using the strftime function format specifications,</span>
<span style="color:#75715e"># see &#39;man strftime&#39; for details.</span>
<span style="color:#75715e"># HIST_STAMPS=&#34;mm/dd/yyyy&#34;</span>

<span style="color:#75715e"># Would you like to use another custom folder than $ZSH/custom?</span>
<span style="color:#75715e"># ZSH_CUSTOM=/path/to/new-custom-folder</span>

<span style="color:#75715e"># Which plugins would you like to load?</span>
<span style="color:#75715e"># Standard plugins can be found in $ZSH/plugins/</span>
<span style="color:#75715e"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span>
<span style="color:#75715e"># Example format: plugins=(rails git textmate ruby lighthouse)</span>
<span style="color:#75715e"># Add wisely, as too many plugins slow down shell startup.</span>
plugins<span style="color:#f92672">=(</span>git zsh-syntax-highlighting<span style="color:#f92672">)</span>

source $ZSH/oh-my-zsh.sh

<span style="color:#75715e"># User configuration</span>

<span style="color:#75715e"># export MANPATH=&#34;/usr/local/man:$MANPATH&#34;</span>

<span style="color:#75715e"># You may need to manually set your language environment</span>
<span style="color:#75715e"># export LANG=en_US.UTF-8</span>

<span style="color:#75715e"># Preferred editor for local and remote sessions</span>
<span style="color:#75715e"># if [[ -n $SSH_CONNECTION ]]; then</span>
<span style="color:#75715e">#   export EDITOR=&#39;vim&#39;</span>
<span style="color:#75715e"># else</span>
<span style="color:#75715e">#   export EDITOR=&#39;mvim&#39;</span>
<span style="color:#75715e"># fi</span>

<span style="color:#75715e"># Compilation flags</span>
<span style="color:#75715e"># export ARCHFLAGS=&#34;-arch x86_64&#34;</span>


export PYTHONIOENCODING<span style="color:#f92672">=</span>utf-8

export NVM_DIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$HOME<span style="color:#e6db74">/.nvm&#34;</span>
<span style="color:#f92672">[</span> -s <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/nvm.sh&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\.</span> <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/nvm.sh&#34;</span>  <span style="color:#75715e"># This loads nvm</span>
<span style="color:#f92672">[</span> -s <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/bash_completion&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\.</span> <span style="color:#e6db74">&#34;</span>$NVM_DIR<span style="color:#e6db74">/bash_completion&#34;</span>  <span style="color:#75715e"># This loads nvm bash_completion</span>

<span style="color:#75715e"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span>
<span style="color:#75715e"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span>
<span style="color:#75715e"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span>
<span style="color:#75715e"># For a full list of active aliases, run `alias`.</span>
<span style="color:#75715e">#</span>
<span style="color:#75715e"># Example aliases</span>
<span style="color:#75715e"># alias zshconfig=&#34;mate ~/.zshrc&#34;</span>
<span style="color:#75715e"># alias ohmyzsh=&#34;mate ~/.oh-my-zsh&#34;</span>

</code></pre></div><p><strong>END……</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Hugo下添加 Back Top 功能</title>
            <link>https://sengmitnick.com/blog/304/</link>
            <pubDate>Wed, 10 Feb 2021 12:28:23 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/304/</guid>
            <description> 在给文章设置了Hugo默认的TOC功能后，发现如果文章过长，每次返回顶部抵达段落的过程太麻烦，虽然在我的Google Pixel Slate下通过gg即可快速回到顶部，但是我还是觉得有必要给我站点添加 Back Top 的功能
 在动手之前，也可考虑其必要性，在这里大家有过一定程度的讨论，也是看了这里我才知道还可以通过gg可快速回到顶部:)
目前功能实现的代码可直接参考：9e6ba0c
虽然还不是很完美，但也可基本使用了。后续慢慢迭代吧:)
参考资料  添加一键返回顶部功能 5种回到顶部的写法从实现到增强  </description>
            <content type="html"><![CDATA[<blockquote>
<p>在给文章设置了<code>Hugo</code>默认的<code>TOC</code>功能后，发现如果文章过长，每次返回顶部抵达段落的过程太麻烦，虽然在我的<code>Google Pixel Slate</code>下通过<code>gg</code>即可快速回到顶部，但是我还是觉得有必要给我站点添加 <code>Back Top</code> 的功能</p>
</blockquote>
<!-- raw HTML omitted -->
<p>在动手之前，也可考虑其必要性，在<a href="https://www.zhihu.com/question/19921483">这里</a>大家有过一定程度的讨论，也是看了这里我才知道还可以通过<code>gg</code>可快速回到顶部:)</p>
<p>目前功能实现的代码可直接参考：<a href="https://github.com/sengmitnick/hugo-theme-hello-friend-ng/commit/9e6ba0cc1940ffa200fdf21787e7e808d2f126d0">9e6ba0c</a></p>
<p>虽然还不是很完美，但也可基本使用了。后续慢慢迭代吧:)</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://chowray.netlify.app/posts/it%E5%B0%8F%E8%AE%B0/2021-01-06-%E4%B8%80%E9%94%AE%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8/">添加一键返回顶部功能</a></li>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/5836179.html">5种回到顶部的写法从实现到增强</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>根据 swagger 文档生成 typescript 客户端调用代码</title>
            <link>https://sengmitnick.com/blog/306/</link>
            <pubDate>Wed, 16 Dec 2020 15:59:47 +0800</pubDate>
            
            <guid>https://sengmitnick.com/blog/306/</guid>
            <description>新公司后端API文档基于swagger打造，于是在项目开发过程中萌生了通过nodejs生成typescript接口函数的想法。
 在GitHub、npm和gitee找了一下，发现nswag-ts基本满足需求。
安装 yarn add -D nswagger-ts 在 package.json 的 scripts 节点增加 2 个执行命令
{ &amp;#34;scripts&amp;#34;: { &amp;#34;nswag:init&amp;#34;: &amp;#34;nswag init&amp;#34;, &amp;#34;nswag:run&amp;#34;: &amp;#34;nswag run&amp;#34;, } }  执行：yarn nswag-init 初始化项目 初始化完成后会在项目根目录创建文件夹 nswag,里面放置了配置文件及代码模板  以下是我的配置文件,支持多个模块生成。
var _ = require(&amp;#39;lodash&amp;#39;); const SwaggerUrlBase = &amp;#39;https://demo.com/api/%s/v2/api-docs&amp;#39;; const Apis = [&amp;#39;contents&amp;#39;, &amp;#39;material&amp;#39;, &amp;#39;customer&amp;#39;, &amp;#39;community&amp;#39;, &amp;#39;push&amp;#39;, &amp;#39;user&amp;#39;, &amp;#39;platform&amp;#39;] .map(tagName =&amp;gt; { return { SwaggerUrl: SwaggerUrlBase.replace(&amp;#39;%s&amp;#39;, tagName), ApiName: tagName.charAt(0).toUpperCase() + tagName.slice(1), }; }) .map(({ SwaggerUrl, ApiName }) =&amp;gt; ({ SwaggerUrl, // 接口文档地址（必填）  ApiBase: &amp;#39;/api&amp;#39;, // 接口根节点（必填）  ApiName, // 接口名称（必填）  // // OutPath: &amp;#39;&amp;#39;, // 输出目录（默认：项目根/src/api/{ApiName}）  // // TplPath: &amp;#39;&amp;#39;, // 模板路径（默认：内部默认模板，也可以copy 到项目中进行修改，然后指定用项目中模板）  // // Mock: false, // 是否启用模拟数据 （默认：false）  // // FormatMock: null, // 接管模拟数据格式化  FormatControllerName: function(name) { // 格式化模块名称（默认：接口名称+Api）  return name .</description>
            <content type="html"><![CDATA[<blockquote>
<p>新公司后端API文档基于<code>swagger</code>打造，于是在项目开发过程中萌生了<code>通过nodejs生成typescript接口函数</code>的想法。</p>
</blockquote>
<p>在GitHub、npm和gitee找了一下，发现<a href="https://gitee.com/smk17/nswag-ts">nswag-ts</a>基本满足需求。</p>
<h2 id="安装">安装</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yarn add -D nswagger-ts
</code></pre></div><p>在 package.json 的 scripts 节点增加 2 个执行命令</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;scripts&#34;</span>: {
    <span style="color:#f92672">&#34;nswag:init&#34;</span>: <span style="color:#e6db74">&#34;nswag init&#34;</span>,
    <span style="color:#f92672">&#34;nswag:run&#34;</span>: <span style="color:#e6db74">&#34;nswag run&#34;</span>,
  }
}
</code></pre></div><ol>
<li>执行：<code>yarn nswag-init</code> 初始化项目</li>
<li>初始化完成后会在项目根目录创建文件夹 nswag,里面放置了配置文件及代码模板</li>
</ol>
<p>以下是我的配置文件,支持多个模块生成。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;lodash&#39;</span>);

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">SwaggerUrlBase</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://demo.com/api/%s/v2/api-docs&#39;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Apis</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;contents&#39;</span>, <span style="color:#e6db74">&#39;material&#39;</span>, <span style="color:#e6db74">&#39;customer&#39;</span>, <span style="color:#e6db74">&#39;community&#39;</span>, <span style="color:#e6db74">&#39;push&#39;</span>, <span style="color:#e6db74">&#39;user&#39;</span>, <span style="color:#e6db74">&#39;platform&#39;</span>]
  .<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">tagName</span> =&gt; {
    <span style="color:#66d9ef">return</span> {
      <span style="color:#a6e22e">SwaggerUrl</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">SwaggerUrlBase</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;%s&#39;</span>, <span style="color:#a6e22e">tagName</span>),
      <span style="color:#a6e22e">ApiName</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">tagName</span>.<span style="color:#a6e22e">charAt</span>(<span style="color:#ae81ff">0</span>).<span style="color:#a6e22e">toUpperCase</span>() <span style="color:#f92672">+</span> <span style="color:#a6e22e">tagName</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span>),
    };
  })
  .<span style="color:#a6e22e">map</span>(({ <span style="color:#a6e22e">SwaggerUrl</span>, <span style="color:#a6e22e">ApiName</span> }) =&gt; ({
    <span style="color:#a6e22e">SwaggerUrl</span>, <span style="color:#75715e">// 接口文档地址（必填）
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ApiBase</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/api&#39;</span>, <span style="color:#75715e">// 接口根节点（必填）
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ApiName</span>, <span style="color:#75715e">// 接口名称（必填）
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//   // OutPath: &#39;&#39;, // 输出目录（默认：项目根/src/api/{ApiName}）
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//   // TplPath: &#39;&#39;, // 模板路径（默认：内部默认模板，也可以copy 到项目中进行修改，然后指定用项目中模板）
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//   // Mock: false, // 是否启用模拟数据 （默认：false）
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//   // FormatMock: null, // 接管模拟数据格式化
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FormatControllerName</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">name</span>) {
      <span style="color:#75715e">// 格式化模块名称（默认：接口名称+Api）
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">name</span>
        .<span style="color:#a6e22e">toUpperCase</span>()
        .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/[«»\(\).,\-\/\[\]]/g</span>, <span style="color:#e6db74">&#39;&#39;</span>)
        .<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/\s*/g</span>, <span style="color:#e6db74">&#39;&#39;</span>);
    },
    <span style="color:#a6e22e">FormatMethodName</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">name</span>) {
      <span style="color:#75715e">// 格式化接口名称（默认：小驼峰命名）
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">name</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;&#39;</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>;
      }
      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">fnName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">name</span>.<span style="color:#a6e22e">substring</span>(<span style="color:#a6e22e">name</span>.<span style="color:#a6e22e">lastIndexOf</span>(<span style="color:#e6db74">&#39;/&#39;</span>));
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">camelCase</span>(<span style="color:#a6e22e">fnName</span>);
    },
    <span style="color:#a6e22e">FormatModelName</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">name</span>) {
      <span style="color:#75715e">// 格式化dto对象、枚举名称（默认：只会去除特殊字符）
</span><span style="color:#75715e"></span>      <span style="color:#75715e">// if (name.indexOf(&#39;«&#39;) &gt;= 0) {
</span><span style="color:#75715e"></span>      <span style="color:#75715e">//   name = name.split(&#39;«&#39;)[1];
</span><span style="color:#75715e"></span>      <span style="color:#75715e">// }
</span><span style="color:#75715e"></span>
      <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">name</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/[«»\(\).,\-\/\[\]]/g</span>, <span style="color:#e6db74">&#39;&#39;</span>).<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/\s*/g</span>, <span style="color:#e6db74">&#39;&#39;</span>);
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">name</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;BaseResponse&#39;</span>) {
        <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">name</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;BaseResponse&#39;</span>, <span style="color:#e6db74">&#39;Response&#39;</span>);
      }
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">name</span>;
    },
  }));

<span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">Name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;nswag-ts&#39;</span>,
  <span style="color:#a6e22e">Description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;根据swagger文档生成typescript客户端调用代码&#39;</span>,
  <span style="color:#a6e22e">Apis</span>,
};

</code></pre></div><p><strong>END……</strong></p>
]]></content>
        </item>
        
        <item>
            <title>程序员的进击</title>
            <link>https://sengmitnick.com/blog/107/</link>
            <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/107/</guid>
            <description> 面向对象 方向的一些书籍推荐,仅供参考。
 设计模式  设计模式(head first设计模式) (入门) 设计原本:计算机科学巨匠Frederick P.Brooks的反思 (经典) 设计模式：可复用面向对象软件的基础 (深入)  模型方面  领域驱动设计 (偏理论) 实现领域驱动设计 (比较贴近实践) 企业应用架构模式 (经典必备书籍)  架构设计  软件架构设计（第2版） ——程序员向架构师转型必备  其它  金字塔原理 重构-改善既有代码的设计 王阳明心法  时间轴    阶段 设计模式 模型方面 架构设计 其它     1 - - - 金字塔原理   2 - - - 重构 改善既有代码的设计   3 head first设计模式 - - -   4 设计原本 领域驱动设计 - -   5 设计模式 实现领域驱动设计 - -   6 - 企业应用架构模式 - -   7 - - 软件架构设计 -    </description>
            <content type="html"><![CDATA[<blockquote>
<p><code>面向对象</code> 方向的一些书籍推荐,仅供参考。</p>
</blockquote>
<h2 id="设计模式">设计模式</h2>
<ul>
<li><a href="http://product.dangdang.com/20021171.html">设计模式(head first设计模式)</a> (入门)</li>
<li><a href="http://product.dangdang.com/23219451.html">设计原本:计算机科学巨匠Frederick P.Brooks的反思</a> (经典)</li>
<li><a href="http://product.dangdang.com/142308.html">设计模式：可复用面向对象软件的基础</a> (深入)</li>
</ul>
<h2 id="模型方面">模型方面</h2>
<ul>
<li><a href="http://product.dangdang.com/23981385.html">领域驱动设计</a> (偏理论)</li>
<li><a href="http://product.dangdang.com/23439300.html">实现领域驱动设计</a> (比较贴近实践)</li>
<li><a href="http://product.dangdang.com/20833536.html">企业应用架构模式</a> (经典必备书籍)</li>
</ul>
<h2 id="架构设计">架构设计</h2>
<ul>
<li><a href="http://product.dangdang.com/22787841.html">软件架构设计（第2版）</a> ——程序员向架构师转型必备</li>
</ul>
<h2 id="其它">其它</h2>
<ul>
<li><a href="http://dushu.qq.com/intro.html?bid=834333">金字塔原理</a></li>
<li><a href="http://product.dangdang.com/23734636.html">重构-改善既有代码的设计</a></li>
<li><a href="http://dushu.qq.com/intro.html?bid=831473">王阳明心法</a></li>
</ul>
<h2 id="时间轴">时间轴</h2>
<table>
<thead>
<tr>
<th>阶段</th>
<th>设计模式</th>
<th>模型方面</th>
<th>架构设计</th>
<th>其它</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>金字塔原理</td>
</tr>
<tr>
<td>2</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>重构 改善既有代码的设计</td>
</tr>
<tr>
<td>3</td>
<td>head first设计模式</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>设计原本</td>
<td>领域驱动设计</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>设计模式</td>
<td>实现领域驱动设计</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>-</td>
<td>企业应用架构模式</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>7</td>
<td>-</td>
<td>-</td>
<td>软件架构设计</td>
<td>-</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>微信小程序--通过leancloud做后台发送模板消息</title>
            <link>https://sengmitnick.com/blog/101/</link>
            <pubDate>Sun, 02 Jul 2017 16:18:15 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/101/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;利用通过leancloud做后台，接受微信小程序发送过来的form_id，接受并处理后向微信模板信息API发送让用户获取对应模板消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，所有操作根据官方文档&lt;a href=&#34;https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html&#34;&gt;https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html&lt;/a&gt;进行，本文章只介绍如何使用leancloud获取 &lt;code&gt;access_token&lt;/code&gt; 和通过LeanEngine发送模板消息，而如何创建模板及获取模板id请查看官方文档，这里不进行详述。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>利用通过leancloud做后台，接受微信小程序发送过来的form_id，接受并处理后向微信模板信息API发送让用户获取对应模板消息</p>
</blockquote>
<p>首先，所有操作根据官方文档<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html">https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html</a>进行，本文章只介绍如何使用leancloud获取 <code>access_token</code> 和通过LeanEngine发送模板消息，而如何创建模板及获取模板id请查看官方文档，这里不进行详述。</p>
<h2 id="在小程序中使用leancloud">在小程序中使用LeanCloud</h2>
<p>首先按照《<a href="https://leancloud.cn/docs/weapp.html">在微信小程序中使用 LeanCloud</a>》这遍文章说的给小程序用上LeanCloud；
在这里我用我目前开发的小程序<a href="https://github.com/smk17/FightTravel">FightTravel</a>进行解说。</p>
<h2 id="部署云引擎-leanengine">部署云引擎 LeanEngine</h2>
<p>按照《<a href="https://leancloud.cn/docs/leanengine_quickstart.html">云引擎快速入门</a>》快速部署一个示例Demo。</p>
<p>部署成功后目录大致如下：



  <figure>
    <a href="/blog/101/1.png" target="_blank">
      <img src="/blog/101/1.png" alt="LeanEngine目录"/>
      <figcaption><p>LeanEngine目录</p></figcaption>
    </a>
    
  </figure>
</p>
<h2 id="设置云函数获取-access_token">设置云函数获取 <code>access_token</code></h2>
<p>首先设置自定义环境变量：



  <figure>
    <a href="/blog/101/2.png" target="_blank">
      <img src="/blog/101/2.png" alt="设置自定义环境变量"/>
      <figcaption><p>设置自定义环境变量</p></figcaption>
    </a>
    
  </figure>

创建一个Class，名为Global，新建一个数据 <code>AccessToken</code> 。用来存储获取的 <code>access_token</code> ：



  <figure>
    <a href="/blog/101/3.png" target="_blank">
      <img src="/blog/101/3.png" alt="存储access_token"/>
      <figcaption><p>存储access_token</p></figcaption>
    </a>
    
  </figure>

创建云函数getAccessToken用来获取 <code>access_token</code> 并把获取的 <code>access_token</code> 存储在 <code>AccessToken</code> 里面;以下是获取 <code>access_token</code> 的云函数代码实现:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">https</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;https&#39;</span>);
<span style="color:#a6e22e">AV</span>.<span style="color:#a6e22e">Cloud</span>.<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;getAccessToken&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">request</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">APPID</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;&amp;secret=&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">APPSECRET</span>;

  <span style="color:#a6e22e">https</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">url</span>, (<span style="color:#a6e22e">res</span>) =&gt; {
    <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">statusCode</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contentType</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">headers</span>[<span style="color:#e6db74">&#39;content-type&#39;</span>];

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">error</span>;
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">statusCode</span> <span style="color:#f92672">!==</span> <span style="color:#ae81ff">200</span>) {
      <span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#39;请求失败。\n&#39;</span> <span style="color:#f92672">+</span>
        <span style="color:#e6db74">&#39;状态码: ${statusCode}&#39;</span>);
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#e6db74">/^application\/json/</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">contentType</span>)) {
      <span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#39;无效的 content-type.\n&#39;</span> <span style="color:#f92672">+</span>
        <span style="color:#e6db74">&#39;期望 application/json 但获取的是 ${contentType}&#39;</span>);
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">error</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">error</span>.<span style="color:#a6e22e">message</span>);
      <span style="color:#75715e">// 消耗响应数据以释放内存
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">resume</span>();
      <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">setEncoding</span>(<span style="color:#e6db74">&#39;utf8&#39;</span>);
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rawData</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;data&#39;</span>, (<span style="color:#a6e22e">chunk</span>) =&gt; { <span style="color:#a6e22e">rawData</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">chunk</span>; });
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;end&#39;</span>, () =&gt; {
      <span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">parsedData</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">rawData</span>);
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">parsedData</span>);
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">AV</span>.Object.<span style="color:#a6e22e">createWithoutData</span>(<span style="color:#e6db74">&#39;Global&#39;</span>, <span style="color:#e6db74">&#39;5957121e128fe100582b6461&#39;</span>);
        <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">fetch</span>().<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span>(){
          <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;value&#39;</span>, <span style="color:#a6e22e">rawData</span>);
          <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">save</span>();
        }, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">e</span>) {
          <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span>);
        });
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
          <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span>);
        }
    });
  }).<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;error&#39;</span>, (<span style="color:#a6e22e">e</span>) =&gt; {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">`错误: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
  });
})
</code></pre></div><p>PS： 要使该云函数生效请使用命令 <code>lean deploy</code> 进行部署。</p>
<h2 id="设置定时器定时更新-access_token">设置定时器定时更新 <code>access_token</code></h2>
<p>我们获取的 <code>access_token</code> 是有时间限制的，所以我们需要设置一个定时器定时更新 <code>access_token</code> (创建定时器可以参考《<a href="https://leancloud.cn/docs/leanengine_cloudfunction_guide-node.html#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1">定时任务</a>》)，成功后如下：</p>



  <figure>
    <a href="/blog/101/4.png" target="_blank">
      <img src="/blog/101/4.png" alt="定时器"/>
      <figcaption><p>定时器</p></figcaption>
    </a>
    
  </figure>

<p>PS: Cron表达式看不懂的直接用(在线Cron表达式生成器)[http://cron.qqe2.com/]进行生成就好，我这个定时器是2个小时获取一次<code>access_token</code></p>
<h2 id="发送模板消息">发送模板消息</h2>
<h3 id="创建云函数postnotification">创建云函数postNotification</h3>
<p>首先创建一个云函数对微信小程序发送过来的数据进行处理然后再发给微信服务器，代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">requestjson</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;request-json&#39;</span>);
<span style="color:#a6e22e">AV</span>.<span style="color:#a6e22e">Cloud</span>.<span style="color:#a6e22e">define</span>(<span style="color:#e6db74">&#39;postNotification&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">request</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">params</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">params</span>
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">request</span>.<span style="color:#a6e22e">currentUser</span>;
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">user</span>) {
    <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;error&#39;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;用户未登录&#39;</span>};
  }
  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">authData</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;authData&#39;</span>);
  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">authData</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">authData</span>.<span style="color:#a6e22e">lc_weapp</span>) {
    <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;error&#39;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;当前用户不是小程序用户&#39;</span>};
  }
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">params</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
    <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;error&#39;</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;no params&#39;</span>};
  }<span style="color:#66d9ef">else</span>{
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">contents</span> <span style="color:#f92672">=</span> {
      <span style="color:#e6db74">&#34;touser&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">authData</span>.<span style="color:#a6e22e">lc_weapp</span>.<span style="color:#a6e22e">openid</span>,  
      <span style="color:#e6db74">&#34;template_id&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">template_id</span>,         
      <span style="color:#e6db74">&#34;form_id&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">form_id</span>,
      <span style="color:#e6db74">&#34;page&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">page</span>,
      <span style="color:#e6db74">&#34;data&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">data</span>,
      <span style="color:#e6db74">&#34;emphasis_keyword&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">emphasis_keyword</span>
    };
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">contents</span>)
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">AV</span>.Object.<span style="color:#a6e22e">createWithoutData</span>(<span style="color:#e6db74">&#39;Global&#39;</span>, <span style="color:#e6db74">&#39;5957121e128fe100582b6461&#39;</span>);
    <span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">fetch</span>().<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span>(){

      <span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">token</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;value&#39;</span>))
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/cgi-bin/message/wxopen/template/send?access_token=&#34;</span>;
        <span style="color:#a6e22e">url</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">access_token</span>;
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">client</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">requestjson</span>.<span style="color:#a6e22e">createClient</span>(<span style="color:#e6db74">&#39;https://api.weixin.qq.com&#39;</span>);

        <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">post</span>(<span style="color:#a6e22e">url</span>, <span style="color:#a6e22e">contents</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">body</span>) {
          <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">statusCode</span>,<span style="color:#a6e22e">body</span>);
        });

      } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span>);
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span>;
      }

    }, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">error</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">error</span>.<span style="color:#a6e22e">message</span>);
      <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">error</span>.<span style="color:#a6e22e">message</span>;
    });
    };

});
</code></pre></div><h3 id="在微信小程序上调用云函数postnotification">在微信小程序上调用云函数postNotification</h3>
<p>按照官方文档做好相应界面后，在表单提交事件formSubmit里做以下处理即可，以下是代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">formSubmit</span>(<span style="color:#a6e22e">event</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">detail</span>.<span style="color:#a6e22e">value</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">formId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">detail</span>.<span style="color:#a6e22e">formId</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">that</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">paramsJson</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">template_id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;9ggg9If6Edsk-xjKw1ek6Nd2XUwMrWKXevYB5QLgRIM&#39;</span>,
    <span style="color:#a6e22e">form_id</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">formId</span>,
    <span style="color:#a6e22e">page</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;keyword1&#34;</span><span style="color:#f92672">:</span> {<span style="color:#75715e">//用户名
</span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;value&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">globalData</span>.<span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">userInfo</span>.<span style="color:#a6e22e">nickName</span>,
        <span style="color:#e6db74">&#34;color&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#173177&#34;</span>
      },
      <span style="color:#e6db74">&#34;keyword2&#34;</span><span style="color:#f92672">:</span> {<span style="color:#75715e">//手机号
</span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;value&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">phone</span>,
        <span style="color:#e6db74">&#34;color&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#173177&#34;</span>
      },
      <span style="color:#e6db74">&#34;keyword3&#34;</span><span style="color:#f92672">:</span> {
        <span style="color:#e6db74">&#34;value&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;绑定手机号成功&#34;</span>,
        <span style="color:#e6db74">&#34;color&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#173177&#34;</span>
      },
      <span style="color:#e6db74">&#34;keyword4&#34;</span><span style="color:#f92672">:</span> {<span style="color:#75715e">//绑定时间
</span><span style="color:#75715e"></span>        <span style="color:#e6db74">&#34;value&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> Date().<span style="color:#a6e22e">toLocaleString</span>(),
        <span style="color:#e6db74">&#34;color&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;#173177&#34;</span>
      }
    },
    <span style="color:#a6e22e">emphasis_keyword</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>
  };
  <span style="color:#a6e22e">AV</span>.<span style="color:#a6e22e">Cloud</span>.<span style="color:#a6e22e">run</span>(<span style="color:#e6db74">&#39;postNotification&#39;</span>, <span style="color:#a6e22e">paramsJson</span>).<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">data</span>) {
    <span style="color:#75715e">// 调用成功，得到成功的应答 data
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">data</span>)
  }, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">err</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">err</span>)
  });
},
</code></pre></div><h2 id="后记">后记</h2>
<p>目前的代码只实现了当你在小程序里点击表单提交按键后，相应微信号立刻收到服务通知，下一篇将会讲述规定时间发送模板消息~</p>
<h2 id="源码">源码</h2>
<p><a href="https://github.com/smk17/FightTravel">FightTravel小程序</a></p>
<p><a href="https://github.com/sengmitnick/FightTravel">FightTravel后端</a></p>
<h2 id="参考">参考</h2>
<p><a href="http://yijiebuyi.com/blog/8221eb14c8482e7efd1868946e99ea7c.html">node.js post json格式数据到服务器的几种方法</a></p>]]></content>
        </item>
        
        <item>
            <title>通过leancloud创建hexo博客并具备后台管理功能</title>
            <link>https://sengmitnick.com/blog/102/</link>
            <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/102/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;leancloud的云引擎 &lt;code&gt;LeanEngine&lt;/code&gt; 可以部署网站，那么通过LeanEngine当然也可以部署hexo了，况且有hexo-admin插件，可以在部署完成后通过后台进行管理，完全适合不会使用命令行的人使用了~&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>leancloud的云引擎 <code>LeanEngine</code> 可以部署网站，那么通过LeanEngine当然也可以部署hexo了，况且有hexo-admin插件，可以在部署完成后通过后台进行管理，完全适合不会使用命令行的人使用了~</p>
</blockquote>
<p>更新：为防止重新部署导致在线上写的文件丢失，添加hexo-qiniu-sync插件，每次插件文件自动更新到七牛云存储</p>
<h2 id="初始化hexo">初始化hexo</h2>
<p>通过终端初始化hexo</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd hexo
npm install --save hexo-admin
hexo server -d
open http://localhost:4000/admin/
</code></pre></div><h2 id="初始化leanengine">初始化LeanEngine</h2>
<p>通过终端初始化LeanEngine,关联到你在(leancloud)[https://leancloud.cn]控制台新建的用来部署hexo的应用（我的就是smk17）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">lean switch
</code></pre></div><h2 id="配置packagejson">配置package.json</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">{
  <span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;hexo-site&#34;</span>,
  <span style="color:#e6db74">&#34;version&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;1.0.0&#34;</span>,
  <span style="color:#e6db74">&#34;private&#34;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
  <span style="color:#e6db74">&#34;main&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;server.js&#34;</span>,
  <span style="color:#e6db74">&#34;hexo&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;version&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;3.3.7&#34;</span>
  },
  <span style="color:#e6db74">&#34;scripts&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;start&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;node server.js&#34;</span>
  },
  <span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;hexo&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^3.2.0&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-admin&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^2.2.1&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-algolia&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^1.1.0&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-archive&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.1.4&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-category&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.1.3&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-index&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.2.0&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-search&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^2.1.1&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-searchdb&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^1.0.7&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-generator-tag&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.2.0&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-qiniu-sync&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^1.4.7&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-renderer-ejs&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.2.0&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-renderer-marked&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.2.10&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-renderer-stylus&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.3.1&#34;</span>,
    <span style="color:#e6db74">&#34;hexo-server&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^0.2.0&#34;</span>,
    <span style="color:#e6db74">&#34;leanengine&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^2.0.4&#34;</span>
  },
  <span style="color:#e6db74">&#34;engines&#34;</span><span style="color:#f92672">:</span> {
    <span style="color:#e6db74">&#34;node&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;6.x&#34;</span>
  }
}
</code></pre></div><h2 id="创建serverjs文件">创建server.js文件</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">AV</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;leanengine&#39;</span>);
<span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">exec</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;child_process&#39;</span>);

<span style="color:#a6e22e">AV</span>.<span style="color:#a6e22e">init</span>({
  <span style="color:#a6e22e">appId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LEANCLOUD_APP_ID</span>,
  <span style="color:#a6e22e">appKey</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LEANCLOUD_APP_KEY</span>,
  <span style="color:#a6e22e">masterKey</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LEANCLOUD_APP_MASTER_KEY</span>
});

<span style="color:#75715e">// 端口一定要从环境变量 `LEANCLOUD_APP_PORT` 中获取。
</span><span style="color:#75715e">// LeanEngine 运行时会分配端口并赋值到该变量。
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">port</span> <span style="color:#f92672">=</span> parseInt(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">LEANCLOUD_APP_PORT</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">PORT</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">3000</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cli</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;hexo server -p &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">port</span>;
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">cli</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">qiniu</span> <span style="color:#f92672">=</span> {
	<span style="color:#e6db74">&#34;access_key&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">AccessKey</span>,
  <span style="color:#e6db74">&#34;secret_key&#34;</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">SecretKey</span>
}
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">exec_qiniu</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;echo &#39;&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">qiniu</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;&#39; 1&gt;qn.json &#34;</span>
<span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">exec_qiniu</span>, (<span style="color:#a6e22e">error</span>, <span style="color:#a6e22e">stdout</span>, <span style="color:#a6e22e">stderr</span>) =&gt; {
  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">error</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">`exec error: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">error</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
    <span style="color:#66d9ef">return</span>;
  }
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`stdout: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">stdout</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`stderr: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">stderr</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
  <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">cli</span>, (<span style="color:#a6e22e">error</span>, <span style="color:#a6e22e">stdout</span>, <span style="color:#a6e22e">stderr</span>) =&gt; {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">error</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">`exec error: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">error</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
      <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`stdout: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">stdout</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`stderr: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">stderr</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
  });
});
</code></pre></div><h2 id="设置自定义环境变量">设置自定义环境变量</h2>
<p>AccessKey和SecretKey从你的七牛那里获取



  <figure>
    <a href="/blog/102/1.png" target="_blank">
      <img src="/blog/102/1.png" alt="设置自定义环境变量"/>
      <figcaption><p>设置自定义环境变量</p></figcaption>
    </a>
    
  </figure>
</p>
<p>PS: 目前发现hexo-qiniu-sync插件没起到相应作用，需研究下如何在hexo下部署云函数并创建定时器时刻更新~</p>
<p><strong>&mdash;END</strong></p>]]></content>
        </item>
        
        <item>
            <title>微信小程序--简易顶部Toast</title>
            <link>https://sengmitnick.com/blog/100/</link>
            <pubDate>Fri, 30 Jun 2017 11:05:23 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/100/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;目前微信小程序官方的交互反馈API的提示框什么的都达不到我想要的简易效果，就自己简单写了一个。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>目前微信小程序官方的交互反馈API的提示框什么的都达不到我想要的简易效果，就自己简单写了一个。</p>
</blockquote>
<p>demo地址：<a href="https://github.com/smk17/wxToast">https://github.com/smk17/wxToast</a></p>
<h2 id="效果图">效果图</h2>



  <figure>
    <a href="/blog/100/100.gif" target="_blank">
      <img src="/blog/100/100.gif" alt="demo"/>
      <figcaption><p>demo</p></figcaption>
    </a>
    
  </figure>

<h2 id="添加样式">添加样式</h2>
<p>在app.wxss添加我们要自定义的toast样式</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">#toast{  
	<span style="color:#66d9ef">position</span>: <span style="color:#66d9ef">fixed</span>;  
	<span style="color:#66d9ef">top</span>: <span style="color:#ae81ff">0</span>;  
	<span style="color:#66d9ef">left</span>: <span style="color:#ae81ff">0</span>;  
	<span style="color:#66d9ef">width</span>: <span style="color:#ae81ff">90</span><span style="color:#66d9ef">%</span>;
	<span style="color:#66d9ef">background-color</span>: <span style="color:#ae81ff">#B1BCCF</span>;  
	<span style="color:#66d9ef">padding</span>: <span style="color:#ae81ff">20</span>rpx <span style="color:#ae81ff">5</span><span style="color:#66d9ef">%</span>;  
	<span style="color:#66d9ef">text-align</span>:<span style="color:#66d9ef">center</span>;  
	<span style="color:#66d9ef">opacity</span>: <span style="color:#ae81ff">0.7</span>; 
	<span style="color:#66d9ef">transition</span>: <span style="color:#66d9ef">opacity</span> <span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">s</span> <span style="color:#66d9ef">ease</span><span style="color:#f92672">-</span>out;  
}
</code></pre></div><h2 id="添加view">添加View</h2>
<p>在需要toast的wxml文件添加id为toast的view标签</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">view</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;toast&#34;</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;opacity: {{opacity}};&#34;</span>&gt;{{message}}&lt;/<span style="color:#f92672">view</span>&gt;
</code></pre></div><h2 id="添加事件">添加事件</h2>
<p>在wxml文件对应的js文件里面添加对应的事件并设置默认数据</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
  <span style="color:#a6e22e">opacity</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
  <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>
},
<span style="color:#75715e">/**
</span><span style="color:#75715e">  * 显示Toast
</span><span style="color:#75715e">  * message， 显示你要提示的内容
</span><span style="color:#75715e"> **/</span>
<span style="color:#a6e22e">drawToast</span>(<span style="color:#a6e22e">message</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">that</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setData</span>({
    <span style="color:#a6e22e">opacity</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0.7</span>,
    <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">message</span>,
  })
  <span style="color:#a6e22e">setTimeout</span>(<span style="color:#66d9ef">function</span>(){
    <span style="color:#a6e22e">that</span>.<span style="color:#a6e22e">setData</span>({
      <span style="color:#a6e22e">opacity</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
    })
  },<span style="color:#ae81ff">1000</span>)
},
</code></pre></div><h2 id="总结">总结</h2>
<p>其实这就是一个简单的Toast提示~~~</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Hostker&#43;Hexo&#43;TravisCI构建自动化博客</title>
            <link>https://sengmitnick.com/blog/99/</link>
            <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/99/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;本博客是放在Hostker服务器的（国内访问GitHub的速度实在不敢恭维），Hostker的应用只支持git和ftp，而且他的git有点怪，每次都要clone然后再push上去才不会出现奇怪的东西，所以是用不了Hexo deploy了，所以想到 push 后通过 &lt;a href=&#34;https://travis-ci.org/&#34;&gt;travis-ci&lt;/a&gt; 来自动git到Hostker上面，接下来就开工了…&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>本博客是放在Hostker服务器的（国内访问GitHub的速度实在不敢恭维），Hostker的应用只支持git和ftp，而且他的git有点怪，每次都要clone然后再push上去才不会出现奇怪的东西，所以是用不了Hexo deploy了，所以想到 push 后通过 <a href="https://travis-ci.org/">travis-ci</a> 来自动git到Hostker上面，接下来就开工了…</p>
</blockquote>
<h1 id="hostker">Hostker</h1>
<p>​	Hostker是<a href="https://www.90.cx/">九零创新实验室</a>做的服务器，我2012在他们弄了Hostker就开始用了，历经这么多年现在貌似只能是老用户可以用了，反正现在我是找不到注册入口了&hellip;</p>
<p>​	所以如果你是Hostker的老用户也可以接下去看&hellip;</p>
<p>​	在 <code>我的应用列表</code> 新建应用，成功后如下：



  <figure>
    <a href="/blog/99/1.png" target="_blank">
      <img src="/blog/99/1.png" alt="应用详细资料"/>
      <figcaption><p>应用详细资料</p></figcaption>
    </a>
    
  </figure>
</p>
<h1 id="travis-ci">Travis CI</h1>
<p>​	使用 github 帐号登录 <a href="https://travis-ci.org/">https://travis-ci.org/</a>, 将博客项目（<strong>你的博客.github.io</strong>）开启，然后在项目下新建<code>.travis.yml</code> 配置文件，当 push 时 travis 自动读取这个配置文件来完成 hexo 的 generate 和 Push到Hostker应用上面，但是在Travis下不能输入任何字符，所以我们需要在Git地址的 <code>URL</code> 中包含用户名和密码，不过我们不可能把Git地址的 <code>URL</code> 直接放在<code>.travis.yml</code> 配置文件里面，那样任何人都可以有权限往你的Hostker应用提交代码，这是不安全的。</p>
<p>​	不过我们可以在Travis下对应我们博客项目的setting界面设置对应的Environment Variables，然后在<code>.travis.yml</code> 配置文件使用该参数，那别人就看不到了。</p>



  <figure>
    <a href="/blog/99/2.png" target="_blank">
      <img src="/blog/99/2.png" alt="Travis Setting界面"/>
      <figcaption><p>Travis Setting界面</p></figcaption>
    </a>
    
  </figure>

<p>完整的.travis.yml 配置:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-YAML" data-lang="YAML"><span style="color:#f92672">language</span>: <span style="color:#ae81ff">node_js</span>
<span style="color:#f92672">node_js</span>: <span style="color:#ae81ff">stable</span>
<span style="color:#f92672">before_install</span>:
- <span style="color:#ae81ff">git config --global user.name &#34;sengmitnick&#34;</span>
- <span style="color:#ae81ff">git config --global user.email &#34;sengmitnick@163.com&#34;</span>
<span style="color:#f92672">install</span>:
- <span style="color:#ae81ff">npm install hexo -g</span>
- <span style="color:#ae81ff">npm install hexo-deployer-git --save</span>
- <span style="color:#ae81ff">npm install</span>
<span style="color:#f92672">script</span>:
- <span style="color:#ae81ff">hexo clean</span>
- <span style="color:#ae81ff">git clone ${GH_REF} public</span>
- <span style="color:#ae81ff">cd ./public</span>
- <span style="color:#ae81ff">rm -fr !(.git)</span>
- <span style="color:#ae81ff">cd ../</span>
- <span style="color:#ae81ff">hexo g</span>
<span style="color:#f92672">after_script</span>:
- <span style="color:#ae81ff">cd ./public</span>
- <span style="color:#ae81ff">git add --all .</span>
- <span style="color:#ae81ff">git commit -m &#34;updata website&#34;</span>
- <span style="color:#ae81ff">git push -u origin master</span>
<span style="color:#f92672">branches</span>:
  <span style="color:#f92672">only</span>:
  - <span style="color:#ae81ff">blog-source</span>
</code></pre></div><h1 id="参考">参考</h1>
<p><a href="https://uedsky.com/2016-06/travis-deploy/">Hexo 博客 travis-ci 自动部署到VPS</a></p>
<p><a href="http://blog.csdn.net/u012373815/article/details/53574002">hexo＋Travis-ci＋github构建自动化博客</a></p>
<p><a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/">用 Travis CI 自動部署網站到 GitHub</a></p>
<p><strong>&mdash;END</strong></p>]]></content>
        </item>
        
        <item>
            <title>微信小程序--蓝牙通讯</title>
            <link>https://sengmitnick.com/blog/98/</link>
            <pubDate>Fri, 09 Jun 2017 17:22:47 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/98/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;微信小程序可以使用蓝牙进行通讯啦~
在这里记录下使用微信小程序开发我司的小程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;体验&#34;&gt;体验&lt;/h2&gt;
&lt;p&gt;基于微信小程序&amp;ndash;蓝牙通讯的小程序-&amp;gt;cdm21智能家居已发布，可扫一扫下面小程序码进行体验&lt;/p&gt;



  &lt;figure&gt;
    &lt;a href=&#34;https://sengmitnick.com/blog/98/98.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://sengmitnick.com/blog/98/98.jpg&#34; alt=&#34;cdm21智能家居&#34;/&gt;
      &lt;figcaption&gt;&lt;p&gt;cdm21智能家居&lt;/p&gt;&lt;/figcaption&gt;
    &lt;/a&gt;
    
  &lt;/figure&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>微信小程序可以使用蓝牙进行通讯啦~
在这里记录下使用微信小程序开发我司的小程序</p>
</blockquote>
<h2 id="体验">体验</h2>
<p>基于微信小程序&ndash;蓝牙通讯的小程序-&gt;cdm21智能家居已发布，可扫一扫下面小程序码进行体验</p>



  <figure>
    <a href="/blog/98/98.jpg" target="_blank">
      <img src="/blog/98/98.jpg" alt="cdm21智能家居"/>
      <figcaption><p>cdm21智能家居</p></figcaption>
    </a>
    
  </figure>

<h2 id="源码">源码</h2>
<p>点击<a href="https://github.com/smk17/cdm21Smart">这里</a>查看源码</p>
<h2 id="硬件设备">硬件设备</h2>
<p>该小程序使用的蓝牙模块是<a href="https://item.taobao.com/item.htm?spm=1002.81.5.1.MQqNI0&amp;id=36426439097&amp;item_id=36426439097">汇承HC-08蓝牙模块4.0</a>,配置里除了改了名字其它不变。</p>
<h2 id="搜索蓝牙设备">搜索蓝牙设备</h2>
<p>根据<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/bluetooth.html">微信小程序官方API</a>编程，搜索蓝牙设备选择并连接对应设备：（该代码段位于add_device.js的scan函数）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//开始搜寻附近的蓝牙外围设备
</span><span style="color:#75715e"></span><span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">startBluetoothDevicesDiscovery</span>({
  <span style="color:#75715e">//services: [&#39;cd21&#39;],
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">res</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">res</span>)
    <span style="color:#a6e22e">that</span>.<span style="color:#a6e22e">setData</span>({
      <span style="color:#a6e22e">discovering</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
    })
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">errMsg</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;startBluetoothDevicesDiscovery:ok&#34;</span>) {
      <span style="color:#75715e">//监听寻找到新设备的事件
</span><span style="color:#75715e"></span>      <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">onBluetoothDeviceFound</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">devices</span>) {
        <span style="color:#75715e">//console.dir(devices)
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">list</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">that</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">list</span>
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">deviceList</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">getStorageSync</span>(<span style="color:#e6db74">&#39;deviceList&#39;</span>) <span style="color:#f92672">||</span> []
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">devices</span>.<span style="color:#a6e22e">name</span>.<span style="color:#a6e22e">search</span>(<span style="color:#e6db74">/CDM21/</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
          <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">devices</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;:&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">devices</span>.<span style="color:#a6e22e">deviceId</span>)
          <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">isnotexist</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
          <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">deviceList</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">devices</span>.<span style="color:#a6e22e">deviceId</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">deviceList</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">deviceId</span>) {
              <span style="color:#a6e22e">isnotexist</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
              <span style="color:#66d9ef">break</span>;
            }
          }
          <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">isnotexist</span>)
            <span style="color:#a6e22e">list</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">devices</span>)
        }
        <span style="color:#a6e22e">that</span>.<span style="color:#a6e22e">setData</span>({
          <span style="color:#a6e22e">list</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">list</span>
        })
      })
    }
  }
})
</code></pre></div><h2 id="连接设备并通讯">连接设备并通讯</h2>
<p>PS: 在小程序端接受到蓝牙设备的数据类型为ArrayBuffer类型，在小程序IDE打印显示为ArrayBuffer，显示不出具体数据，需要使用以下函数转成字符串(当初还一直以为没有接受到数据呢~~)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">/**
</span><span style="color:#75715e">* 把ArrayBuffer类型的数据转换成字符串
</span><span style="color:#75715e">*/</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">buf2string</span> (<span style="color:#a6e22e">buffer</span>) { <span style="color:#75715e">// buffer is an ArrayBuffer
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> Array.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">call</span>(<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Uint8Array</span>(<span style="color:#a6e22e">buffer</span>), <span style="color:#a6e22e">x</span> =&gt; <span style="color:#a6e22e">x</span>);
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#a6e22e">str</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>]);
  };
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">str</span>;
};
</code></pre></div><p>蓝牙设备接受数据只需知道通讯特征值并启用通知，然后调用 <code>wx.onBLECharacteristicValueChange</code> 函数启用低功耗蓝牙设备特征值变化时的 <code>notify</code> 功能，当接受到蓝牙设备发送过来的数据就会调用该函数了。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * 连接对应的蓝牙设备并获取所有service服务和characteristic特征值
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initConnection</span>(<span style="color:#a6e22e">deviceId</span>, <span style="color:#a6e22e">failcb</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>) {
  <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">createBLEConnection</span>({
    <span style="color:#a6e22e">deviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">deviceId</span>,
    <span style="color:#a6e22e">fail</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">res</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;连接蓝牙sb&#39;</span>, <span style="color:#a6e22e">res</span>);
      <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">failcb</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;function&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">failcb</span>(<span style="color:#a6e22e">res</span>)
    },
    <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">res</span>) {
      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;连接蓝牙&#39;</span>, <span style="color:#a6e22e">res</span>);
      <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">getBLEDeviceServices</span>({
        <span style="color:#a6e22e">deviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">deviceId</span>,
        <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">service</span>) {
          <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;获取蓝牙所有service服务&#39;</span>, <span style="color:#a6e22e">service</span>);
          <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">services</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">service</span>.<span style="color:#a6e22e">services</span>;
          <span style="color:#a6e22e">services</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) {
            <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">getBLEDeviceCharacteristics</span>({
              <span style="color:#a6e22e">deviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">deviceId</span>,
              <span style="color:#a6e22e">serviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">uuid</span>,
              <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">characteristics</span>) {
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">index</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;-获取蓝牙characteristic特征值&#39;</span>, <span style="color:#a6e22e">characteristics</span>);
                <span style="color:#a6e22e">array</span>[<span style="color:#a6e22e">index</span>].<span style="color:#a6e22e">characteristics</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">characteristics</span>.<span style="color:#a6e22e">characteristics</span>;
                <span style="color:#a6e22e">services</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">services</span>;
                <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">==</span> (<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) {
                  <span style="color:#a6e22e">select_characteristics</span>(<span style="color:#a6e22e">deviceId</span>, <span style="color:#a6e22e">services</span>);
                };
              },
            });
          });
        },
      });
    },
  });
};

<span style="color:#75715e">/**
</span><span style="color:#75715e"> * 寻找需要的通讯特征值并启用通知
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">select_characteristics</span>(<span style="color:#a6e22e">deviceId</span>, <span style="color:#a6e22e">services</span>) {
  <span style="color:#a6e22e">services</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">value</span>, <span style="color:#a6e22e">index</span>, <span style="color:#a6e22e">array</span>) {
    <span style="color:#a6e22e">array</span>[<span style="color:#a6e22e">index</span>].<span style="color:#a6e22e">characteristics</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">values</span>, <span style="color:#a6e22e">indexs</span>, <span style="color:#a6e22e">arrays</span>) {
      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">values</span>.<span style="color:#a6e22e">uuid</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">characteristicId</span>) {
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;找到通讯特征值&#39;</span>, <span style="color:#a6e22e">values</span>);
        <span style="color:#a6e22e">wx</span>.<span style="color:#a6e22e">notifyBLECharacteristicValueChange</span>({
          <span style="color:#a6e22e">deviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">deviceId</span>,
          <span style="color:#a6e22e">serviceId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">uuid</span>,
          <span style="color:#a6e22e">characteristicId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">values</span>.<span style="color:#a6e22e">uuid</span>,
          <span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>,
          <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">res</span>) {
            <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;启用notify&#39;</span>, <span style="color:#a6e22e">res</span>);
          },
        });
      };
    });
  });
};
</code></pre></div><h2 id="总结">总结</h2>
<p>微信小程序的蓝牙通讯基本过程就如此了。。。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>hexo本地环境的迁移与备份</title>
            <link>https://sengmitnick.com/blog/97/</link>
            <pubDate>Fri, 09 Jun 2017 15:20:12 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/97/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;这里记录本博客本地环境的迁移过程，有时候系统换了，hexo配置出问题解决不了肿么办？就如同Windows出问题又不知道怎么解决平时都是重装系统一样，重新init一个hexo就好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我推荐使用微软的OneDrive进行对hexo本地环境的时刻备份。。。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>这里记录本博客本地环境的迁移过程，有时候系统换了，hexo配置出问题解决不了肿么办？就如同Windows出问题又不知道怎么解决平时都是重装系统一样，重新init一个hexo就好了。</p>
</blockquote>
<p>这里我推荐使用微软的OneDrive进行对hexo本地环境的时刻备份。。。</p>
<h2 id="初始化">初始化</h2>
<p>首先重新初始化一个新的hexo</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">hexo init blog
cd blog
npm install
</code></pre></div><h2 id="文件迁移">文件迁移</h2>
<p>把原hexo文件夹里的scaffolds、source、themes文件夹和_config.yml配置文件复制到刚刚初始化的blog文件夹下。</p>



  <figure>
    <a href="/blog/97/97.png" target="_blank">
      <img src="/blog/97/97.png" alt="资料迁移"/>
      <figcaption><p>资料迁移</p></figcaption>
    </a>
    
  </figure>

<h2 id="恢复以前安装的插件">恢复以前安装的插件</h2>
<h3 id="文章置顶">文章置顶</h3>
<p>该设置参考给Hexo添加文章置顶功能</p>
<h3 id="无痛使用本地图片">无痛使用本地图片</h3>
<p>首先确认 _config.yml 中有 post_asset_folder:true 。</p>
<p>在 hexo 目录，执行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">npm install https://github.com/CodeFalling/hexo-asset-image --save
</code></pre></div><h3 id="sitemap--rss插件">sitemap &amp; rss插件</h3>
<p>在 hexo 目录，执行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">npm install hexo-generator-feed --save
npm install hexo-generator-sitemap --save
</code></pre></div><h3 id="本地搜索">本地搜索</h3>
<p>在 hexo 目录，执行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">npm install hexo-generator-search --save
</code></pre></div><p>至此，完成。</p>]]></content>
        </item>
        
        <item>
            <title>微信小程序--切换城市demo</title>
            <link>https://sengmitnick.com/blog/96/</link>
            <pubDate>Sat, 21 Jan 2017 14:25:51 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/96/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;城市切换是大多数app的必备功能，下面是一个基于微信小程序开发的demo。该demo继承于&lt;a href=&#34;http://www.wxapp-union.com/thread-1644-1-1.html&#34;&gt;微信小程序实用组件：城市切换&lt;/a&gt;，更换了里面内置的数据源（因为使用后发现好几个城市没有，居然连上海都没有也是醉了），添加搜索功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载源码&#34;&gt;下载源码&lt;/h2&gt;
&lt;p&gt;本文章示例可以通过以下命令下载：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>城市切换是大多数app的必备功能，下面是一个基于微信小程序开发的demo。该demo继承于<a href="http://www.wxapp-union.com/thread-1644-1-1.html">微信小程序实用组件：城市切换</a>，更换了里面内置的数据源（因为使用后发现好几个城市没有，居然连上海都没有也是醉了），添加搜索功能。</p>
</blockquote>
<h2 id="下载源码">下载源码</h2>
<p>本文章示例可以通过以下命令下载：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/smk17/switchcity.git
</code></pre></div><p>该源码有两个目录，demo为城市切换组件源码，可直接在微信小程序开发工具中使用，pinyin为用Python写的脚本，要是你们有更好的数据源克自己修改。</p>
<h2 id="更换数据源">更换数据源</h2>
<p>在更换数据源上我用Python写了个脚本把从<a href="https://www.oschina.net/code/snippet_149862_53831">省市区json数据</a>获取的数据进行转化成需要的数据，具体代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python"><span style="color:#75715e">#!/usr/bin/python</span>
<span style="color:#75715e"># -*- coding:utf-8 -*-</span>
<span style="color:#f92672">from</span> pinyin <span style="color:#f92672">import</span> PinYin
<span style="color:#f92672">import</span> json
data <span style="color:#f92672">=</span> [] <span style="color:#75715e"># 省市区json数据,数据量过大就不写这里了，可以看源码</span>
clist <span style="color:#f92672">=</span> []
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
test <span style="color:#f92672">=</span> PinYin()
test<span style="color:#f92672">.</span>load_word()
<span style="color:#66d9ef">for</span> d <span style="color:#f92672">in</span> data:
	city <span style="color:#f92672">=</span> d[<span style="color:#e6db74">&#39;name&#39;</span>]
	<span style="color:#66d9ef">if</span> city <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> [<span style="color:#e6db74">&#39;市辖区&#39;</span>,<span style="color:#e6db74">&#39;郊区&#39;</span>,<span style="color:#e6db74">&#39;县&#39;</span>,<span style="color:#e6db74">&#39;城区&#39;</span>,<span style="color:#e6db74">&#39;矿区&#39;</span>,<span style="color:#e6db74">&#39;自治区直辖县级行政区划&#39;</span>] <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;省&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> city <span style="color:#f92672">and</span> d[<span style="color:#e6db74">&#39;level&#39;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span> :
		<span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;市&#39;</span> <span style="color:#f92672">in</span> city :
			city <span style="color:#f92672">=</span> city<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf8&#39;</span>)[<span style="color:#ae81ff">0</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
			<span style="color:#66d9ef">pass</span>
		<span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#39;特别行政区&#39;</span> <span style="color:#f92672">in</span> city :
			city <span style="color:#f92672">=</span> city<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf8&#39;</span>)[<span style="color:#ae81ff">0</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
			<span style="color:#66d9ef">pass</span>
		<span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#39;自治&#39;</span> <span style="color:#f92672">in</span> city :
			city <span style="color:#f92672">=</span> city<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf8&#39;</span>)[<span style="color:#ae81ff">0</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
			<span style="color:#66d9ef">pass</span>
		<span style="color:#66d9ef">elif</span> <span style="color:#e6db74">&#39;地区&#39;</span> <span style="color:#f92672">in</span> city :
			city <span style="color:#f92672">=</span> city<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf8&#39;</span>)[<span style="color:#ae81ff">0</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf8&#39;</span>)
			<span style="color:#66d9ef">pass</span>
		tmpObj <span style="color:#f92672">=</span> {}
		tmpObj[<span style="color:#e6db74">&#39;id&#39;</span>] <span style="color:#f92672">=</span> str(index)
		tmpObj[<span style="color:#e6db74">&#39;code&#39;</span>] <span style="color:#f92672">=</span> d[<span style="color:#e6db74">&#39;code&#39;</span>]
		tmpObj[<span style="color:#e6db74">&#39;city&#39;</span>] <span style="color:#f92672">=</span> city
		initial <span style="color:#f92672">=</span> test<span style="color:#f92672">.</span>hanzi2pinyin(string<span style="color:#f92672">=</span>d[<span style="color:#e6db74">&#39;name&#39;</span>])
		tmpObj[<span style="color:#e6db74">&#39;initial&#39;</span>] <span style="color:#f92672">=</span> initial[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>upper()[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">1</span>]
		clist<span style="color:#f92672">.</span>append(tmpObj)
		index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
		<span style="color:#66d9ef">pass</span>
	<span style="color:#66d9ef">pass</span>
d1 <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(clist)
<span style="color:#75715e"># d1 = json.loads(d1)</span>
<span style="color:#66d9ef">print</span> d1
</code></pre></div><h2 id="添加搜索功能">添加搜索功能</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span>  <span style="color:#a6e22e">coverString</span>(<span style="color:#a6e22e">subStr</span>,<span style="color:#a6e22e">str</span>){
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">toLowerCase</span>().<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">subStr</span>.<span style="color:#a6e22e">toLowerCase</span>())<span style="color:#f92672">&gt;-</span><span style="color:#ae81ff">1</span>;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">searchPinyin</span>(<span style="color:#a6e22e">city</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tempObj</span><span style="color:#f92672">=</span>[];
	<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">cityObj</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
		<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">citypy</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pinyin</span>.<span style="color:#a6e22e">getFullChars</span>(<span style="color:#a6e22e">cityObj</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">city</span>);
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">citysxpy</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pinyin</span>.<span style="color:#a6e22e">getCamelChars</span>(<span style="color:#a6e22e">cityObj</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">city</span>);
        <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">coverString</span>(<span style="color:#a6e22e">city</span>,<span style="color:#a6e22e">citypy</span>) <span style="color:#f92672">||</span> <span style="color:#a6e22e">coverString</span>(<span style="color:#a6e22e">city</span>,<span style="color:#a6e22e">citysxpy</span>) ) {
            <span style="color:#a6e22e">tempObj</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">cityObj</span>[<span style="color:#a6e22e">i</span>]);
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tempObj</span>;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">searchHanzi</span>(<span style="color:#a6e22e">city</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tempObj</span><span style="color:#f92672">=</span>[];
	<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">cityObj</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">cityObj</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">city</span>.<span style="color:#a6e22e">search</span>(<span style="color:#a6e22e">city</span>) <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ) {
            <span style="color:#a6e22e">tempObj</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">cityObj</span>[<span style="color:#a6e22e">i</span>]);
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">tempObj</span>;
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">searchCity</span>(<span style="color:#a6e22e">city</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">reg</span><span style="color:#f92672">=</span> <span style="color:#e6db74">/^[A-Za-z]+$/</span>;
	<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reg</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">city</span>)) <span style="color:#75715e">//判断是否符合正则表达式
</span><span style="color:#75715e"></span>	{
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">searchPinyin</span>(<span style="color:#a6e22e">city</span>);
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">searchHanzi</span>(<span style="color:#a6e22e">city</span>);
	};
}
</code></pre></div><h2 id="效果图">效果图：</h2>



  <figure>
    <a href="/blog/96/96.gif" target="_blank">
      <img src="/blog/96/96.gif" alt="demo"/>
      <figcaption><p>demo</p></figcaption>
    </a>
    
  </figure>

<h2 id="已知bug">已知bug：</h2>
<p>搜索功能目前对于多音字的处理还不是很好。。。</p>
<h2 id="参考资料">参考资料：</h2>
<p><a href="http://www.wxapp-union.com/thread-1644-1-1.html">微信小程序实用组件：城市切换</a></p>
<p><a href="https://my.oschina.net/tommyfok/blog/202412">汉字转换为拼音的JavaScript库</a></p>
<p><a href="https://github.com/cleverdeng/pinyin.py">汉字转拼音,With Python</a></p>
<p><a href="https://www.oschina.net/code/snippet_149862_53831">省市区json数据</a></p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>ReactNative项目名称修改</title>
            <link>https://sengmitnick.com/blog/95/</link>
            <pubDate>Thu, 05 Jan 2017 09:59:32 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/95/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;react-init 初始化项目耗时太长，可以在已经初始化完成的项目基础上复制一份进行修改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先初始化一个项目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;react-native init AwesomeProject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化完成的项目为 &lt;strong&gt;AwesomeProject&lt;/strong&gt; 将之修改为 &lt;strong&gt;FightTravel&lt;/strong&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>react-init 初始化项目耗时太长，可以在已经初始化完成的项目基础上复制一份进行修改。</p>
</blockquote>
<p>首先初始化一个项目</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">react-native init AwesomeProject
</code></pre></div><p>初始化完成的项目为 <strong>AwesomeProject</strong> 将之修改为 <strong>FightTravel</strong></p>
<h2 id="reactnative部分">ReactNative部分</h2>
<p>修改项目根目录下package.json、index.android.js和index.ios.js文件，把项目名 <strong>AwesomeProject</strong> 改为 <strong>FightTravel</strong>，修改后截图如下：</p>
<p>


  <figure>
    <a href="/blog/95/2.png" target="_blank">
      <img src="/blog/95/2.png" alt="package.json"/>
      <figcaption><p>package.json</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/3.png" target="_blank">
      <img src="/blog/95/3.png" alt="index.ios.js"/>
      <figcaption><p>index.ios.js</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/4.png" target="_blank">
      <img src="/blog/95/4.png" alt="index.android.js"/>
      <figcaption><p>index.android.js</p></figcaption>
    </a>
    
  </figure>
</p>
<h2 id="android部分">android部分</h2>
<p>


  <figure>
    <a href="/blog/95/1.png" target="_blank">
      <img src="/blog/95/1.png" alt="android项目结构"/>
      <figcaption><p>android项目结构</p></figcaption>
    </a>
    
  </figure>

以上为 <strong>AwesomeProject</strong> 中 <strong>android</strong> 部分的项目结构，需要修改的文件为 build.gradle ,AndroidManifest.xml,string.xml,MainActivity.java,MainApplication.java
，需要重命名 <strong>awesomeproject</strong> 文件夹为 <strong>fighttravel</strong>, 修改后截图如下：</p>
<p>


  <figure>
    <a href="/blog/95/5.png" target="_blank">
      <img src="/blog/95/5.png" alt="MainActivity.java"/>
      <figcaption><p>MainActivity.java</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/6.png" target="_blank">
      <img src="/blog/95/6.png" alt="MainApplication.java"/>
      <figcaption><p>MainApplication.java</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/8.png" target="_blank">
      <img src="/blog/95/8.png" alt="string.xml"/>
      <figcaption><p>string.xml</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/9.png" target="_blank">
      <img src="/blog/95/9.png" alt="AndroidManifest.xml"/>
      <figcaption><p>AndroidManifest.xml</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/95/10.png" target="_blank">
      <img src="/blog/95/10.png" alt="build.gradle"/>
      <figcaption><p>build.gradle</p></figcaption>
    </a>
    
  </figure>
</p>



  <figure>
    <a href="/blog/95/7.png" target="_blank">
      <img src="/blog/95/7.png" alt="重命名文件夹"/>
      <figcaption><p>重命名文件夹</p></figcaption>
    </a>
    
  </figure>

<h2 id="ios部分">ios部分</h2>
<ol>
<li>打开项目：</li>
</ol>



  <figure>
    <a href="/blog/95/11.png" target="_blank">
      <img src="/blog/95/11.png" alt="目录结构"/>
      <figcaption><p>目录结构</p></figcaption>
    </a>
    
  </figure>

<p>以上为 <strong>AwesomeProject</strong> 中 <strong>ios</strong> 部分的项目结构。</p>
<ol start="2">
<li>选中项目设置并按下回车，输入新的项目名字：</li>
</ol>



  <figure>
    <a href="/blog/95/12.png" target="_blank">
      <img src="/blog/95/12.png" alt="重命名项目名称"/>
      <figcaption><p>重命名项目名称</p></figcaption>
    </a>
    
  </figure>

<ol start="3">
<li>输入完后按回车，弹出改名前和改名后的文件对名，这时点击“Rename”：</li>
</ol>



  <figure>
    <a href="/blog/95/13.png" target="_blank">
      <img src="/blog/95/13.png" alt="rename"/>
      <figcaption><p>rename</p></figcaption>
    </a>
    
  </figure>

<p>4）这时你会发现，还有很多的“旧”项目名字的文件/文件夹：</p>



  <figure>
    <a href="/blog/95/14.png" target="_blank">
      <img src="/blog/95/14.png" alt="enable"/>
      <figcaption><p>enable</p></figcaption>
    </a>
    
  </figure>

<p>不要紧，继续往下看，一起把这些“旧”名字消灭掉。</p>
<ol start="5">
<li>我们先把这两个文件夹改一下名字：</li>
</ol>
<p>改前：


  <figure>
    <a href="/blog/95/15.png" target="_blank">
      <img src="/blog/95/15.png" alt="改前"/>
      <figcaption><p>改前</p></figcaption>
    </a>
    
  </figure>
</p>
<p>改后：


  <figure>
    <a href="/blog/95/16.png" target="_blank">
      <img src="/blog/95/16.png" alt="改后"/>
      <figcaption><p>改后</p></figcaption>
    </a>
    
  </figure>
</p>
<p>这里的<strong>FightTravelTests</strong>，原先为<strong>AwesomeProjectTests</strong>，我们改名字时需要注意，只需要把旧名字（<strong>AwesomeProject</strong>）替换成新名字（<strong>FightTravel</strong>）即可，不要把其它字符（<strong>Tests</strong>）删除！</p>
<ol start="6">
<li>选中这个类文件，更改类名字时不能直接重命名，需要使用Xcode内置的更改类名功能：</li>
</ol>



  <figure>
    <a href="/blog/95/17.png" target="_blank">
      <img src="/blog/95/17.png" alt="重命名类"/>
      <figcaption><p>重命名类</p></figcaption>
    </a>
    
  </figure>

<p>点击@interface后面的类名：</p>



  <figure>
    <a href="/blog/95/18.png" target="_blank">
      <img src="/blog/95/18.png" alt="interface"/>
      <figcaption><p>interface</p></figcaption>
    </a>
    
  </figure>

<p>按照下图步骤操作（Edit-&gt;Refactor-&gt;Rename）：</p>



  <figure>
    <a href="/blog/95/19.png" target="_blank">
      <img src="/blog/95/19.png" alt="rename"/>
      <figcaption><p>rename</p></figcaption>
    </a>
    
  </figure>

<p>输入新的类名字：</p>



  <figure>
    <a href="/blog/95/20.png" target="_blank">
      <img src="/blog/95/20.png" alt="new类"/>
      <figcaption><p>new类</p></figcaption>
    </a>
    
  </figure>

<p>点击Save：</p>



  <figure>
    <a href="/blog/95/21.png" target="_blank">
      <img src="/blog/95/21.png" alt="save"/>
      <figcaption><p>save</p></figcaption>
    </a>
    
  </figure>

<ol start="7">
<li>我们再次看一下我们的目录结构，已经全部都改过来了:</li>
</ol>



  <figure>
    <a href="/blog/95/22.png" target="_blank">
      <img src="/blog/95/22.png" alt="目录结构"/>
      <figcaption><p>目录结构</p></figcaption>
    </a>
    
  </figure>

<p>8）全局搜索之前的项目名字并替换成新项目名字：</p>



  <figure>
    <a href="/blog/95/23.png" target="_blank">
      <img src="/blog/95/23.png" alt="搜索"/>
      <figcaption><p>搜索</p></figcaption>
    </a>
    
  </figure>

<p>9）全局搜索旧项目名字出来的界面，我们点击进去更改名字：</p>
<p>点击之后会自动跳转到这个界面，双击值进行更改（下面改名的步骤也一样）：</p>



  <figure>
    <a href="/blog/95/24.png" target="_blank">
      <img src="/blog/95/24.png" alt="更改名字"/>
      <figcaption><p>更改名字</p></figcaption>
    </a>
    
  </figure>

<p>更改完之后，还得再改一些东西。</p>
<p>注意：继续全局搜索替换，直到全局搜索不到旧名字为止！</p>
<p>10）打开项目文件夹，继续更名：</p>



  <figure>
    <a href="/blog/95/25.png" target="_blank">
      <img src="/blog/95/25.png" alt="更名前"/>
      <figcaption><p>更名前</p></figcaption>
    </a>
    
  </figure>

<p>更名后：</p>



  <figure>
    <a href="/blog/95/26.png" target="_blank">
      <img src="/blog/95/26.png" alt="更名后"/>
      <figcaption><p>更名后</p></figcaption>
    </a>
    
  </figure>

<p>回到项目看一下，文件全发“红”了。不要紧，正常的：</p>



  <figure>
    <a href="/blog/95/27.png" target="_blank">
      <img src="/blog/95/27.png" alt="红"/>
      <figcaption><p>红</p></figcaption>
    </a>
    
  </figure>

<p>11）更改相对应文件夹的资源文件夹路径：</p>
<p>11.1）选中FightTravel文件夹：</p>



  <figure>
    <a href="/blog/95/28.png" target="_blank">
      <img src="/blog/95/28.png" alt="FightTravel"/>
      <figcaption><p>FightTravel</p></figcaption>
    </a>
    
  </figure>

<p>11.2）点击文件夹小图标，更改路径：</p>



  <figure>
    <a href="/blog/95/29.png" target="_blank">
      <img src="/blog/95/29.png" alt="更改路径"/>
      <figcaption><p>更改路径</p></figcaption>
    </a>
    
  </figure>

<p>找到刚才改好名字的文件夹，点击choose。下个文件夹（testTests）步骤重复以上的。</p>
<p>PS：如果文件夹路径更改了，里面的文件还是红色需每个文件更改路径。</p>
<ol start="12">
<li>修改Schemes:</li>
</ol>
<p>到了上面一步基本就完成了，但是，如果不直接在Xcode调试运行而是在命令行则会出现以下错误：</p>



  <figure>
    <a href="/blog/95/31.png" target="_blank">
      <img src="/blog/95/31.png" alt="err"/>
      <figcaption><p>err</p></figcaption>
    </a>
    
  </figure>

<p>这里，我们需要修改Schemes。</p>
<p>12.1)  打开Manage Schemes ：</p>



  <figure>
    <a href="/blog/95/30.png" target="_blank">
      <img src="/blog/95/30.png" alt="Schemes"/>
      <figcaption><p>Schemes</p></figcaption>
    </a>
    
  </figure>

<p>12.2)  添加一个Schemes ：</p>



  <figure>
    <a href="/blog/95/32.png" target="_blank">
      <img src="/blog/95/32.png" alt="add"/>
      <figcaption><p>add</p></figcaption>
    </a>
    
  </figure>

<p>12.3)  命名新Schemes为FightTravel ：</p>



  <figure>
    <a href="/blog/95/33.png" target="_blank">
      <img src="/blog/95/33.png" alt="FightTravel"/>
      <figcaption><p>FightTravel</p></figcaption>
    </a>
    
  </figure>

<p>12.4)   设置新Schemes为Shared：</p>



  <figure>
    <a href="/blog/95/34.png" target="_blank">
      <img src="/blog/95/34.png" alt="Shared"/>
      <figcaption><p>Shared</p></figcaption>
    </a>
    
  </figure>

<p>12.5)   删除旧项目名的Schemes：</p>



  <figure>
    <a href="/blog/95/35.png" target="_blank">
      <img src="/blog/95/35.png" alt="Schemes"/>
      <figcaption><p>Schemes</p></figcaption>
    </a>
    
  </figure>

<p>小结：通过以上步骤，成功修改项目名了。</p>
<p>本文参考了以下文章，并集成。</p>
<p><a href="http://www.cocoachina.com/cms/wap.php?action=article&amp;id=10824">iOS项目的完整重命名方法图文教程</a></p>
<p><a href="http://www.jianshu.com/p/d0cf1c63a41a">ReactNative项目名称修改</a></p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>html5小游戏--星球大战</title>
            <link>https://sengmitnick.com/blog/94/</link>
            <pubDate>Tue, 20 Dec 2016 15:15:38 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/94/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;通过html5，canvas，JavaScript编写一个小游戏
简单设计：初始界面只有四个星球，一飞碟围着第一个星球旋转，当点击该星球时，飞碟以所在位置与星球球心连成的直线路径以匀速发射，直到碰到第二个星球后，停止并依附第二个星球旋转，反之则游戏结束，以此类推，直到飞碟以第四个星球旋转则游戏胜利并结束。
进阶设计：以简单设计为基础，不断有新的星球出现，并且每成功碰到下一个星球记一次份，设置计分系统和通关目标。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>通过html5，canvas，JavaScript编写一个小游戏
简单设计：初始界面只有四个星球，一飞碟围着第一个星球旋转，当点击该星球时，飞碟以所在位置与星球球心连成的直线路径以匀速发射，直到碰到第二个星球后，停止并依附第二个星球旋转，反之则游戏结束，以此类推，直到飞碟以第四个星球旋转则游戏胜利并结束。
进阶设计：以简单设计为基础，不断有新的星球出现，并且每成功碰到下一个星球记一次份，设置计分系统和通关目标。</p>
</blockquote>
<h2 id="第一难点">第一难点</h2>
<p>游戏初始有四个星球，研究飞碟在第一个星球发射的轨迹函数：
按旋转角度分析，飞碟发射有四个区域：0~90，90~180，180~270，270~360
按照这种情况，可以有以下代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ii</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">ii</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">360</span>){

}
</code></pre></div><p>但是这样子有局限性，况且涉及角度一般就是正弦函数，通过推导，简化成以下代码，并且完美实现该功能：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">//cx = sin(angle)  cy = -cos(angle)
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">ii</span> <span style="color:#f92672">*</span> Math.<span style="color:#a6e22e">PI</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">180</span>;
<span style="color:#a6e22e">cx</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cx</span> <span style="color:#f92672">+</span> (Math.<span style="color:#a6e22e">sin</span>(<span style="color:#a6e22e">angle</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>);
<span style="color:#a6e22e">cy</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cy</span> <span style="color:#f92672">-</span> (Math.<span style="color:#a6e22e">cos</span>(<span style="color:#a6e22e">angle</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>);
</code></pre></div><h2 id="第二难点">第二难点</h2>
<p>假设飞碟所在圆为圆P，需前往圆M，切点为N,B，那么飞碟成功前往圆M需在角BPN内发射；
已知圆心P和M的坐标，那么通过两点直线距离可以求得直线PM的长度，通过两点斜率公式可以求出直线PM的斜率从而求得该直线的倾斜角；</p>
<p>通过切点N，三角形PMN是直角三角形，直线MN长度为圆M的半径，已知PM和MN长，通过勾股定理进而求得直线PM的长度；已知三角形三个边长即可通过余弦定理<strong>cosC=(a^2+b^2-c^2)/2ab</strong>求出角NPM，从而得出飞碟要成功前往圆M的ii变量范围，写成代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JavaScript" data-lang="JavaScript"><span style="color:#75715e">// 假设飞碟所在圆为圆p，需前往圆M，切点为N
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">icy</span><span style="color:#f92672">-</span><span style="color:#a6e22e">icyb</span>)<span style="color:#f92672">/</span>(<span style="color:#a6e22e">icx</span><span style="color:#f92672">-</span><span style="color:#a6e22e">icxb</span>); <span style="color:#75715e">//两园点连成一直线PM的斜率k
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">atan</span>(<span style="color:#a6e22e">k</span>);
<span style="color:#a6e22e">angle</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">angle</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">180</span> )<span style="color:#f92672">/</span>Math.<span style="color:#a6e22e">PI</span> ; <span style="color:#75715e">//k对应的角angle
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">angle</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#a6e22e">angle</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">270</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">angle</span>;
    <span style="color:#a6e22e">iii</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">180</span>;
} <span style="color:#66d9ef">else</span>{
    <span style="color:#a6e22e">angle</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">angle</span>;
    <span style="color:#a6e22e">iii</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">180</span>;
};
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pm</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">sqrt</span>( Math.<span style="color:#a6e22e">pow</span>( (<span style="color:#a6e22e">icx</span><span style="color:#f92672">-</span><span style="color:#a6e22e">icxb</span>) ,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">pow</span>( (<span style="color:#a6e22e">icy</span><span style="color:#f92672">-</span><span style="color:#a6e22e">icyb</span>) ,<span style="color:#ae81ff">2</span>) ); <span style="color:#75715e">//直线PM的长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pn</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">sqrt</span>( Math.<span style="color:#a6e22e">pow</span>( <span style="color:#a6e22e">pm</span> ,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">r</span>,<span style="color:#ae81ff">2</span>) ); <span style="color:#75715e">//直线PN的长度
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">deviation</span> <span style="color:#f92672">=</span> (Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">pm</span>,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">pn</span>,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">r</span>,<span style="color:#ae81ff">2</span>))<span style="color:#f92672">/</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">pm</span><span style="color:#f92672">*</span><span style="color:#a6e22e">pn</span>);
<span style="color:#a6e22e">deviation</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">acos</span>(<span style="color:#a6e22e">deviation</span>);
<span style="color:#a6e22e">deviation</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">deviation</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">180</span> )<span style="color:#f92672">/</span>Math.<span style="color:#a6e22e">PI</span> ;
<span style="color:#a6e22e">iimax</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">deviation</span>;
<span style="color:#a6e22e">iimin</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">angle</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">deviation</span>;
</code></pre></div><h2 id="第三难点">第三难点</h2>
<p>假设飞碟所在圆为圆P，需前往圆M，已知飞碟在圆P的ii值，若飞碟可以到达圆M，求飞碟到达圆M后的ii值；</p>
<p>假设飞碟到达圆M后的着点为L，求出直线PL的长度；</p>
<p>已知角MPL，直线PM和ML的长度，通过余弦定理<strong>cosC=(a^2+b^2-c^2)/2ab</strong>可求出直线PL的长度，通过一元二次方程求根公式求出PL的长度有两个值，我们取最小值为PL长度，求出三角形PML三边长，再通过余弦定理求出角PML进而求出飞碟到达圆M后的ii值，代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#75715e">//PL不等于PM
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">p_angle</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">abs</span>( <span style="color:#a6e22e">angle</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">ii</span>);<span style="color:#75715e">//角MPL
</span><span style="color:#75715e"></span><span style="color:#a6e22e">p_angle</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p_angle</span> <span style="color:#f92672">*</span> Math.<span style="color:#a6e22e">PI</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">180</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> , <span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">pm</span><span style="color:#f92672">*</span>Math.<span style="color:#a6e22e">cos</span>(<span style="color:#a6e22e">p_angle</span>) , <span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">pow</span>( <span style="color:#a6e22e">pm</span> ,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">r</span>,<span style="color:#ae81ff">2</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">v</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">sqrt</span>(Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">b</span>,<span style="color:#ae81ff">2</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span><span style="color:#f92672">*</span><span style="color:#a6e22e">a</span><span style="color:#f92672">*</span><span style="color:#a6e22e">c</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pl_1</span> <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#a6e22e">b</span><span style="color:#f92672">+</span><span style="color:#a6e22e">v</span>)<span style="color:#f92672">/</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">a</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pl_2</span> <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span><span style="color:#a6e22e">b</span><span style="color:#f92672">-</span><span style="color:#a6e22e">v</span>)<span style="color:#f92672">/</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">a</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pl</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">min</span>(<span style="color:#a6e22e">pl_1</span>,<span style="color:#a6e22e">pl_2</span>);
<span style="color:#a6e22e">distance</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pl</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">r</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pml_angle</span> <span style="color:#f92672">=</span> (Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">pm</span>,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">+</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">r</span>,<span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> Math.<span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">pl</span>,<span style="color:#ae81ff">2</span>))<span style="color:#f92672">/</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span><span style="color:#a6e22e">pm</span><span style="color:#f92672">*</span><span style="color:#a6e22e">r</span>);
<span style="color:#a6e22e">pml_angle</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">acos</span>(<span style="color:#a6e22e">pml_angle</span>);
<span style="color:#a6e22e">pml_angle</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">pml_angle</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">180</span> )<span style="color:#f92672">/</span>Math.<span style="color:#a6e22e">PI</span> ;
<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ii</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">angle</span>) {
    <span style="color:#a6e22e">iii</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">iii</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">pml_angle</span>;
} <span style="color:#66d9ef">else</span>{
    <span style="color:#a6e22e">iii</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">iii</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">pml_angle</span>;
};
</code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>环形缓冲区及多线程</title>
            <link>https://sengmitnick.com/blog/93/</link>
            <pubDate>Thu, 15 Dec 2016 20:09:28 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/93/</guid>
            <description>&lt;p&gt;使用经典的生产者-消费者问题做例子。创建三个生产者线程（P1,P2,P3）和一个消费者线程（C1），生产者和消费者线程共享一个长度为2kb的环型公共缓冲区，生产者向缓冲区写入消息，消费者从缓冲区中取走消息显示到屏幕。只要缓冲区未满，生产者可将消息送入缓冲区；只要缓冲区未空，消费者可从缓冲区取走一个消息。
每个生产者每隔2s生产一个消息加入缓冲区，并把消息产生时间和内容记录在一个文本中。P1每次生产的数据为26个大写字母，P2每次生产的数据为26个小字母，P3每次生产的数据为10个阿拉伯数字。
消费者C1每隔3s读取缓冲区中的一个消息并将消息内容显示到屏幕上。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>使用经典的生产者-消费者问题做例子。创建三个生产者线程（P1,P2,P3）和一个消费者线程（C1），生产者和消费者线程共享一个长度为2kb的环型公共缓冲区，生产者向缓冲区写入消息，消费者从缓冲区中取走消息显示到屏幕。只要缓冲区未满，生产者可将消息送入缓冲区；只要缓冲区未空，消费者可从缓冲区取走一个消息。
每个生产者每隔2s生产一个消息加入缓冲区，并把消息产生时间和内容记录在一个文本中。P1每次生产的数据为26个大写字母，P2每次生产的数据为26个小字母，P3每次生产的数据为10个阿拉伯数字。
消费者C1每隔3s读取缓冲区中的一个消息并将消息内容显示到屏幕上。</p>
<h2 id="下载源码">下载源码</h2>
<p>本文章示例可以通过以下命令下载：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/smk17/pthread.git
</code></pre></div><p>下载使用make命令生成即可运行~</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>给React Native程序添加启动页</title>
            <link>https://sengmitnick.com/blog/92/</link>
            <pubDate>Fri, 18 Nov 2016 09:58:14 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/92/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;一个APP最先应该有个启动页，这里简单介绍如何创建一个启动页~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载源码&#34;&gt;下载源码&lt;/h2&gt;
&lt;p&gt;本文章示例可以通过以下命令下载：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>一个APP最先应该有个启动页，这里简单介绍如何创建一个启动页~</p>
</blockquote>
<h2 id="下载源码">下载源码</h2>
<p>本文章示例可以通过以下命令下载：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone -b SplashScreen https://github.com/sengmitnick/SMKProject.git
</code></pre></div><h2 id="开始">开始</h2>
<p>SplashScreen页面的动画效果直接使用了<a href="http://reactnative.cn/docs/0.37/animated.html#content">React Native文档中Animated示例</a>
视图界面代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SplashScreen</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Component</span> {
  <span style="color:#a6e22e">render</span> () {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">splashView</span> <span style="color:#f92672">=</span> (
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">View</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">styles</span>.<span style="color:#a6e22e">container</span>}<span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">View</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">styles</span>.<span style="color:#a6e22e">container</span>}<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Image</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">styles</span>.<span style="color:#a6e22e">img</span>} <span style="color:#a6e22e">source</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;../../image/logo.png&#39;</span>)}<span style="color:#f92672">/&gt;</span>
          <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Text</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">styles</span>.<span style="color:#a6e22e">appName</span>}<span style="color:#f92672">&gt;</span><span style="color:#a6e22e">我の智家</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/Text&gt;</span>
        <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/View&gt;</span>
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">View</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">styles</span>.<span style="color:#a6e22e">appInfo</span>}<span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Text</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">Copyright</span> <span style="color:#960050;background-color:#1e0010">©</span> <span style="color:#ae81ff">1999</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2016</span>, <span style="color:#a6e22e">SMK17</span>.<span style="color:#a6e22e">CN</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/Text&gt;</span>
          <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">Text</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">All</span> <span style="color:#a6e22e">Rights</span> <span style="color:#a6e22e">Reserved</span> <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/Text&gt;</span>
        <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/View&gt;</span>
      <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/View&gt;</span>
    );
    <span style="color:#66d9ef">return</span> (
      <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">FadeInView</span> <span style="color:#a6e22e">children</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">splashView</span>} <span style="color:#f92672">/&gt;</span>
     );
  }
}
</code></pre></div><p>启动时页面切换如下：
大致意思就是先显示启动页2秒然后切换到主界面~</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">App</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Component</span> {
  <span style="color:#a6e22e">componentDidMount</span>() {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">timer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setTimeout</span>(
      () =&gt; { <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setState</span>({<span style="color:#a6e22e">splashed</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>}); },
      <span style="color:#ae81ff">2000</span>
    );
  }
  <span style="color:#a6e22e">componentWillUnmount</span>() {
    <span style="color:#75715e">// 如果存在this.timer，则使用clearTimeout清空。
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// 如果你使用多个timer，那么用多个变量，或者用个数组来保存引用，然后逐个clear
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">timer</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">clearTimeout</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">timer</span>);
  }
  <span style="color:#a6e22e">constructor</span>(<span style="color:#a6e22e">props</span>) {
    <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">props</span>);
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">splashed</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span> };
  }
  <span style="color:#a6e22e">render</span> () {
    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">splashed</span>){
      <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">childrenView</span> <span style="color:#f92672">=</span> (
      	<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">View</span><span style="color:#f92672">&gt;</span><span style="color:#75715e">&lt;!--</span><span style="color:#a6e22e">这里显示主界面</span><span style="color:#f92672">--&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/View&gt;</span>
      );
      <span style="color:#66d9ef">return</span> (
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">FadeInView</span> <span style="color:#a6e22e">children</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">childrenView</span>} <span style="color:#f92672">/&gt;</span>
      );
    }<span style="color:#66d9ef">else</span>{
      <span style="color:#66d9ef">return</span> (
        <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">SplashScreen</span> <span style="color:#f92672">/&gt;</span>
      );
    }
  }
}
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>微信小程序开发与使用各种坑</title>
            <link>https://sengmitnick.com/blog/91/</link>
            <pubDate>Wed, 09 Nov 2016 18:29:22 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/91/</guid>
            <description>&lt;p&gt;这里汇总了我在学习微信小程序过程中遇到的各种坑~&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>这里汇总了我在学习微信小程序过程中遇到的各种坑~</p>
<h2 id="微信小程序-page-route-错误">微信小程序 Page route 错误</h2>
<p>具体会警告显示“1. Forgot to add page route in app.json. 2. Invoking Page() in async task.”，字面上意思还是容易明白的，网上解决方案大致就是app.json pages中的route问题了，不过我遇到的情况比较特殊，是在IED完全没问题，但是在我手机就出现这个问题了，后来发现应该是IDE项目名的错误，因为之前我有个应该名字相同但是文件完全不同的项目被我删除了，在那个项目是没有这个页面的，所以我觉得是微信的机制问题了，改个名字就好了~</p>]]></content>
        </item>
        
        <item>
            <title>使用leancloud做微信小程序后端</title>
            <link>https://sengmitnick.com/blog/90/</link>
            <pubDate>Sat, 05 Nov 2016 21:04:39 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/90/</guid>
            <description>&lt;p&gt;微信小程序公测后，就立刻尝试了，使用APPID的项目，在进行网络请求就有了域名限制了~&lt;/p&gt;
&lt;p&gt;具体的使用方法直接看(leancloud官方文档)[https://leancloud.cn/docs/weapp.html]&lt;/p&gt;
&lt;p&gt;这里说的，就是微信小程序后端域名设置不当会出现的错误，该错误如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>微信小程序公测后，就立刻尝试了，使用APPID的项目，在进行网络请求就有了域名限制了~</p>
<p>具体的使用方法直接看(leancloud官方文档)[https://leancloud.cn/docs/weapp.html]</p>
<p>这里说的，就是微信小程序后端域名设置不当会出现的错误，该错误如下：</p>
  <figure>
    <a href="/blog/90/1.png" target="_blank">
      <img src="/blog/90/1.png" alt="图1"/>
      <figcaption><p>图1</p></figcaption>
    </a>
    
  </figure>

<p>解决方法：
登录<a href="https://mp.weixin.qq.com">微信公众平台</a>到你的小程序,设置界面-&gt;开发设置-&gt;服务器配置-&gt;修改-&gt;扫二维码-&gt;填写域名&quot;app-router.leancloud.cn&quot;-&gt;提交并修改。如图所示：



  <figure>
    <a href="/blog/90/2.png" target="_blank">
      <img src="/blog/90/2.png" alt="图2"/>
      <figcaption><p>图2</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/90/3.png" target="_blank">
      <img src="/blog/90/3.png" alt="图3"/>
      <figcaption><p>图3</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/90/4.png" target="_blank">
      <img src="/blog/90/4.png" alt="图4"/>
      <figcaption><p>图4</p></figcaption>
    </a>
    
  </figure>
</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Windows利用vnc viewer远程连接MacOS</title>
            <link>https://sengmitnick.com/blog/66/</link>
            <pubDate>Mon, 31 Oct 2016 18:00:56 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/66/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;作为一个喜欢一个屏幕一部电脑就可以干所有事情的童孩，在使用了大半年Mac OS后又因各种原因逼迫用会windows并且最后导致经常在两个系统之间不停切换，这期间在Mac OS使用Parallels Desktop 来使用windows或者在windows使用vmware来使用Mac OS都不能让我满意，最后就想到使用远程桌面来使用，以下是教程。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>作为一个喜欢一个屏幕一部电脑就可以干所有事情的童孩，在使用了大半年Mac OS后又因各种原因逼迫用会windows并且最后导致经常在两个系统之间不停切换，这期间在Mac OS使用Parallels Desktop 来使用windows或者在windows使用vmware来使用Mac OS都不能让我满意，最后就想到使用远程桌面来使用，以下是教程。</p>
</blockquote>
<h2 id="在macos开启屏幕共享">在MacOS开启屏幕共享</h2>
<p>系统偏好设置-共享-勾选“屏幕共享”，然后在电脑设置—VNC显示程序可以使用密码控制屏幕输入8位密码，并输入登录使用的密码允许设置，这样就可以通过其它PC或Mac上的VNC Viewer来连接这台Msc进行远程控制了。（具体操作如下图）



  <figure>
    <a href="/blog/66/1.jpg" target="_blank">
      <img src="/blog/66/1.jpg" alt="图1"/>
      <figcaption><p>图1</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/66/2.jpg" target="_blank">
      <img src="/blog/66/2.jpg" alt="图2"/>
      <figcaption><p>图2</p></figcaption>
    </a>
    
  </figure>

记住控制密码，下面会用到~</p>
<h2 id="安装vnc-viewer">安装VNC Viewer</h2>
<p>推荐在<a href="http://www.ihacksoft.com/vnc-realvnc-5.html">RealVNC 5.1注册码+官方原版下载（含VNC Viewer和VNC Server）</a>这篇文章里面下载RealVNC 5.0.5并安装，
或者直接在<a href="http://downloads.sengmitnick.com/RealVNC.Enterprise_iHackSoft.com_5.0.5.rar">这里</a>下载</p>
<h2 id="使用vnc-viewer连接mac-os">使用VNC Viewer连接Mac OS</h2>
<h3 id="输入要连接mac-os的ip地址即图1下的ip">输入要连接Mac OS的ip地址（即图1下的ip）</h3>



  <figure>
    <a href="/blog/66/3.jpg" target="_blank">
      <img src="/blog/66/3.jpg" alt="输入ip地址"/>
      <figcaption><p>输入ip地址</p></figcaption>
    </a>
    
  </figure>

<h3 id="输入在mac中设置的密码">输入在Mac中设置的密码</h3>
<p>


  <figure>
    <a href="/blog/66/4.jpg" target="_blank">
      <img src="/blog/66/4.jpg" alt="输入密码"/>
      <figcaption><p>输入密码</p></figcaption>
    </a>
    
  </figure>

然后就会进行连接了~~下面是连接成功的效果图：



  <figure>
    <a href="/blog/66/5.jpg" target="_blank">
      <img src="/blog/66/5.jpg" alt="连接成功效果图"/>
      <figcaption><p>连接成功效果图</p></figcaption>
    </a>
    
  </figure>
</p>]]></content>
        </item>
        
        <item>
            <title>给Hexo添加文章置顶功能</title>
            <link>https://sengmitnick.com/blog/89/</link>
            <pubDate>Fri, 21 Oct 2016 16:25:37 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/89/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;博客里面总改有些文章要置顶的~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章参考了&lt;a href=&#34;http://www.yuedongxu.cn/wod/&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用以下代码替换掉你Hexo博客目录下 &lt;code&gt;node_modules/hexo-generator-index/lib/generator.js&lt;/code&gt; 里的代码:&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>博客里面总改有些文章要置顶的~~</p>
</blockquote>
<p>文章参考了<a href="http://www.yuedongxu.cn/wod/">这里</a></p>
<p>用以下代码替换掉你Hexo博客目录下 <code>node_modules/hexo-generator-index/lib/generator.js</code> 里的代码:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>;

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pagination</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;hexo-pagination&#39;</span>);

<span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">locals</span>){
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">config</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">config</span>;
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">posts</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">locals</span>.<span style="color:#a6e22e">posts</span>;

    <span style="color:#a6e22e">posts</span>.<span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">posts</span>.<span style="color:#a6e22e">data</span>.<span style="color:#a6e22e">sort</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">top</span>) { <span style="color:#75715e">// 两篇文章top都有定义
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">top</span>) <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">date</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">date</span>; <span style="color:#75715e">// 若top值一样则按照文章日期降序排
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">top</span>; <span style="color:#75715e">// 否则按照top值降序排
</span><span style="color:#75715e"></span>        }
        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">top</span>) { <span style="color:#75715e">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
        }
        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">top</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">top</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
        }
        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">date</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">date</span>; <span style="color:#75715e">// 都没定义按照文章日期降序排
</span><span style="color:#75715e"></span>
    });

  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">paginationDir</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">pagination_dir</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;page&#39;</span>;

  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pagination</span>(<span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">posts</span>, {
    <span style="color:#a6e22e">perPage</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">index_generator</span>.<span style="color:#a6e22e">per_page</span>,
    <span style="color:#a6e22e">layout</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;index&#39;</span>, <span style="color:#e6db74">&#39;archive&#39;</span>],
    <span style="color:#a6e22e">format</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">paginationDir</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/%d/&#39;</span>,
    <span style="color:#a6e22e">data</span><span style="color:#f92672">:</span> {
      <span style="color:#a6e22e">__index</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
    }
  });
};
</code></pre></div><p>使用方法如下：



  <figure>
    <a href="/blog/89/1.jpg" target="_blank">
      <img src="/blog/89/1.jpg" alt="图1"/>
      <figcaption><p>图1</p></figcaption>
    </a>
    
  </figure>
</p>
<p>类型是数字，代表优先级哈~</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>React Native使用各种坑</title>
            <link>https://sengmitnick.com/blog/88/</link>
            <pubDate>Fri, 21 Oct 2016 13:05:53 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/88/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;正式开始学习React Native,其中遇到的各种坑将汇总于此~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;问题反馈&#34;&gt;问题反馈&lt;/h2&gt;
&lt;h3 id=&#34;1出现comandroidddmlibinstallexception&#34;&gt;1.出现“com.android.ddmlib.InstallException:&lt;/h3&gt;
&lt;p&gt;Failed to establish session react-native”，详情如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>正式开始学习React Native,其中遇到的各种坑将汇总于此~</p>
</blockquote>
<h2 id="问题反馈">问题反馈</h2>
<h3 id="1出现comandroidddmlibinstallexception">1.出现“com.android.ddmlib.InstallException:</h3>
<p>Failed to establish session react-native”，详情如下：</p>
<p>


  <figure>
    <a href="/blog/88/1.png" target="_blank">
      <img src="/blog/88/1.png" alt="图1"/>
      <figcaption><p>图1</p></figcaption>
    </a>
    
  </figure>

解决方法：
问题参考了<a href="http://stackoverflow.com/questions/32577761/com-android-ddmlib-installexception-failed-to-establish-session-react-native">这里</a>当中关于小米设备的解决方法，具体就是，如果是小米设备在开启USB调试后，继续在该界面往下滚动，找到&quot;启用MIUI优化&quot;，将其关闭即可（需重启手机），如下图：



  <figure>
    <a href="/blog/88/2.png" target="_blank">
      <img src="/blog/88/2.png" alt="图2"/>
      <figcaption><p>图2</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="2运行安卓虚拟机出现no-accelerator-found">2.运行安卓虚拟机出现“No accelerator found</h3>
<pre><code>- failed to create HAX VM“，详情如下：
</code></pre>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Failed to create vm ffffffff
Failed to create HAX VM
No accelerator found.
failed to initialize HAX: Invalid argument
Hax is enabled
Hax ram_size 0x80000000
</code></pre></div><p>解决方法：</p>
<p>暂时没有找到真正的解决方法，出现该原因是我在Mac上同时开启了Parallels Desktop这个软件，中止该软件下的系统后即可运行。（参考<a href="http://stackoverflow.com/questions/39087532/no-accelerator-found-failed-to-create-hax-vm">No accelerator found - failed to create HAX VM</a>）</p>
<h3 id="3服务器端版本过低或者过高">3.服务器端版本过低或者过高</h3>
<p>详情如下两图：



  <figure>
    <a href="/blog/88/3.png" target="_blank">
      <img src="/blog/88/3.png" alt="图3"/>
      <figcaption><p>图3</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/88/5.png" target="_blank">
      <img src="/blog/88/5.png" alt="图5"/>
      <figcaption><p>图5</p></figcaption>
    </a>
    
  </figure>
</p>
<p>解决方法：</p>
<p>终止现在运行的服务器，在终端重新执行“react-native run-android”或者“react-native run-ios”</p>
<h3 id="4每次重新安装程序在小米系统上都要设置一下以下权限">4.每次重新安装程序在小米系统上都要设置一下以下权限：</h3>



  <figure>
    <a href="/blog/88/4.png" target="_blank">
      <img src="/blog/88/4.png" alt="图4"/>
      <figcaption><p>图4</p></figcaption>
    </a>
    
  </figure>

<p>解决方法：
待解决~~</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>温湿度测试软件</title>
            <link>https://sengmitnick.com/blog/87/</link>
            <pubDate>Thu, 20 Oct 2016 16:55:51 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/87/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;之前公司要求的温湿度模块终于出来了，但是一个个测试太麻烦，于是和另一个同事一起做了这个“温湿度测试软件”，他负责开发终端我负责数据显示与处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;目前最终版效果如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>之前公司要求的温湿度模块终于出来了，但是一个个测试太麻烦，于是和另一个同事一起做了这个“温湿度测试软件”，他负责开发终端我负责数据显示与处理。</p>
</blockquote>
<h2 id="介绍">介绍</h2>
<p>目前最终版效果如下：</p>
  <figure>
    <a href="/blog/87/2.jpg" target="_blank">
      <img src="/blog/87/2.jpg" alt="效果图"/>
      <figcaption><p>效果图</p></figcaption>
    </a>
    
  </figure>

<p>之前有10*5的版本，这是应客户要求改额度，代码配置有，可以直接修改的。源代码已经git到<a href="https://github.com/smk17/TempAndHumiTest">这里</a>！</p>
<h2 id="功能">功能</h2>
<ul>
<li>测试参数设置：可以设置测试环境及误差</li>
<li>串口参数设置：设置对应串口参数以接受终端数据</li>
<li>调试：接受数据并保存</li>
<li>数据查看：查看目前所有数据，需搜索</li>
<li>数据分析：根据数据生成对应的折线图</li>
</ul>
<h2 id="问题反馈">问题反馈</h2>
<p>客户机安装时出现以下报错：



  <figure>
    <a href="/blog/87/1.png" target="_blank">
      <img src="/blog/87/1.png" alt="报错"/>
      <figcaption><p>报错</p></figcaption>
    </a>
    
  </figure>
</p>
<p>解决方法：</p>
<p>从<a href="https://www.microsoft.com/en-us/download/details.aspx?id=5555">这里</a>现在环境依赖包安装即可。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>typecho数据迁移到Hexo</title>
            <link>https://sengmitnick.com/blog/86/</link>
            <pubDate>Sat, 15 Oct 2016 10:46:25 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/86/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;花了些许功夫成功用上Hexo做博客了，就寻思着把之前在typecho博客的文章迁移过来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在github上面找到了这个兄弟写得&lt;a href=&#34;https://github.com/zhourongyu/Typecho2Hexo&#34; title=&#34;Typecho2Hexo&#34;&gt;Typecho2Hexo Python版小工具&lt;/a&gt;,把他Fork到我的GitHub，修改成可以在我系统上用的版本。新版本在&lt;a href=&#34;https://github.com/sengmitnick/Typecho2Hexo&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>花了些许功夫成功用上Hexo做博客了，就寻思着把之前在typecho博客的文章迁移过来。</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>在github上面找到了这个兄弟写得<a href="https://github.com/zhourongyu/Typecho2Hexo" title="Typecho2Hexo">Typecho2Hexo Python版小工具</a>,把他Fork到我的GitHub，修改成可以在我系统上用的版本。新版本在<a href="https://github.com/sengmitnick/Typecho2Hexo">这里</a>。</p>
<h2 id="实现">实现</h2>
<p>代码如下：（不行访问Github的直接在这里cp）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Python" data-lang="Python"><span style="color:#75715e">## -*- coding: utf-8 -*-</span>
__author__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Zhou Rongyu&#39;</span>

<span style="color:#f92672">import</span> codecs
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> torndb
<span style="color:#f92672">import</span> arrow
<span style="color:#f92672">import</span> sys
reload(sys)
sys<span style="color:#f92672">.</span>setdefaultencoding(<span style="color:#e6db74">&#39;utf-8&#39;</span>)

<span style="color:#75715e"># 把数据库相关信息改成自己的，默认localhost（和数据库同机的话不需要修改）</span>
db <span style="color:#f92672">=</span> torndb<span style="color:#f92672">.</span>Connection(host<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;localhost&#34;</span>, database<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;数据库&#34;</span>, user<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;root&#34;</span>, password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;密码&#34;</span>)
<span style="color:#75715e"># 创建分类和标签</span>
categories <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#34;select type, slug, name from typecho_metas&#34;</span>)
<span style="color:#66d9ef">for</span> cate <span style="color:#f92672">in</span> categories:
    path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data/</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> cate<span style="color:#f92672">.</span>slug
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(path):
        os<span style="color:#f92672">.</span>makedirs(path)
    f <span style="color:#f92672">=</span> codecs<span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">/index.md&#39;</span> <span style="color:#f92672">%</span> path, <span style="color:#e6db74">&#39;w&#39;</span>, <span style="color:#e6db74">&#34;utf-8&#34;</span>)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;title: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> cate<span style="color:#f92672">.</span>slug)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;date: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> arrow<span style="color:#f92672">.</span>now()<span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#39;YYYY-MM-DD HH:mm:ss&#39;</span>))
    <span style="color:#75715e"># 区分分类和标签</span>
    <span style="color:#66d9ef">if</span> cate<span style="color:#f92672">.</span>type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;category&#39;</span>:
        f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;type: &#34;categories&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
    <span style="color:#66d9ef">elif</span> cate<span style="color:#f92672">.</span>type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;tags&#39;</span>:
        f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;type: &#34;tags&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
    <span style="color:#75715e"># 禁止评论</span>
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;comments: false</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;---</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    f<span style="color:#f92672">.</span>close()

<span style="color:#75715e"># 创建文章</span>
entries <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#34;select cid, title, slug, text, created from typecho_contents where type=&#39;post&#39;&#34;</span>)
<span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> entries:
    title <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>title<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
    cid <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>cid
    content <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>text
    <span style="color:#66d9ef">if</span> content <span style="color:#f92672">is</span> None:
        content <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    content <span style="color:#f92672">=</span> str(content<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;utf-8&#34;</span>))<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;&lt;!--markdown--&gt;&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
    tags <span style="color:#f92672">=</span> []
    category <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#75715e"># 找出文章的tag及category</span>
    metas <span style="color:#f92672">=</span> db<span style="color:#f92672">.</span>query(
        <span style="color:#e6db74">&#34;select type, name, slug from `typecho_relationships` ts, typecho_metas tm where tm.mid = ts.mid and ts.cid = </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span>,
        e<span style="color:#f92672">.</span>cid)
    <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> metas:
        <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;tag&#39;</span>:
            tags<span style="color:#f92672">.</span>append(m<span style="color:#f92672">.</span>name)
        <span style="color:#66d9ef">if</span> m<span style="color:#f92672">.</span>type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;category&#39;</span>:
            category <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>slug
    path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data/_posts/&#39;</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(path):
        os<span style="color:#f92672">.</span>makedirs(path)
    f <span style="color:#f92672">=</span> codecs<span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%s%s</span><span style="color:#e6db74">.md&#39;</span> <span style="color:#f92672">%</span> (path, cid), <span style="color:#e6db74">&#39;w&#39;</span>, <span style="color:#e6db74">&#34;utf-8&#34;</span>)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;title: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> title)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;date: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> arrow<span style="color:#f92672">.</span>get(e<span style="color:#f92672">.</span>created)<span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#39;YYYY-MM-DD HH:mm:ss&#39;</span>))
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;categories: </span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> category)
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;tags: [</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> <span style="color:#e6db74">&#39;,&#39;</span><span style="color:#f92672">.</span>join(tags))
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;---</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    f<span style="color:#f92672">.</span>write(content)
    f<span style="color:#f92672">.</span>close()
</code></pre></div><h2 id="问题汇总">问题汇总</h2>
<p>为什么要大改？是因为我使用过程中，发现源版本生成的文件名是标题，觉得用id做名字好一点，网站链接也短，还有，原版本不知道是什么回事，使用一直提示我连接数据库出错，说密码错误，可是我命令行直接登陆完全没问题，我只好乱改一通了，最后莫名其妙就可以了。</p>
<p>后面我还想添加在文章生成md文件过程中添加<code>&lt;!--more--&gt;</code>标签的，后面也实现了，可惜发现我的文章好多html字符，添加了会出错，最后只能我自己手动添加。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>DoNet下使用Chart，代码设置并具备放大功能</title>
            <link>https://sengmitnick.com/blog/85/</link>
            <pubDate>Wed, 12 Oct 2016 14:51:29 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/85/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;直接拖到Chart控件到你需要显示的地方，然后把控件名字改成chart即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文示例DEMO已上传到GitHub，点击&lt;a href=&#34;https://github.com/smk17/ChartText&#34;&gt;这里&lt;/a&gt;即可访问。&lt;/p&gt;
&lt;p&gt;本文示例最终效果：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>直接拖到Chart控件到你需要显示的地方，然后把控件名字改成chart即可。</p>
</blockquote>
<p>本文示例DEMO已上传到GitHub，点击<a href="https://github.com/smk17/ChartText">这里</a>即可访问。</p>
<p>本文示例最终效果：</p>
<p>


  <figure>
    <a href="/blog/85/1.jpg" target="_blank">
      <img src="/blog/85/1.jpg" alt="图1"/>
      <figcaption><p>图1</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/85/2.jpg" target="_blank">
      <img src="/blog/85/2.jpg" alt="图2"/>
      <figcaption><p>图2</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/85/3.jpg" target="_blank">
      <img src="/blog/85/3.jpg" alt="图3"/>
      <figcaption><p>图3</p></figcaption>
    </a>
    
  </figure>
</p>
<p>直接上代码：</p>
<h1 id="初始化">初始化</h1>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-CSHARP" data-lang="CSHARP"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> InitializeChart()
{
    chart.ChartAreas.Clear();
    chart.Series.Clear();

    <span style="color:#75715e">#region 设置图表的属性  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//图表的背景色  
</span><span style="color:#75715e"></span>    chart.BackColor = Color.FromArgb(<span style="color:#ae81ff">211</span>, <span style="color:#ae81ff">223</span>, <span style="color:#ae81ff">240</span>);
    <span style="color:#75715e">//图表背景色的渐变方式  
</span><span style="color:#75715e"></span>    chart.BackGradientStyle = GradientStyle.TopBottom;
    <span style="color:#75715e">//图表的边框颜色、  
</span><span style="color:#75715e"></span>    chart.BorderlineColor = Color.FromArgb(<span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">105</span>);
    <span style="color:#75715e">//图表的边框线条样式  
</span><span style="color:#75715e"></span>    chart.BorderlineDashStyle = ChartDashStyle.Solid;
    <span style="color:#75715e">//图表边框线条的宽度  
</span><span style="color:#75715e"></span>    chart.BorderlineWidth = <span style="color:#ae81ff">2</span>;
    <span style="color:#75715e">//图表边框的皮肤  
</span><span style="color:#75715e"></span>    chart.BorderSkin.SkinStyle = BorderSkinStyle.Emboss;
    <span style="color:#75715e">#endregion
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">#region 设置图表的标题  
</span><span style="color:#75715e"></span>    Title title = <span style="color:#66d9ef">new</span> Title();
    <span style="color:#75715e">//标题内容  
</span><span style="color:#75715e"></span>    title.Text = <span style="color:#e6db74">&#34;折线图&#34;</span>;
    <span style="color:#75715e">//标题的字体  
</span><span style="color:#75715e"></span>    title.Font = <span style="color:#66d9ef">new</span> System.Drawing.Font(<span style="color:#e6db74">&#34;Microsoft Sans Serif&#34;</span>, <span style="color:#ae81ff">12</span>, FontStyle.Bold);
    <span style="color:#75715e">//标题字体颜色  
</span><span style="color:#75715e"></span>    title.ForeColor = Color.FromArgb(<span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">59</span>, <span style="color:#ae81ff">105</span>);
    <span style="color:#75715e">//标题阴影颜色  
</span><span style="color:#75715e"></span>    title.ShadowColor = Color.FromArgb(<span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
    <span style="color:#75715e">//标题阴影偏移量  
</span><span style="color:#75715e"></span>    title.ShadowOffset = <span style="color:#ae81ff">3</span>;
    chart.Titles.Add(title);
    <span style="color:#75715e">#endregion
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">#region 设置图例的属性  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//注意，需要把原来控件自带的图例删除掉  
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.chart.Legends.Clear();

    Legend legend = <span style="color:#66d9ef">new</span> Legend(<span style="color:#e6db74">&#34;Default&#34;</span>);
    legend.Alignment = StringAlignment.Center;
    legend.Docking = Docking.Bottom;
    legend.LegendStyle = LegendStyle.Column;
    <span style="color:#66d9ef">this</span>.chart.Legends.Add(legend);

    <span style="color:#75715e">// Add header separator of type line  
</span><span style="color:#75715e"></span>    legend.HeaderSeparator = LegendSeparatorStyle.Line;
    legend.HeaderSeparatorColor = Color.Gray;

    LegendCellColumn firstColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    firstColumn.ColumnType = LegendCellColumnType.SeriesSymbol;
    firstColumn.HeaderText = <span style="color:#e6db74">&#34;Color&#34;</span>;
    firstColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(firstColumn);

    <span style="color:#75715e">// Add Legend Text column  
</span><span style="color:#75715e"></span>    LegendCellColumn secondColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    secondColumn.ColumnType = LegendCellColumnType.Text;
    secondColumn.HeaderText = <span style="color:#e6db74">&#34;Name&#34;</span>;
    secondColumn.Text = <span style="color:#e6db74">&#34;#LEGENDTEXT&#34;</span>;
    secondColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(secondColumn);

    <span style="color:#75715e">// Add AVG cell column  
</span><span style="color:#75715e"></span>    LegendCellColumn avgColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    avgColumn.Text = <span style="color:#e6db74">&#34;#AVG{N2}&#34;</span>;
    avgColumn.HeaderText = <span style="color:#e6db74">&#34;Avg&#34;</span>;
    avgColumn.Name = <span style="color:#e6db74">&#34;AvgColumn&#34;</span>;
    avgColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(avgColumn);

    <span style="color:#75715e">// Add Total cell column  
</span><span style="color:#75715e"></span>    LegendCellColumn totalColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    totalColumn.Text = <span style="color:#e6db74">&#34;#TOTAL{N1}&#34;</span>;
    totalColumn.HeaderText = <span style="color:#e6db74">&#34;Total&#34;</span>;
    totalColumn.Name = <span style="color:#e6db74">&#34;TotalColumn&#34;</span>;
    totalColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(totalColumn);

    <span style="color:#75715e">// Set Min cell column attributes  
</span><span style="color:#75715e"></span>    LegendCellColumn minColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    minColumn.Text = <span style="color:#e6db74">&#34;#MIN{N1}&#34;</span>;
    minColumn.HeaderText = <span style="color:#e6db74">&#34;Min&#34;</span>;
    minColumn.Name = <span style="color:#e6db74">&#34;MinColumn&#34;</span>;
    minColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(minColumn);

    <span style="color:#75715e">// Set Max cell column attributes  
</span><span style="color:#75715e"></span>    LegendCellColumn maxColumn = <span style="color:#66d9ef">new</span> LegendCellColumn();
    maxColumn.Text = <span style="color:#e6db74">&#34;#MAX{N1}&#34;</span>;
    maxColumn.HeaderText = <span style="color:#e6db74">&#34;Max&#34;</span>;
    maxColumn.Name = <span style="color:#e6db74">&#34;MaxColumn&#34;</span>;
    maxColumn.HeaderBackColor = Color.WhiteSmoke;
    chart.Legends[<span style="color:#e6db74">&#34;Default&#34;</span>].CellColumns.Add(maxColumn);

    <span style="color:#75715e">#endregion
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">#region 设置图表区属性  
</span><span style="color:#75715e"></span>    ChartArea chartArea = <span style="color:#66d9ef">new</span> ChartArea(<span style="color:#e6db74">&#34;Default&#34;</span>);
    <span style="color:#75715e">//设置Y轴刻度间隔大小  
</span><span style="color:#75715e"></span>    chartArea.AxisY.Interval = <span style="color:#ae81ff">5</span>;
    <span style="color:#75715e">//设置Y轴的数据类型格式  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.LabelStyle.Format = &#34;C&#34;;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//设置背景色  
</span><span style="color:#75715e"></span>    chartArea.BackColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">165</span>, <span style="color:#ae81ff">191</span>, <span style="color:#ae81ff">228</span>);
    <span style="color:#75715e">//设置背景渐变方式  
</span><span style="color:#75715e"></span>    chartArea.BackGradientStyle = GradientStyle.TopBottom;
    <span style="color:#75715e">//设置渐变和阴影的辅助背景色  
</span><span style="color:#75715e"></span>    chartArea.BackSecondaryColor = Color.White;
    <span style="color:#75715e">//设置边框颜色  
</span><span style="color:#75715e"></span>    chartArea.BorderColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    <span style="color:#75715e">//设置阴影颜色  
</span><span style="color:#75715e"></span>    chartArea.ShadowColor = Color.Transparent;
    <span style="color:#75715e">//设置X轴和Y轴线条的颜色  
</span><span style="color:#75715e"></span>    chartArea.AxisX.LineColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    chartArea.AxisY.LineColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    <span style="color:#75715e">//开启次要Y轴
</span><span style="color:#75715e"></span>    chartArea.AxisY2.Enabled = AxisEnabled.True;
    <span style="color:#75715e">//设置X轴和Y轴线条的宽度  
</span><span style="color:#75715e"></span>    chartArea.AxisX.LineWidth = <span style="color:#ae81ff">1</span>;
    chartArea.AxisY.LineWidth = <span style="color:#ae81ff">1</span>;
    chartArea.AxisY2.LineWidth = <span style="color:#ae81ff">1</span>;
    <span style="color:#75715e">//设置X轴和Y轴的标题  
</span><span style="color:#75715e"></span>    chartArea.AxisX.Title = <span style="color:#e6db74">&#34;采集时间&#34;</span>;
    chartArea.AxisY.Title = <span style="color:#e6db74">&#34;温度值&#34;</span>;
    chartArea.AxisY2.Title = <span style="color:#e6db74">&#34;湿度值&#34;</span>;
    <span style="color:#75715e">//设置图表区网格横纵线条的颜色  
</span><span style="color:#75715e"></span>    chartArea.AxisX.MajorGrid.LineColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    chartArea.AxisY.MajorGrid.LineColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    chartArea.AxisY2.MajorGrid.LineColor = Color.FromArgb(<span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">64</span>);
    <span style="color:#75715e">//设置图表区网格横纵线条的宽度  
</span><span style="color:#75715e"></span>    chartArea.AxisX.MajorGrid.LineWidth = <span style="color:#ae81ff">1</span>;
    chartArea.AxisY.MajorGrid.LineWidth = <span style="color:#ae81ff">1</span>;
    chartArea.AxisY2.MajorGrid.LineWidth = <span style="color:#ae81ff">1</span>;
    <span style="color:#75715e">//设置坐标轴刻度线不延长出来  
</span><span style="color:#75715e"></span>    chartArea.AxisX.MajorTickMark.Enabled = <span style="color:#66d9ef">false</span>;
    chartArea.AxisY.MajorTickMark.Enabled = <span style="color:#66d9ef">false</span>;
    chartArea.AxisY2.MajorTickMark.Enabled = <span style="color:#66d9ef">false</span>;
    <span style="color:#75715e">//开启下面两句能够隐藏网格线条  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisX.MajorGrid.Enabled = false;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.MajorGrid.Enabled = false;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//设置X轴的显示类型及显示方式  
</span><span style="color:#75715e"></span>    chartArea.AxisX.Interval = <span style="color:#ae81ff">0</span>; <span style="color:#75715e">//设置为0表示由控件自动分配  
</span><span style="color:#75715e"></span>    chartArea.AxisX.IntervalAutoMode = IntervalAutoMode.VariableCount;
    chartArea.AxisX.IntervalType = DateTimeIntervalType.Minutes;
    chartArea.AxisX.LabelStyle.IsStaggered = <span style="color:#66d9ef">true</span>;
    <span style="color:#75715e">//chartArea.AxisX.MajorGrid.IntervalType = DateTimeIntervalType.Minutes;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisX.LabelStyle.IntervalType = DateTimeIntervalType.Minutes;  
</span><span style="color:#75715e"></span>    chartArea.AxisX.LabelStyle.Format = <span style="color:#e6db74">&#34;yyyy-MM-dd HH:mm:ss&#34;</span>;
    <span style="color:#75715e">//设置文本角度  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisX.LabelStyle.Angle = 45;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//设置文本自适应  
</span><span style="color:#75715e"></span>    chartArea.AxisX.IsLabelAutoFit = <span style="color:#66d9ef">true</span>;
    <span style="color:#75715e">//设置X轴允许拖动放大  
</span><span style="color:#75715e"></span>    chartArea.CursorX.IsUserEnabled = <span style="color:#66d9ef">true</span>;
    chartArea.CursorX.IsUserSelectionEnabled = <span style="color:#66d9ef">true</span>;
    chartArea.CursorX.Interval = <span style="color:#ae81ff">0</span>;
    chartArea.CursorX.IntervalOffset = <span style="color:#ae81ff">0</span>;
    chartArea.CursorX.IntervalType = DateTimeIntervalType.Minutes;
    chartArea.AxisX.ScaleView.Zoomable = <span style="color:#66d9ef">true</span>;
    chartArea.AxisX.ScrollBar.IsPositionedInside = <span style="color:#66d9ef">false</span>;

    <span style="color:#75715e">//设置中短线（还没看到效果）  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.Enabled = true;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.CollapsibleSpaceThreshold = 47;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.BreakLineStyle = BreakLineStyle.Wave;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.Spacing = 2;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.LineColor = Color.Red;  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisY.ScaleBreakStyle.LineWidth = 10;  
</span><span style="color:#75715e"></span>
    chart.ChartAreas.Add(chartArea);
    <span style="color:#75715e">#endregion
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//线条2：主要曲线  
</span><span style="color:#75715e"></span>    Series tempSeries = <span style="color:#66d9ef">new</span> Series(<span style="color:#e6db74">&#34;Default&#34;</span>);
    <span style="color:#75715e">//设置线条类型  
</span><span style="color:#75715e"></span>    tempSeries.ChartType = SeriesChartType.Spline;
    <span style="color:#75715e">//线条宽度  
</span><span style="color:#75715e"></span>    tempSeries.BorderWidth = <span style="color:#ae81ff">1</span>;
    <span style="color:#75715e">//阴影宽度  
</span><span style="color:#75715e"></span>    tempSeries.ShadowOffset = <span style="color:#ae81ff">0</span>;
    <span style="color:#75715e">//是否显示在图例集合Legends  
</span><span style="color:#75715e"></span>    tempSeries.IsVisibleInLegend = <span style="color:#66d9ef">true</span>;
    <span style="color:#75715e">//线条上数据点上是否有数据显示  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//series.IsValueShownAsLabel = true;
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//线条颜色  
</span><span style="color:#75715e"></span>    tempSeries.Color = Color.MediumPurple;
    <span style="color:#75715e">//设置曲线X轴的显示类型  
</span><span style="color:#75715e"></span>    tempSeries.XValueType = ChartValueType.DateTime;
    <span style="color:#75715e">//设置数据点的类型  
</span><span style="color:#75715e"></span>    tempSeries.MarkerStyle = MarkerStyle.Circle;
    <span style="color:#75715e">//线条数据点的大小  
</span><span style="color:#75715e"></span>    tempSeries.MarkerSize = <span style="color:#ae81ff">5</span>;
    <span style="color:#75715e">//绑定到Y主轴
</span><span style="color:#75715e"></span>    tempSeries.YAxisType = AxisType.Primary;
    chart.Series.Add(tempSeries);

    <span style="color:#75715e">//手动构造横坐标数据  
</span><span style="color:#75715e"></span>    DataTable dataTable = <span style="color:#66d9ef">new</span> DataTable();
    dataTable.Columns.Add(<span style="color:#e6db74">&#34;TheTime&#34;</span>, <span style="color:#66d9ef">typeof</span>(DateTime)); <span style="color:#75715e">//注意typeof  
</span><span style="color:#75715e"></span>    dataTable.Columns.Add(<span style="color:#e6db74">&#34;TheValue&#34;</span>, <span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">double</span>)); <span style="color:#75715e">//注意typeof  
</span><span style="color:#75715e"></span>    Random random = <span style="color:#66d9ef">new</span> Random(); <span style="color:#75715e">//随机数  
</span><span style="color:#75715e"></span>    DateTime dateTime = System.DateTime.Now;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> n = <span style="color:#ae81ff">0</span>; n &lt; <span style="color:#ae81ff">3</span>; n++)
    {
        dateTime = dateTime.AddSeconds(<span style="color:#ae81ff">10</span>);
        DataRow dr = dataTable.NewRow();
        dr[<span style="color:#e6db74">&#34;TheTime&#34;</span>] = dateTime;
        dr[<span style="color:#e6db74">&#34;TheValue&#34;</span>] = random.Next(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">101</span>);
        dataTable.Rows.Add(dr);
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> n = <span style="color:#ae81ff">3</span>; n &lt; <span style="color:#ae81ff">1000</span>; n++)
    {
        dateTime = dateTime.AddSeconds(<span style="color:#ae81ff">30</span>);
        DataRow dr = dataTable.NewRow();
        dr[<span style="color:#e6db74">&#34;TheTime&#34;</span>] = dateTime;
        dr[<span style="color:#e6db74">&#34;TheValue&#34;</span>] = random.Next(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">101</span>);
        dataTable.Rows.Add(dr);
    }

    <span style="color:#75715e">//线条1：下限横线  
</span><span style="color:#75715e"></span>    Series seriesMin = <span style="color:#66d9ef">new</span> Series(<span style="color:#e6db74">&#34;最小值&#34;</span>);
    seriesMin.ChartType = SeriesChartType.Line;
    seriesMin.BorderWidth = <span style="color:#ae81ff">1</span>;
    seriesMin.ShadowOffset = <span style="color:#ae81ff">0</span>;
    seriesMin.IsVisibleInLegend = <span style="color:#66d9ef">true</span>;
    seriesMin.IsValueShownAsLabel = <span style="color:#66d9ef">false</span>;
    seriesMin.Color = Color.Red;
    seriesMin.XValueType = ChartValueType.DateTime;
    seriesMin.MarkerStyle = MarkerStyle.None;
    chart.Series.Add(seriesMin);

    <span style="color:#75715e">//线条3：上限横线  
</span><span style="color:#75715e"></span>    Series seriesMax = <span style="color:#66d9ef">new</span> Series(<span style="color:#e6db74">&#34;最大值&#34;</span>);
    seriesMax.ChartType = SeriesChartType.Line;
    seriesMax.BorderWidth = <span style="color:#ae81ff">1</span>;
    seriesMax.ShadowOffset = <span style="color:#ae81ff">0</span>;
    seriesMax.IsVisibleInLegend = <span style="color:#66d9ef">true</span>;
    seriesMax.IsValueShownAsLabel = <span style="color:#66d9ef">false</span>;
    seriesMax.Color = Color.Red;
    seriesMax.XValueType = ChartValueType.DateTime;
    seriesMax.MarkerStyle = MarkerStyle.None;
    chart.Series.Add(seriesMax);

    <span style="color:#75715e">//设置X轴的最小值为第一个点的X坐标值  
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//chartArea.AxisX.Minimum = Convert.ToDateTime(dataTable.Rows[0][&#34;TheTime&#34;]).ToOADate();
</span><span style="color:#75715e"></span>
    <span style="color:#75715e">//开始画线  
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">foreach</span> (DataRow dr <span style="color:#66d9ef">in</span> dataTable.Rows)
    {
        tempSeries.Points.AddXY(dr[<span style="color:#e6db74">&#34;TheTime&#34;</span>], dr[<span style="color:#e6db74">&#34;TheValue&#34;</span>]);

        seriesMin.Points.AddXY(dr[<span style="color:#e6db74">&#34;TheTime&#34;</span>], <span style="color:#ae81ff">15</span>); <span style="color:#75715e">//设置下线为15  
</span><span style="color:#75715e"></span>        seriesMax.Points.AddXY(dr[<span style="color:#e6db74">&#34;TheTime&#34;</span>], <span style="color:#ae81ff">30</span>); <span style="color:#75715e">//设置上限为30  
</span><span style="color:#75715e"></span>    }
}
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>〖原创〗DoNet下大数据量导出到Excel</title>
            <link>https://sengmitnick.com/blog/84/</link>
            <pubDate>Wed, 12 Oct 2016 12:16:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/84/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;几十万级数据导出Excel代码，及简单使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文示例DEMO已上传到GitHub，点击&lt;a href=&#34;https://github.com/smk17/ExportToExcelText&#34;&gt;这里&lt;/a&gt;即可访问。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>几十万级数据导出Excel代码，及简单使用</p>
</blockquote>
<p>本文示例DEMO已上传到GitHub，点击<a href="https://github.com/smk17/ExportToExcelText">这里</a>即可访问。</p>
<h2 id="添加引用">添加引用</h2>
<p>添加Microsoft.Office.Interop.Excel引用，在我得示例DEMO得根目录下就有Microsoft.Office.Interop.Excel.dll 这个文件，下载我的DEMO复制这个DLL文件到你的项目并添加这个DLL到你得项目引用即可。</p>
<h2 id="excel类的简单介绍">Excel类的简单介绍</h2>
<p>此命名空间下关于Excel类的结构分别为：</p>
<blockquote>
<ul>
<li>ApplicationClass - 就是我们的excel应用程序。</li>
</ul>
</blockquote>
<ul>
<li>Workbook - 就是我们平常见的一个个excel文件，经常是使用Workbooks类对其进行操作。</li>
<li>Worksheet - 就是excel文件中的一个个sheet页。
Worksheet.Cells[row, column] - 就是某行某列的单元格，注意这里的下标row和column都是从1开始的，跟我平常用的数组或集合的下标有所不同。
知道了上述基本知识后，利用此类来操作excel就清晰了很多。</li>
</ul>
<h2 id="另存为功能代码">&ldquo;另存为&quot;功能代码</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-CSHARP" data-lang="CSHARP">SaveFileDialog saveFileDialog = <span style="color:#66d9ef">new</span> SaveFileDialog();
<span style="color:#75715e">//设置文件类型
</span><span style="color:#75715e"></span>saveFileDialog.Filter = <span style="color:#e6db74">&#34;xlsx files(*.xlsx)|*.xlsx|xls files(*.xls)|*.xls|All files(*.*)|*.*&#34;</span>;
<span style="color:#75715e">//设置默认文件名（可以不设置）
</span><span style="color:#75715e"></span>saveFileDialog.FileName = <span style="color:#e6db74">&#34;ExportToExcelText-&#34;</span> + DateTime.Now.ToString(<span style="color:#e6db74">&#34;yyyyMMdd&#34;</span>);
<span style="color:#75715e">//主设置默认文件extension（可以不设置）
</span><span style="color:#75715e"></span>saveFileDialog.DefaultExt = <span style="color:#e6db74">&#34;xlsx&#34;</span>;
<span style="color:#75715e">//获取或设置一个值，该值指示如果用户省略扩展名，文件对话框是否自动在文件名中添加扩展名。（可以不设置）
</span><span style="color:#75715e"></span>saveFileDialog.AddExtension = <span style="color:#66d9ef">true</span>;
<span style="color:#75715e">//保存对话框是否记忆上次打开的目录
</span><span style="color:#75715e"></span>saveFileDialog.RestoreDirectory = <span style="color:#66d9ef">true</span>;
/ Show save file dialog box
DialogResult result = saveFileDialog.ShowDialog();
<span style="color:#75715e">//点了保存按钮进入
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (result == DialogResult.OK)
{
    DataTable dt = <span style="color:#66d9ef">new</span> DataTable();
    dt.Columns.Add(<span style="color:#e6db74">&#34;Name&#34;</span>, <span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>));
    dt.Columns.Add(<span style="color:#e6db74">&#34;Age&#34;</span>, <span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>));
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; <span style="color:#ae81ff">10</span>; i++)
    {
        DataRow dr = dt.NewRow();
        dr[<span style="color:#e6db74">&#34;Name&#34;</span>] = <span style="color:#e6db74">&#34;spring&#34;</span> + i.ToString();
        dr[<span style="color:#e6db74">&#34;Age&#34;</span>] = <span style="color:#e6db74">&#34;2&#34;</span> + i.ToString();
        dt.Rows.Add(dr);
    }
    dt.AcceptChanges();
    ExcelUtil.ExportToExcel(dt, saveFileDialog.FileName.ToString());
</code></pre></div><p>本文示例导出到Excel的最终效果：</p>



  <figure>
    <a href="/blog/84/1.jpg" target="_blank">
      <img src="/blog/84/1.jpg" alt="效果图"/>
      <figcaption><p>效果图</p></figcaption>
    </a>
    
  </figure>

<h2 id="导出excel功能代码"><strong>导出Excel</strong>功能代码</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-CSHARP" data-lang="CSHARP"><span style="color:#66d9ef">using</span> Microsoft.Office.Interop.Excel;
<span style="color:#66d9ef">using</span> System;

<span style="color:#66d9ef">namespace</span> ExportToExcelText
{
    <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExcelUtil</span>
    {
        System.Data.DataTable table11 = <span style="color:#66d9ef">new</span> System.Data.DataTable();

        <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> ExportToExcel(System.Data.DataTable table, <span style="color:#66d9ef">string</span> saveFileName)
        {

            <span style="color:#66d9ef">bool</span> fileSaved = <span style="color:#66d9ef">false</span>;

            <span style="color:#75715e">//ExcelApp xlApp = new ExcelApp();
</span><span style="color:#75715e"></span>
            Application xlApp = <span style="color:#66d9ef">new</span> Application();

            <span style="color:#66d9ef">if</span> (xlApp == <span style="color:#66d9ef">null</span>)
            {
                <span style="color:#66d9ef">return</span> fileSaved;
            }

            Workbooks workbooks = xlApp.Workbooks;
            Workbook workbook = workbooks.Add(XlWBATemplate.xlWBATWorksheet);
            Worksheet worksheet = (Worksheet)workbook.Worksheets[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">//取得sheet1
</span><span style="color:#75715e"></span>
            <span style="color:#66d9ef">long</span> rows = table.Rows.Count;

            <span style="color:#75715e">/*下边注释的两行代码当数据行数超过行时，出现异常：异常来自HRESULT:0x800A03EC。因为：Excel 2003每个sheet只支持最大行数据
</span><span style="color:#75715e">
</span><span style="color:#75715e">            //Range fchR = worksheet.Range[worksheet.Cells[1, 1], worksheet.Cells[table.Rows.Count+2, gridview.Columns.View.VisibleColumns.Count+1]];
</span><span style="color:#75715e">
</span><span style="color:#75715e">            //fchR.Value2 = datas;*/</span>

            <span style="color:#66d9ef">if</span> (rows &gt; <span style="color:#ae81ff">65535</span>)
            {

                <span style="color:#66d9ef">long</span> pageRows = <span style="color:#ae81ff">60000</span>;<span style="color:#75715e">//定义每页显示的行数,行数必须小于60000
</span><span style="color:#75715e"></span>
                <span style="color:#66d9ef">int</span> scount = (<span style="color:#66d9ef">int</span>)(rows / pageRows);

                <span style="color:#66d9ef">if</span> (scount * pageRows &lt; table.Rows.Count)<span style="color:#75715e">//当总行数不被pageRows整除时，经过四舍五入可能页数不准
</span><span style="color:#75715e"></span>                {
                    scount = scount + <span style="color:#ae81ff">1</span>;
                }

                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> sc = <span style="color:#ae81ff">1</span>; sc &lt;= scount; sc++)
                {
                    <span style="color:#66d9ef">if</span> (sc &gt; <span style="color:#ae81ff">1</span>)
                    {

                        <span style="color:#66d9ef">object</span> missing = System.Reflection.Missing.Value;

                        worksheet = workbook.Worksheets.Add(

                       missing, missing, missing, missing);<span style="color:#75715e">//添加一个sheet
</span><span style="color:#75715e"></span>
                    }

                    <span style="color:#66d9ef">else</span>
                    {
                        worksheet = (Worksheet)workbook.Worksheets[sc];<span style="color:#75715e">//取得sheet1
</span><span style="color:#75715e"></span>                    }

                    <span style="color:#66d9ef">string</span>[,] datas = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[pageRows + <span style="color:#ae81ff">1</span>, table.Columns.Count + <span style="color:#ae81ff">1</span>];

                    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; table.Columns.Count; i++) <span style="color:#75715e">//写入字段
</span><span style="color:#75715e"></span>                    {
                        datas[<span style="color:#ae81ff">0</span>, i] = table.Columns[i].Caption;
                    }

                    Range range = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[<span style="color:#ae81ff">1</span>, table.Columns.Count]];
                    range.Interior.ColorIndex = <span style="color:#ae81ff">15</span>;<span style="color:#75715e">//15代表灰色
</span><span style="color:#75715e"></span>                    range.Font.Bold = <span style="color:#66d9ef">true</span>;
                    range.Font.Size = <span style="color:#ae81ff">9</span>;

                    <span style="color:#66d9ef">int</span> init = <span style="color:#66d9ef">int</span>.Parse(((sc - <span style="color:#ae81ff">1</span>) * pageRows).ToString());
                    <span style="color:#66d9ef">int</span> r = <span style="color:#ae81ff">0</span>;
                    <span style="color:#66d9ef">int</span> index = <span style="color:#ae81ff">0</span>;
                    <span style="color:#66d9ef">int</span> result;

                    <span style="color:#66d9ef">if</span> (pageRows * sc &gt;= table.Rows.Count)
                    {
                        result = table.Rows.Count;
                    }
                    <span style="color:#66d9ef">else</span>
                    {
                        result = <span style="color:#66d9ef">int</span>.Parse((pageRows * sc).ToString());
                    }
                    <span style="color:#66d9ef">for</span> (r = init; r &lt; result; r++)
                    {
                        index = index + <span style="color:#ae81ff">1</span>;
                        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; table.Columns.Count; i++)
                        {
                            <span style="color:#66d9ef">if</span> (table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>) || table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(Decimal) || table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(DateTime))
                            {
                                <span style="color:#66d9ef">object</span> obj = table.Rows[r][table.Columns[i].ColumnName];
                                datas[index, i] = obj == <span style="color:#66d9ef">null</span> ? <span style="color:#e6db74">&#34;&#34;</span> : <span style="color:#e6db74">&#34;&#39;&#34;</span> + obj.ToString().Trim();<span style="color:#75715e">//在obj.ToString()前加单引号是为了防止自动转化格式
</span><span style="color:#75715e"></span>
                            }

                        }
                    }

                    Range fchR = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[index + <span style="color:#ae81ff">2</span>, table.Columns.Count + <span style="color:#ae81ff">1</span>]];

                    fchR.Value2 = datas;
                    worksheet.Columns.EntireColumn.AutoFit();<span style="color:#75715e">//列宽自适应。
</span><span style="color:#75715e"></span>
                    range = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[index + <span style="color:#ae81ff">1</span>, table.Columns.Count]];

                    <span style="color:#75715e">//15代表灰色
</span><span style="color:#75715e"></span>
                    range.Font.Size = <span style="color:#ae81ff">9</span>;
                    range.RowHeight = <span style="color:#ae81ff">14.25</span>;
                    range.Borders.LineStyle = <span style="color:#ae81ff">1</span>;
                    range.HorizontalAlignment = <span style="color:#ae81ff">1</span>;

                }

            }

            <span style="color:#66d9ef">else</span>
            {

                <span style="color:#66d9ef">string</span>[,] datas = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[table.Rows.Count + <span style="color:#ae81ff">2</span>, table.Columns.Count + <span style="color:#ae81ff">1</span>];
                <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; table.Columns.Count; i++) <span style="color:#75715e">//写入字段         
</span><span style="color:#75715e"></span>                {
                    datas[<span style="color:#ae81ff">0</span>, i] = table.Columns[i].Caption;
                }

                Range range = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[<span style="color:#ae81ff">1</span>, table.Columns.Count]];
                range.Interior.ColorIndex = <span style="color:#ae81ff">15</span>;<span style="color:#75715e">//15代表灰色
</span><span style="color:#75715e"></span>                range.Font.Bold = <span style="color:#66d9ef">true</span>;
                range.Font.Size = <span style="color:#ae81ff">9</span>;

                <span style="color:#66d9ef">int</span> r = <span style="color:#ae81ff">0</span>;
                <span style="color:#66d9ef">for</span> (r = <span style="color:#ae81ff">0</span>; r &lt; table.Rows.Count; r++)
                {
                    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; table.Columns.Count; i++)
                    {
                        <span style="color:#66d9ef">if</span> (table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(<span style="color:#66d9ef">string</span>) || table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(Decimal) || table.Columns[i].DataType == <span style="color:#66d9ef">typeof</span>(DateTime))
                        {
                            <span style="color:#66d9ef">object</span> obj = table.Rows[r][table.Columns[i].ColumnName];
                            datas[r + <span style="color:#ae81ff">1</span>, i] = obj == <span style="color:#66d9ef">null</span> ? <span style="color:#e6db74">&#34;&#34;</span> : <span style="color:#e6db74">&#34;&#39;&#34;</span> + obj.ToString().Trim();<span style="color:#75715e">//在obj.ToString()前加单引号是为了防止自动转化格式
</span><span style="color:#75715e"></span>
                        }

                    }

                    <span style="color:#75715e">//System.Windows.Forms.Application.DoEvents();
</span><span style="color:#75715e"></span>
                }

                Range fchR = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[table.Rows.Count + <span style="color:#ae81ff">2</span>, table.Columns.Count + <span style="color:#ae81ff">1</span>]];

                fchR.Value2 = datas;

                worksheet.Columns.EntireColumn.AutoFit();<span style="color:#75715e">//列宽自适应。
</span><span style="color:#75715e"></span>
                range = worksheet.Range[worksheet.Cells[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], worksheet.Cells[table.Rows.Count + <span style="color:#ae81ff">1</span>, table.Columns.Count]];

                <span style="color:#75715e">//15代表灰色
</span><span style="color:#75715e"></span>
                range.Font.Size = <span style="color:#ae81ff">9</span>;
                range.RowHeight = <span style="color:#ae81ff">14.25</span>;
                range.Borders.LineStyle = <span style="color:#ae81ff">1</span>;
                range.HorizontalAlignment = <span style="color:#ae81ff">1</span>;
            }

            <span style="color:#66d9ef">if</span> (saveFileName != <span style="color:#e6db74">&#34;&#34;</span>)
            {
                <span style="color:#66d9ef">try</span>
                {
                    workbook.Saved = <span style="color:#66d9ef">true</span>;
                    workbook.SaveCopyAs(saveFileName);
                    fileSaved = <span style="color:#66d9ef">true</span>;

                }

                <span style="color:#66d9ef">catch</span> (Exception ex)
                {
                    fileSaved = <span style="color:#66d9ef">false</span>;
                }

            }

            <span style="color:#66d9ef">else</span>
            {

                fileSaved = <span style="color:#66d9ef">false</span>;

            }

            xlApp.Quit();

            GC.Collect();<span style="color:#75715e">//强行销毁 
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> fileSaved;
        }
    }
}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>MAC下把PNG、JPG等图片矢量化</title>
            <link>https://sengmitnick.com/blog/83/</link>
            <pubDate>Sat, 02 Apr 2016 05:21:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/83/</guid>
            <description>&lt;p&gt;最近，开始慢慢从Eclipse转到Android Studio，而在其中我就打算新的APP里面的图标全部使用矢量图（AS新建项目默认兼容包支持vector），那么，就会涉及到一个问题，以前使用的图片多数都是PNG格式，而现在则需要改成SVG然后弄到AS上面。&lt;/p&gt;
&lt;p&gt;一开始，在线有PNG转SVG的，传送门：&lt;a href=&#34;http://cn.office-converter.com/Online-Image-Converter&#34;&gt;http://cn.office-converter.com/Online-Image-Converter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，在线上传是需要时间的，所以后来又研究怎么本地转换，经过多次尝试，终于找到解决方案了。&lt;/p&gt;
&lt;p&gt;在这里，就需要一个命令行工具了，下载传送门：&lt;a href=&#34;http://potrace.sourceforge.net&#34;&gt;http://potrace.sourceforge.net&lt;/a&gt; ；&lt;/p&gt;
&lt;p&gt;有在MAC上面安卓了brew的可以执行下面命令行安装即可：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最近，开始慢慢从Eclipse转到Android Studio，而在其中我就打算新的APP里面的图标全部使用矢量图（AS新建项目默认兼容包支持vector），那么，就会涉及到一个问题，以前使用的图片多数都是PNG格式，而现在则需要改成SVG然后弄到AS上面。</p>
<p>一开始，在线有PNG转SVG的，传送门：<a href="http://cn.office-converter.com/Online-Image-Converter">http://cn.office-converter.com/Online-Image-Converter</a></p>
<p>但是，在线上传是需要时间的，所以后来又研究怎么本地转换，经过多次尝试，终于找到解决方案了。</p>
<p>在这里，就需要一个命令行工具了，下载传送门：<a href="http://potrace.sourceforge.net">http://potrace.sourceforge.net</a> ；</p>
<p>有在MAC上面安卓了brew的可以执行下面命令行安装即可：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install potrace
</code></pre></div><p>然而，该工具只支持将BMP转换成EPS，我的方法是先在MAC上面新建一个服务，可以把所有图片格式转成BMP格式，具体实现方法在这里，传送门：<a href="http://www.macx.cn/thread-2060748-1-1.html">OS X 下快速转换图片格式 </a> 然后打开终端执行命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">potrace <span style="color:#f92672">[</span>文件名<span style="color:#f92672">]</span>.bmp
</code></pre></div><p>然后，EPS转SVG呢我是用Sketch来着的。</p>
<blockquote>
<p>PS:在转换过程中，发现之前做的一些图标转换效果不好，原因是这一类都是用细线画的，而且细线还是白色，后来把细线换其它的深色即可。</p>
</blockquote>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>ticwatch手表版本更新一直提示“网络出错，请重试”</title>
            <link>https://sengmitnick.com/blog/82/</link>
            <pubDate>Fri, 26 Feb 2016 14:16:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/82/</guid>
            <description>&lt;p&gt;先按照这里&lt;a href=&#34;http://tieba.baidu.com/p/3958584181&#34;&gt;http://tieba.baidu.com/p/3958584181&lt;/a&gt;把手表连接到有网络的WiFi&lt;/p&gt;
&lt;p&gt;然后断开手表与手机的蓝牙连接&lt;/p&gt;
&lt;p&gt;现在，你再版本更新就可以了。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>先按照这里<a href="http://tieba.baidu.com/p/3958584181">http://tieba.baidu.com/p/3958584181</a>把手表连接到有网络的WiFi</p>
<p>然后断开手表与手机的蓝牙连接</p>
<p>现在，你再版本更新就可以了。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>CocoaPods安装教程</title>
            <link>https://sengmitnick.com/blog/81/</link>
            <pubDate>Sun, 24 Jan 2016 13:06:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/81/</guid>
            <description>&lt;h2 id=&#34;更新&#34;&gt;更新&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ruby.taobao.org/&#34;&gt;https://ruby.taobao.org/&lt;/a&gt; 已弃用，请使用 &lt;a href=&#34;https://gems.ruby-china.org/&#34;&gt;https://gems.ruby-china.org/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://gems.ruby-china.org
&lt;span style=&#34;color:#75715e&#34;&gt;# 请确保只有 gems.ruby-china.org&lt;/span&gt;
$ gem install rails
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如何下载和安装cocoapods&#34;&gt;如何下载和安装CocoaPods？&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;</description>
            <content type="html"><![CDATA[<h2 id="更新">更新</h2>
<p><a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a> 已弃用，请使用 <a href="https://gems.ruby-china.org/">https://gems.ruby-china.org/</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://gems.ruby-china.org
<span style="color:#75715e"># 请确保只有 gems.ruby-china.org</span>
$ gem install rails
</code></pre></div><h2 id="如何下载和安装cocoapods">如何下载和安装CocoaPods？</h2>
<!-- raw HTML omitted -->
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gem sources --remove https://rubygems.org/
<span style="color:#75715e">## 等有反应之后再敲入以下命令</span>
gem sources -a https://ruby.taobao.org/&lt;br /&gt;#注意：淘宝的Ruby镜像链接是https开头，而网上的大部分教程写的都是http，坑爹啊~~
</code></pre></div><p>为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gem sources -l
</code></pre></div><p>只有在终端中出现下面文字才表明你上面的命令是成功的：</p>
<pre><code>*** CURRENT SOURCES ***

https://ruby.taobao.org/
</code></pre><p>这时候，你再次在终端中运行：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo gem install cocoapods
</code></pre></div><p>等上十几秒钟，CocoaPods就可以在你本地下载并且安装好了，不再需要其他设置。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Parallels Desktop的安装和使用心得</title>
            <link>https://sengmitnick.com/blog/80/</link>
            <pubDate>Thu, 24 Dec 2015 13:13:27 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/80/</guid>
            <description>&lt;p&gt;买了MacBook Air后，想了想还是在电脑装个虚拟机的好，然而我已经使用BootCamp装了Win10，在度娘的查询下，毅然选择了Parallels Desktop这一款。&lt;/p&gt;
&lt;p&gt;对于身为天朝的百姓，怎么可能使用正版呢？况且网上也说正版的态度不好云云的，就更加让俺要用破解版了。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>买了MacBook Air后，想了想还是在电脑装个虚拟机的好，然而我已经使用BootCamp装了Win10，在度娘的查询下，毅然选择了Parallels Desktop这一款。</p>
<p>对于身为天朝的百姓，怎么可能使用正版呢？况且网上也说正版的态度不好云云的，就更加让俺要用破解版了。</p>
<p>然而不知道什么原因，在度娘上面搜索的不是连接取消就是链接到正版的！</p>
<p><!-- raw HTML omitted --></p>
<p>既然度娘不给力那只能求助强大的谷歌了，在谷歌下面搜索一下子一堆链接出来了。</p>
<p><!-- raw HTML omitted --></p>
<p>我就直接点第一个了（http://softasm.com/parallels-desktop-11-full-version-cracked-mac-osx/），</p>
<p>进去页面后下载了下来，发现在国内资源少得很，下载很慢，不怕，有迅雷的离线下载，一下子就好了。</p>
<p>下载完成后在断网的情况下安装了，测试了下，杠杠哒：</p>
<p><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --></p>
<p>联网后怎么办？果断修改hosts文件屏蔽啊！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Block the following domains:
- Open the Terminal
- Enter command sudo nano /etc/hosts
- Enter the password <span style="color:#66d9ef">for</span> the Administrator
- Insert the cursor in a blank line and enter:

127.0.0.1     registration.parallels.com
127.0.0.1     webservices.pdfm10.parallels.com
127.0.0.1     vl.pdfm10.parallels.com
127.0.0.1     account.parallels.com
127.0.0.1     blist.parallels.com
127.0.0.1     blist.pdfm10.parallels.com
127.0.0.1     update.parallels.com
127.0.0.1     gp1.wpc.v2cdn.net
127.0.0.1     report.parallels.com
127.0.0.1     01-274b-0023.cdx.cedexis.net
127.0.0.1     c1016.glblcdn.net
127.0.0.1     wpc.051c.edgecastcdn.net

- Then press:
Ctrl+O -&amp;gt; Enter -&amp;gt; Ctrl+X


- Mount image and run the installer
- Follow the instructions of the installer.
* Do not update program!

Notes:
Block outgoing connections <span style="color:#f92672">(</span>Little Snitch, Hands Off!.. or something like that<span style="color:#f92672">)</span>
Disable automatic update checks

If you install and when you first start you will see the <span style="color:#e6db74">&#34;About the activation ...&#34;</span>, you should <span style="color:#66d9ef">do</span> the following:
- completely close the program
- Delete the file licenses.xml the following path:
/Library/Preferences/Parallels/licenses.xml
</code></pre></div><p>用Parallels成功运行了BootCamp里的Win10，只不过我的Win110又得重新激活了。</p>
<p><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p><!-- raw HTML omitted --></p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>vs2010编译报错，未能将obj/..复制到bin/..,bin/...文件正被另一进程时候用</title>
            <link>https://sengmitnick.com/blog/79/</link>
            <pubDate>Tue, 22 Dec 2015 13:34:27 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/79/</guid>
            <description>&lt;p&gt;买了小白后安装win10后，安装vs2010后导入原先的项目突然报错（原先的项目调试运行是没问题的）
错误 12 未能将“obj\Debug*&lt;em&gt;.exe”复制到“bin*&lt;/em&gt;.exe”。超出了重试计数 10。失败。
错误 13 无法将文件“obj\Debug*&lt;em&gt;.exe”复制到“bin*&lt;/em&gt;.exe”。文件“bin**.exe”正由另一进程使用，因此该进程无法访问此文件。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>买了小白后安装win10后，安装vs2010后导入原先的项目突然报错（原先的项目调试运行是没问题的）
错误 12 未能将“obj\Debug*<em>.exe”复制到“bin*</em>.exe”。超出了重试计数 10。失败。
错误 13 无法将文件“obj\Debug*<em>.exe”复制到“bin*</em>.exe”。文件“bin**.exe”正由另一进程使用，因此该进程无法访问此文件。</p>
<p>如果我把bin和debug手动全删掉，第一次会生成成功，但接下来就会报上述错误。</p>
<p> </p>
<p>在找了度娘后然并卵，参考了里面说的解决方法自己乱打乱撞搞掂了</p>
<p>解决方法是打开项目属性切换到<strong>生成</strong>，把x86改成x64，然后重新生成，再换到x86在重新生成就OK了。不过我是64位的Win10，不知道这样子弄了之后可不可以在32位的系统上面用。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Android Studio 在内网的使用方法（离线使用gradle）</title>
            <link>https://sengmitnick.com/blog/78/</link>
            <pubDate>Sat, 06 Jun 2015 02:59:24 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/78/</guid>
            <description>&lt;p&gt;转载自：&lt;a href=&#34;http://blog.csdn.net/fengyun14/article/details/8952410&#34;&gt;http://blog.csdn.net/fengyun14/article/details/8952410&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Studio，在15号左右发布了，这让程序猿们都很高兴，我也马上下载，并安装了，期间遇到了很多困难，汇总如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>转载自：<a href="http://blog.csdn.net/fengyun14/article/details/8952410">http://blog.csdn.net/fengyun14/article/details/8952410</a></p>
<p>Android Studio，在15号左右发布了，这让程序猿们都很高兴，我也马上下载，并安装了，期间遇到了很多困难，汇总如下：</p>
<h2 id="无法运行问题">无法运行问题。</h2>
<p>悲剧的是，我家里的XP无法运行，后来看了别人的文章（很高兴，这么快就有人写心得了），才知道原因，但主要原因：</p>
<p>需要增加 ANDROID_HOME 变量，看说明是，只要有JAVA_HOME就行，但实际却是，增加了这个 ANDROID_HOME 就好了。</p>
<h2 id="无法显示中文问题">无法显示中文问题</h2>
<p>File &raquo; Settings &raquo; Appearance，将后面的默认字体改为：SimSun ，然后重启软件就行了。</p>
<h2 id="内网运行无法下载gradle问题">内网运行，无法下载gradle问题</h2>
<p>因为在内网运行，所以无法互联网，下载gradle，可偏偏google要求联网下载。</p>
<p>问题，我最后解决了，但也不知道哪个步骤是关键，先写下来，大家试试吧</p>
<ol>
<li>从gradle网站上下载gradle。这里有问题注意事项：要下载gradle-1.6-all.zip（不要使用gradle-1.6-bin.zip），然后配置: GRADLE_HOME 和 path（指向%GRADLE_HOME/bin ）。</li>
</ol>
<p>有网站说，这样就OK了，但实际上，我却在创建实例时，出现了：fetch model of type ideaproject using gradle *** 的错误，原因我不知道，当时下载的是bin.zip，后来下载了all.zip，就好了。（期间也进行了其他动作，这不一定是关键原因）。</p>
<ol start="2">
<li>我把在互联网机器上调好的项目，包括文件夹： .gradle  、 .android一并拷了过来，然后，把测试的项目也import进来。</li>
</ol>
<p>实际运行情况是，系统一直导入，但不成功。</p>
<p>后来，我关闭了这个导入，并如上面所说，下载了gradle-1.6-all.zip，然后覆盖了原来的文件夹，之后软件重启，不知为何，好了。</p>
<p>未来这个 Android Studio，我安装了3台计算机，安装了4遍，才成功。故记录，以备忘，也给大家提醒。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>taglist无法定位tag</title>
            <link>https://sengmitnick.com/blog/70/</link>
            <pubDate>Wed, 04 Feb 2015 11:22:42 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/70/</guid>
            <description>&lt;p&gt;在使用vim插件taglist时，使用命令ctags –R后在打开源码文件的taglist窗口双击或者&lt;!-- raw HTML omitted --&gt;;后无法定位，经检测是文档格式问题。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>在使用vim插件taglist时，使用命令ctags –R后在打开源码文件的taglist窗口双击或者<!-- raw HTML omitted -->;后无法定位，经检测是文档格式问题。</p>
<p>使用以下命令即可</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">find -type f | xargs dos2unix --dos2unix --safe
</code></pre></div><p>或者</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">find -type f | xargs dos2unix –o
</code></pre></div><p>这样子一来就把当前tags的文件转化为Unix格式了。</p>
<p>然后再次更新tag。</p>
<p>PS：至于系统没有安装该命令的在终端应该有提示安装的，若没有自行度娘哈！</p>]]></content>
        </item>
        
        <item>
            <title>如何在Ubuntu上安装最新版本的Node.js</title>
            <link>https://sengmitnick.com/blog/69/</link>
            <pubDate>Wed, 04 Feb 2015 08:55:42 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/69/</guid>
            <description>&lt;p&gt;转载自http://blog.csdn.net/chszs/article/details/37521463。博客主页：http://blog.csdn.net/chszs&lt;/p&gt;
&lt;p&gt;Node.js是一个软件平台，通常用于构建大规模的服务器端应用。Node.js使用JavaScript作为其脚本语言，由于其非阻塞I/O设计以及单线程事件循环机制，使得它可以交付超高的性能。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>转载自http://blog.csdn.net/chszs/article/details/37521463。博客主页：http://blog.csdn.net/chszs</p>
<p>Node.js是一个软件平台，通常用于构建大规模的服务器端应用。Node.js使用JavaScript作为其脚本语言，由于其非阻塞I/O设计以及单线程事件循环机制，使得它可以交付超高的性能。</p>
<p>Node.js包含了Google V8 JavaScript引擎，libuv库和核心库几乎都是使用JavaScript编写的。libuv库提供了异步事件I/O的抽象和Node.js跨平台的机制。</p>
<p>Node.js最初是由Ryan Dahl创建的，目前由Isaac Schlueter在演进和维护。</p>
<p>在互联网上有很多从源码编译安装Node.js的文章，在此我强烈建议不要采用这种方法。大多数情况下，包维护者对软件结构了解的非常清楚，开发者无需从头编译最新版本的源码。</p>
<p>下面的方法适用于最新版本的Ubuntu、Ubuntu 12.04 LTS、Ubuntu 12.10、Ubuntu 13.04等版本。它可以帮助开发者在Ubuntu上安装Node.js，无需从头编译安装。你可以在云主机上执行以下的命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">apt-get update  
apt-get install -y python-software-properties software-properties-common  
add-apt-repository ppa:chris-lea/node.js  
apt-get update  
apt-get install nodejs
</code></pre></div><p>一旦命令执行完，最新版本的Node.js就安装好了，需有任何担忧。一旦Node.js的新版本发布了，你可以直接从包管理器升级，无需从头再次编译安装。</p>]]></content>
        </item>
        
        <item>
            <title>〖原创〗安装或更新战网时出现一直是“正在安装战网...(0%)”</title>
            <link>https://sengmitnick.com/blog/67/</link>
            <pubDate>Mon, 01 Dec 2014 02:26:49 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/67/</guid>
            <description>&lt;p&gt;问题描述：安装战网时出现一直是“正在安装战网&amp;hellip;(0%)”&lt;/p&gt;
&lt;p&gt;或者更新战网时出现一直是“正在更新工具&amp;hellip;(0%)”&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>问题描述：安装战网时出现一直是“正在安装战网&hellip;(0%)”</p>
<p>或者更新战网时出现一直是“正在更新工具&hellip;(0%)”</p>
<p><!-- raw HTML omitted --></p>
<p> </p>
<p>解决方法：IE浏览器=&gt;工具=&gt; inteunet选项=&gt;连接=&gt;局域网设置 =&gt;取消自动检测设置的选项；</p>
<p>保存后重启客户端就行了。具体操作如下：</p>
<p>1.IE浏览器=&gt;工具=&gt; inteunet选项；</p>
<p><!-- raw HTML omitted --></p>
<ol start="2">
<li>inteunet选项=&gt;连接=&gt;局域网设置；</li>
</ol>
<p><!-- raw HTML omitted --></p>
<p>3.局域网设置 =&gt;取消自动检测设置的选项；</p>
<p><!-- raw HTML omitted --></p>
<p>4.保存后重启客户端。</p>]]></content>
        </item>
        
        <item>
            <title>启动 Eclipse 弹出“Failed to load the JNI shared library jvm.dll”</title>
            <link>https://sengmitnick.com/blog/65/</link>
            <pubDate>Sun, 30 Nov 2014 10:41:08 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/65/</guid>
            <description>&lt;p&gt;最近安装了64位的win7，安装好Java SDK x64并配置好环境变量后，启动 Eclipse 居然弹出“Failed to load the JNI shared library jvm.dll”的错误提示。
由于之前是32位系统，所以Eclipse也是32的。所以，该错误应该是eclipse的版本与jre或者jdk版本不一致导致的。&lt;/p&gt;
&lt;p&gt;解决方法：要么两者都安装64位的，要么都安装32位的，不能一个是32位一个是64位。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最近安装了64位的win7，安装好Java SDK x64并配置好环境变量后，启动 Eclipse 居然弹出“Failed to load the JNI shared library jvm.dll”的错误提示。
由于之前是32位系统，所以Eclipse也是32的。所以，该错误应该是eclipse的版本与jre或者jdk版本不一致导致的。</p>
<p>解决方法：要么两者都安装64位的，要么都安装32位的，不能一个是32位一个是64位。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>UDP服务器接收超时处理事件</title>
            <link>https://sengmitnick.com/blog/59/</link>
            <pubDate>Wed, 26 Nov 2014 15:53:46 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/59/</guid>
            <description>&lt;p&gt;近段时间，因项目需求，需要在ubuntu下用到UDP服务器接收数据并处理。&lt;/p&gt;
&lt;p&gt;其中，接收到数据的时候处理一个事件，而长时间没接收到数据时有处理另一个事件。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>近段时间，因项目需求，需要在ubuntu下用到UDP服务器接收数据并处理。</p>
<p>其中，接收到数据的时候处理一个事件，而长时间没接收到数据时有处理另一个事件。</p>
<p>经过一段时间的尝试，发现最优的办法就是使用alarm函数了。以下是示例代码。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;signal.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;udp_server.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">//接收超时处理事件
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">timeout</span>()
{  
    printf( <span style="color:#e6db74">&#34;timeout ...... </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> );
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
	<span style="color:#66d9ef">int</span> sock,recv_size;
	<span style="color:#66d9ef">char</span> msg[<span style="color:#ae81ff">1024</span>];
	UdpServer <span style="color:#f92672">*</span>server<span style="color:#f92672">=</span>UdpServer_create(<span style="color:#ae81ff">8000</span>);<span style="color:#75715e">// 创建Udp服务器，绑定ip为本机ip，绑定端口8000端口
</span><span style="color:#75715e"></span>	memset(mybuf,<span style="color:#e6db74">&#39;\0&#39;</span>,strlen(mybuf));
	signal( SIGALRM, timeout );
	alarm( <span style="color:#ae81ff">30</span> ); <span style="color:#75715e">//设置超时时间
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>)
	{
		printf(<span style="color:#e6db74">&#34;wait .....</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

		recv_size <span style="color:#f92672">=</span> server<span style="color:#f92672">-&gt;</span>recv(server,msg,<span style="color:#ae81ff">1024</span>);  <span style="color:#75715e">//接收信息
</span><span style="color:#75715e"></span>		printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,msg);
		<span style="color:#66d9ef">if</span> (recv_size) {			
			alarm( <span style="color:#ae81ff">30</span> ); 	<span style="color:#75715e">//成功接收到数据重新设置超时时间
</span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span>(strcmp(msg,<span style="color:#e6db74">&#34;exit&#34;</span>)<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">break</span>;
			<span style="color:#75715e">//接收数据处理事件
</span><span style="color:#75715e"></span>			printf(<span style="color:#e6db74">&#34;msg:</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, msg);
		}       
		server<span style="color:#f92672">-&gt;</span>send(server,msg);  <span style="color:#75715e">//发送信息
</span><span style="color:#75715e"></span>    }    
   server<span style="color:#f92672">-&gt;</span>destory(server);
}
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>基于SHT3x传感器开发的C51程序</title>
            <link>https://sengmitnick.com/blog/56/</link>
            <pubDate>Fri, 29 Aug 2014 12:28:29 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/56/</guid>
            <description>&lt;p&gt;其中，在看数据手册时发现一个问题：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>其中，在看数据手册时发现一个问题：</p>
  <figure>
    <a href="/blog/56/1.png" target="_blank">
      <img src="/blog/56/1.png" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

<p>从中可以知道，<code>ADDR</code>的地址为<code>0x44</code>,但是在写程序的时候一直没有应答，这个问题使我非常疑惑，直到后来才发现，I2C的地址应该使用7位来表示，最后一位为读写位，即若进行写操作地址应该为<code>0x44&lt;&lt;1 + 0 = 0x88</code>，进行读操作地址应该为<code>0x44&lt;&lt;1 + 1 = 0x89</code>。</p>]]></content>
        </item>
        
        <item>
            <title>Ubuntu引导菜单损坏利用chroot修复</title>
            <link>https://sengmitnick.com/blog/61/</link>
            <pubDate>Wed, 28 May 2014 08:50:30 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/61/</guid>
            <description>&lt;p&gt;用U盘制作Ubuntu LiveCD，U盘启动进入镜像系统。&lt;/p&gt;
&lt;p&gt;打开Terminal终端，输入以下命令：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>用U盘制作Ubuntu LiveCD，U盘启动进入镜像系统。</p>
<p>打开Terminal终端，输入以下命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#1、提升root权限</span>
sudo -i
<span style="color:#75715e">#2、查看磁盘列表</span>
fdisk -l#（该命令会显示当前磁盘列表，找到Ubuntu根分区，假设为sda2<span style="color:#f92672">)</span>
<span style="color:#75715e">#3、挂载根分区</span>
mkdir /mnt/temp
mount /dev/sda2 /mnt/temp <span style="color:#75715e">#(根分区/dev/sda2需据实际情况确定)</span>
<span style="color:#75715e">#4、挂载boot分区</span>
mount /dev/sda3 /mnt/temp/boot <span style="color:#75715e">#（如果有/boot分区，假设为sda3，如果无/boot独立分区则跳过本步骤）</span>
<span style="color:#75715e">#5、挂载系统目录</span>
<span style="color:#66d9ef">for</span> i in /dev /dev/pts /proc /sys; <span style="color:#66d9ef">do</span> sudo mount -B $i /mnt/temp$i; <span style="color:#66d9ef">done</span> <span style="color:#75715e">#(挂载系统目录)</span>
<span style="color:#75715e">#6、进入原系统</span>
chroot /mnt/temp <span style="color:#75715e">#(Chroot进入原系统)</span>
<span style="color:#75715e">#7、重装grub到MBR</span>
grub-install /dev/sda
update-grub
<span style="color:#75715e">#8、退出原系统</span>
exit
<span style="color:#75715e">#9、重启电脑</span>
</code></pre></div><p>然后重启就可以了。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>WIN2003&#43;IIS6&#43;PHP5.3.8的安装配置</title>
            <link>https://sengmitnick.com/blog/47/</link>
            <pubDate>Wed, 28 May 2014 07:28:52 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/47/</guid>
            <description>&lt;h2 id=&#34;安装好iis&#34;&gt;安装好IIS&lt;/h2&gt;
&lt;h3 id=&#34;安装internet信息服务iis&#34;&gt;安装Internet信息服务（IIS）&lt;/h3&gt;
&lt;p&gt;打开“控制面板”，然后单击启动 “添加/删除程序”， 在弹出的对话框中选择 “添加/删除Windows组件”，在Windows组件向导对话框中选中“Internet信息服务（IIS）”，然后单击“下一步”，按向导指示，完成对IIS的安装。



  &lt;figure&gt;
    &lt;a href=&#34;https://sengmitnick.com/blog/47/01.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://sengmitnick.com/blog/47/01.jpg&#34; alt=&#34;图1—windows组件向导1&#34;/&gt;
      &lt;figcaption&gt;&lt;p&gt;图1—windows组件向导1&lt;/p&gt;&lt;/figcaption&gt;
    &lt;/a&gt;
    
  &lt;/figure&gt;




  &lt;figure&gt;
    &lt;a href=&#34;https://sengmitnick.com/blog/47/02.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://sengmitnick.com/blog/47/02.jpg&#34; alt=&#34;图2—windows组件向导2&#34;/&gt;
      &lt;figcaption&gt;&lt;p&gt;图2—windows组件向导2&lt;/p&gt;&lt;/figcaption&gt;
    &lt;/a&gt;
    
  &lt;/figure&gt;
&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="安装好iis">安装好IIS</h2>
<h3 id="安装internet信息服务iis">安装Internet信息服务（IIS）</h3>
<p>打开“控制面板”，然后单击启动 “添加/删除程序”， 在弹出的对话框中选择 “添加/删除Windows组件”，在Windows组件向导对话框中选中“Internet信息服务（IIS）”，然后单击“下一步”，按向导指示，完成对IIS的安装。



  <figure>
    <a href="/blog/47/01.jpg" target="_blank">
      <img src="/blog/47/01.jpg" alt="图1—windows组件向导1"/>
      <figcaption><p>图1—windows组件向导1</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/47/02.jpg" target="_blank">
      <img src="/blog/47/02.jpg" alt="图2—windows组件向导2"/>
      <figcaption><p>图2—windows组件向导2</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="启动internet信息服务iis">启动Internet信息服务（IIS）</h3>
<p>Internet信息服务简称为IIS，单击Windows开始菜单&mdash;所有程序&mdash;管理工具&mdash;Internet信息服务（IIS）管理器，即可启动“Internet信息服务”管理工具（如图3）



  <figure>
    <a href="/blog/47/03.jpg" target="_blank">
      <img src="/blog/47/03.jpg" alt="图3—Internet信息服务（IIS）管理器"/>
      <figcaption><p>图3—Internet信息服务（IIS）管理器</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="配置internet信息服务iis">配置Internet信息服务（IIS）</h3>
<p>IIS安装后，系统自动创建了一个默认的Web站点，该站点的主目录默认为C:\Inetpub\www.root。</p>
<p>用鼠标右键单击“默认Web站点”，在弹出的快捷菜单中选择“属性”，此时就可以打开站点属性设置对话框，（如图4）在该对话框中，可完成对站点的全部配置。



  <figure>
    <a href="/blog/47/04.jpg" target="_blank">
      <img src="/blog/47/04.jpg" alt="图4—默认Web站点属性"/>
      <figcaption><p>图4—默认Web站点属性</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="主目录与启用父路径">主目录与启用父路径</h3>
<p>单击“主目录”标签，切换到主目录设置页面，（如图5）该页面可实现对主目录的更改或设置。注意检查启用父路径选项是否勾选，如未勾选将对以后的程序运行有部分影响。（如图6），主目录—配置&mdash;选项。



  <figure>
    <a href="/blog/47/05.jpg" target="_blank">
      <img src="/blog/47/05.jpg" alt="图5—默认Web站点主目录设置"/>
      <figcaption><p>图5—默认Web站点主目录设置</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/47/06.jpg" target="_blank">
      <img src="/blog/47/06.jpg" alt="图6—默认Web站点启用父路径设置"/>
      <figcaption><p>图6—默认Web站点启用父路径设置</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="设置主页文档">设置主页文档</h3>
<p>单击“文档”标签，可切换到对主页文档的设置页面，主页文档是在浏览器中键入网站域名，而未制定所要访问的网页文件时，系统默认访问的页面文件。常见的主页文件名有index.htm、index.html、index.asp、index.php、index.jap、default.htm、default.html、default.asp等</p>
<p>IIS默认的主页文档只有default.htm和default.asp，根据需要，利用“添加”和“删除”按钮，可为站点设置所能解析的主页文档。</p>
<h3 id="启动与停止internet信息服务iis">启动与停止Internet信息服务（IIS）</h3>
<p>在Internet信息服务的工具栏中提供有启动与停止服务的功能。单击 可启动IIS服务器；单击 则停止IIS服务器。</p>
<h2 id="下载并安装iis-fastcgi">下载并安装IIS FastCGI</h2>
<p>下载地址：<a href="http://www.iis.net/download/fastcgi">http://www.iis.net/download/fastcgi</a>。选择 x86或者download x86，下载下来名称为 fcgisetup_1.5_rtw_x86.msi。安装后会在C:\WINDOWS\system32\inetsrv\目录下多出了5个文件fcgiconfig.js,fcgiext.dll,fcgiext.ini,fcgilicense.rtf,fcgireadme.htm</p>
<p>这个时候在IIS6的”WEB服务扩展”里就多出了一个FastCGI Handler



  <figure>
    <a href="/blog/47/07.gif" target="_blank">
      <img src="/blog/47/07.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>
<h2 id="下载安装iis下的php538">下载安装IIS下的PHP5.3.8</h2>
<p>下载地址<a href="http://windows.php.net/download/">http://windows.php.net/download/</a>，下载VC9 x86 Non Thread Safe的ZIP版本，解压到所需目录，该目录需要给予user读取运行权限。</p>
<h2 id="四配置和修改内容">四、配置和修改内容</h2>
<h3 id="环境变量修改">环境变量修改</h3>
<p>我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统变量，在Path的最后面中加上 <code>;E:\PHP\</code></p>
<h3 id="fastcgi安装目录内的修改注册php到fastcgi">FastCGI安装目录内的修改(注册PHP到FastCGI)</h3>
<p>打开C:\WINDOWS\system32\inetsrv\fcgiext.ini文件，在文件最后加上下面的语句：</p>
<blockquote>
<p>PS: [Types]是文件原来就有的，在[Types]后面加上下面的语句就可以，要全部哦不然会报错的.</p>
</blockquote>
<pre><code>[Types]
php=PHP

[PHP]
ExePath=E:\PHP\php-cgi.exe
InstanceMaxRequests=10000

EnvironmentVars=PHP_FCGI_MAX_REQUESTS:10000

ActivityTimeout=3600
RequestTimeout=3600
</code></pre><h3 id="添加phpini">添加PHP.ini</h3>
<p>PHP.ini的修改PHP5.3.8安装目录下是没有PHP.ini这个文件的，只有php.ini-development和php.ini-production，我们把php.ini-development改为php.ini(当然如果你怕有错可以先备份一下)。
注明：首先建一个文件夹命名为TMP，位置随意，我这里放在E:\PHP\tmp。 (upload_tmp_dir会用到，upload_tmp_dir是用来定义上传文件存放的临时路径，这里可以修改并给它定义一个绝对路径，同时需要有读、写权限)。用搜索(快捷键：Ctrl+F)的方式把下面的关键字改成现在的值：</p>
<pre><code>short_open_tag = Off (这个它本来默认就是这样我们就不要改了。)
把;upload_tmp_dir =改为upload_tmp_dir=”E:\PHP\tmp”
把;cgi.force_redirect = 1改为cgi.force_redirect=0
把;fastcgi.impersonate = 1;改为 fastcgi.impersonate=1;
把; extension_dir = “ext”改为extension_dir=”E:\PHP\ext”
把;date.timezone =改为date.timezone =PRC(如果不修改date.timezone，打开网页的时候蛮有可能提示500错误。也有人把值改为Asia/Shanghai，我没试过你们可以试试。)
</code></pre><p>在Windows Extensions中去除扩展前面的分号(;):</p>
<pre><code>; extension=php_curl.dll
; extension=php_gd2.dll
; extension=php_ldap.dll
; extension=php_mbstring.dll
; extension=php_exif.dll
; extension=php_mysql.dll
; extension=php_mysqli.dll
; extension=php_sockets.dll
; extension=php_xmlrpc.dll
</code></pre><h3 id="internet信息服务iis管理器的修改">Internet信息服务（IIS）管理器的修改</h3>
<h4 id="网站-属性-主目录-配置-添加">网站-&gt;属性-&gt;主目录-&gt;配置-&gt;添加</h4>
<p>


  <figure>
    <a href="/blog/47/08.gif" target="_blank">
      <img src="/blog/47/08.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/47/09.gif" target="_blank">
      <img src="/blog/47/09.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/47/10.gif" target="_blank">
      <img src="/blog/47/10.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/47/11.gif" target="_blank">
      <img src="/blog/47/11.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>
<p>可执行文件填写C:\WINDOWS\system32\inetsrv\fcgiext.dll
扩展名填写 <code>.php</code> 。
动作-&gt;限制为GET,HEAD,POST。</p>
<h4 id="网站-属性-文档-添加默认内容-indexphp">网站-&gt;属性-&gt;文档-&gt;添加默认内容 <code>index.php</code></h4>
<p>这里全部配置好了，一定要把IIS服务重启一下。</p>
<h2 id="测试">测试</h2>
<p>用文本写一段测试代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
<span style="color:#a6e22e">phpinfo</span>();
<span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>保存为index.php，名字随便取，只要后缀是.php就可以。把index.php放到根目录下，我这里是C:\Inetpub\wwwroot，然后在浏览器中输入<a href="http://localhost/index.php">http://localhost/index.php</a> 就可以得到返回的信息了。</p>
<h2 id="问题汇总">问题汇总</h2>
<p>若出现如同下面的错误，说明你的电脑没有安装VC9运行库 即VISUAL C++ 2008</p>
<pre><code>Microsoft Visual C++ 2008 Redistributable Package (x86)
FastCGI Error
The FastCGI Handler was unable to process the request.
——————————————————————————————————————————————————————
Error Details:
Error Number: 14001 (0x800736b1).
Error Description: ????????????????????????????
HTTP Error 500 - Server Error.
Internet Information Services (IIS)
</code></pre><p>下载地址：<a href="http://www.microsoft.com/downloads/zh-cn/details.aspx?FamilyID=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF&amp;displaylang=zh-cn">http://www.microsoft.com/downloads/zh-cn/details.aspx?FamilyID=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF&amp;displaylang=zh-cn</a>
下载后安装就可以了。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Win2003打开网页时老是提示“添加网址到信任站点”的设置</title>
            <link>https://sengmitnick.com/blog/43/</link>
            <pubDate>Tue, 27 May 2014 03:35:55 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/43/</guid>
            <description>&lt;p&gt;在WIN2003系统中，我们打开网页，或打开网站，或浏览网页时，老是跳出一个窗口提示“添加网址到信任站点”，“网页老是提示添加信任”或“2003每打开一次网页都要加入受信任站点”或“win2003 提示信任站点”或“打开网页提示把此网页加入可信站点怎么处理”或“win2003 打开网页提示”等等描述都是对这个问题的反应。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>在WIN2003系统中，我们打开网页，或打开网站，或浏览网页时，老是跳出一个窗口提示“添加网址到信任站点”，“网页老是提示添加信任”或“2003每打开一次网页都要加入受信任站点”或“win2003 提示信任站点”或“打开网页提示把此网页加入可信站点怎么处理”或“win2003 打开网页提示”等等描述都是对这个问题的反应。</p>
<p>Win2003的操作系统，的确比其它操作系统在安全上增加了不少，这是为用户所考虑的。当然，既然提供了安全性，尤其是在上网的时候，可以禁止某些活动脚本的显示，这样，就可以多方面的避免在使用Win2003IE浏览器上网的时候，计算机少遭受受木马或病毒。</p>
<p>然而，也正是由于此安全功能的加强，导致上网的时候，有诸多不便。比如，无论打开哪个网站，都会提示“是否需要将当前访问的网站添加到自己信任的站点中去”。如果不添加，那么，网页将无法正常打开，如果添加，那么，假如每打开一个网站都这样操作，会让人在浏览网页的时候，心情不舒畅。</p>
<p>当然，很多人也知道，通过设置IE的安全级别为中或中低即可，但是，总是无法成功设置，一个，一旦设置后，IE的安全设置会自动恢复到高的级别。</p>
<p>所以，请使用如下的方法来解决。</p>
<p>一、根本性的解决办法</p>
<p>由于您在安装WIN2003的时候，默认就安装了IE的“Internet Explorer增强安全配置”，所以，要想从根本上解决这个问题，就得将其删除。</p>
<p>删除的方法如下：</p>
<p>开始→控制面版→添加/删除程序→添加/删除windows组件。</p>
<p>


  <figure>
    <a href="/blog/43/43_1.gif" target="_blank">
      <img src="/blog/43/43_1.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

上图中，将“Internet　Explorer增强的安全配置”前面的√去掉，然后“下一步”，弹出如下图的windows组件向导。</p>
<p>


  <figure>
    <a href="/blog/43/43_2.gif" target="_blank">
      <img src="/blog/43/43_2.gif" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

上图中，什么也不用管，会自动完成，就这样，整个过程结束，现在，您的IE浏览器的安全级别，就自然降为中或者是中低了。如此，上网的时候就不用那么麻烦了。</p>
<p><!-- raw HTML omitted -->二、辅助性的设置方法<!-- raw HTML omitted --></p>
<p>修改组策略后修改默认安全性</p>
<p>方法如下：单击开始→运行，输入“gpedit.msc”（不包括双引号）确定。</p>
<p>在本地策略中，依次寻找“计算机配置→管理模板→windows组件→Internet Explorer→安全区域：仅使用计算机配置”</p>
<p>然后将其配置为启用。</p>
<p>最后，在IE上右键选择“属性”→安全，在安全选项框中，你会看到安全级别是高，讲其调低点，一般调到“中”就行了，如果还是会弹出警告，就调成“中低”级别。</p>
<p>该文章转载自<a href="http://www.yyxdn.com/news/bencandy.php?fid=6&amp;id=1196">Win2003打开网页时老是提示添加网址到信任站点的设置</a></p>]]></content>
        </item>
        
        <item>
            <title>走遍广州之宜家家居与千味刷</title>
            <link>https://sengmitnick.com/blog/26/</link>
            <pubDate>Wed, 02 Apr 2014 10:50:38 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/26/</guid>
            <description>&lt;p&gt;林女娃发表心情，我就无聊评论了一下，和她聊着聊着就被她提议去吃大餐，我就开玩笑的说什么时候都可以，主要你们得闲就行。然后邓女娃就插嘴说要吃大餐，最后竟然就说今晚就去吃。就这样子说说，最后居然成真了。&lt;/p&gt;
&lt;p&gt;确定后，当然系出发了，而且也有一排时间木有见过她们了（新年也木有呢）。准备好久偷偷溜出公司向许女娃的工作地点（岗顶）走去（好像系吧，不清楚，邓娃说的）。&lt;/p&gt;
&lt;p&gt;而，倒霉的事情即将发生。我刚刚出门，准备拿单车去地铁站，天就有点小雨，我就说老天保佑，不要变大雨呀。不过呢，貌似老天爷和我开了个大大的玩笑，在我踩单车不到百米小雨就变瓢泼大雨，风也大的无法形容。撑的伞直接就反了，我也瞬间变落汤鸡咯（PS：后来有个娃说不要吃饭了，直接吃落汤鸡就行了）。所以我就原路返回，打算会公司咯，继续工作。当然，在回去的路上就和邓娃说了这个情况，一开始她也说竟然这样子那就改天咯。后来她想了想，说这段时间都下雨啊，然后就果断今天去了。地点也改了（广州东站），而那时候我也快回到公司了，到了公司门口又果断重新出发。还好这次老天爷没有和我开玩笑啦。雨虽还下着，但起码可以踩单车了。这次算是正式出发咯，走起。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>林女娃发表心情，我就无聊评论了一下，和她聊着聊着就被她提议去吃大餐，我就开玩笑的说什么时候都可以，主要你们得闲就行。然后邓女娃就插嘴说要吃大餐，最后竟然就说今晚就去吃。就这样子说说，最后居然成真了。</p>
<p>确定后，当然系出发了，而且也有一排时间木有见过她们了（新年也木有呢）。准备好久偷偷溜出公司向许女娃的工作地点（岗顶）走去（好像系吧，不清楚，邓娃说的）。</p>
<p>而，倒霉的事情即将发生。我刚刚出门，准备拿单车去地铁站，天就有点小雨，我就说老天保佑，不要变大雨呀。不过呢，貌似老天爷和我开了个大大的玩笑，在我踩单车不到百米小雨就变瓢泼大雨，风也大的无法形容。撑的伞直接就反了，我也瞬间变落汤鸡咯（PS：后来有个娃说不要吃饭了，直接吃落汤鸡就行了）。所以我就原路返回，打算会公司咯，继续工作。当然，在回去的路上就和邓娃说了这个情况，一开始她也说竟然这样子那就改天咯。后来她想了想，说这段时间都下雨啊，然后就果断今天去了。地点也改了（广州东站），而那时候我也快回到公司了，到了公司门口又果断重新出发。还好这次老天爷没有和我开玩笑啦。雨虽还下着，但起码可以踩单车了。这次算是正式出发咯，走起。</p>
<p>经过一轮考验，终于达到目的地，最快的系许娃，然后是我，我们两个一起等了一下，就等到了林娃。然后基于邓娃认识路的因数，我们就先一步跑到宜家逛逛，顺便买点小吃撑撑肚子（东西挺便宜的，三份圆筒雪糕加墨鱼蛋就10块）。谁知道竟然等了n久，我晕。</p>
<p>等了将近半个钟，又花了不少时间找到邓娃（等人永远是最烦的事情）。然后我们又在附近走走，一直在讨论吃什么。后来大家就说去大食代吧，就进去走了一圈。而在里面邓娃一直说想打火窝，最后最终跑去了千味刷吃火锅去咯。</p>
<p>进去了咋们就开始点菜啊神马之类的，那里的餐厅啊什么之类的看上去还是挺不错的（上档次呀）。点了菜，我们就去大厅那里拿料理和碗啦！看看下图，料理还是挺多的：



  <figure>
    <a href="/blog/26/1.jpg" target="_blank">
      <img src="/blog/26/1.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>
<p>四个娃选的料理都不一样。许娃她懒了，竟然自己不去那料理。



  <figure>
    <a href="/blog/26/11.jpg" target="_blank">
      <img src="/blog/26/11.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>
<p>点了菜不一会儿菜就上来咯。
首先上来的是汤底，捞了一点，味道不错，干杯!!!



  <figure>
    <a href="/blog/26/12.jpg" target="_blank">
      <img src="/blog/26/12.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>
<p>然后菜就开始有序的上来啦



  <figure>
    <a href="/blog/26/13.jpg" target="_blank">
      <img src="/blog/26/13.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

不久菜就上齐咯！看起来是不是好想吃啊？哈哈~



  <figure>
    <a href="/blog/26/14.jpg" target="_blank">
      <img src="/blog/26/14.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

菜全上来了就可以开动啦！早就饿了的说。这次呢，付款系用团购付的，原本206的单只用了122元。第一次用这玩意，感觉挺不错的。。。一级棒！
<div class="note danger">
    PS：我们所聚地方位于广州东站附近，可坐地铁到广州东站F口出，然后左转一直走，即可看到宜家家居。宜家家居对面即购物广场，坐电梯到-3楼即可。
</div></p>]]></content>
        </item>
        
        <item>
            <title>〖原创〗无聊搞搞GPS之解析NMEA0183 协议</title>
            <link>https://sengmitnick.com/blog/25/</link>
            <pubDate>Wed, 02 Apr 2014 10:49:30 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/25/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;系统：debian7.4&lt;/li&gt;
&lt;li&gt;GPS模块：美国SIRF3 SIRF三代&lt;/li&gt;
&lt;li&gt;编译器：gcc&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;恩,近排买了个GPS模块,就用它来定定位啦！(我买的GPS模块地址：&lt;a href=&#34;http://item.taobao.com/item.htm?spm=a1z09.5.0.0.WQseGD&amp;amp;id=6267607210&#34;&gt;http://item.taobao.com/item.htm?spm=a1z09.5.0.0.WQseGD&amp;amp;id=6267607210&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;该模块呢，芯片是SIRF3，输出是标准NMEA0183协议数据，接口是PL2303 。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>系统：debian7.4</li>
<li>GPS模块：美国SIRF3 SIRF三代</li>
<li>编译器：gcc</li>
</ul>

</div>
<p>恩,近排买了个GPS模块,就用它来定定位啦！(我买的GPS模块地址：<a href="http://item.taobao.com/item.htm?spm=a1z09.5.0.0.WQseGD&amp;id=6267607210">http://item.taobao.com/item.htm?spm=a1z09.5.0.0.WQseGD&amp;id=6267607210</a>)</p>
<p>该模块呢，芯片是SIRF3，输出是标准NMEA0183协议数据，接口是PL2303 。</p>
<p>随便在linux下写了个C程序，编译执行得到下面这一串数据：</p>
<pre><code>$GPGGA,014651.000,2303.6024,N,11324.1703,E,1,06,1.4,59.0,M,-6.0,M,,00007D
$GPGSA,A,3,05,24,29,15,12,18,,,,,,,2.5,1.4,2.135
$GPRMC,014651.000,A,2303.6024,N,11324.1703,E,0.14,27.08,010414,,,A53
</code></pre><p>这里我们只解析GPGGA（GPS定位信息）的信息。</p>
<pre><code>$GPGGA,&lt;1&gt;,&lt;2&gt;,&lt;3&gt;,&lt;4&gt;,&lt;5&gt;,&lt;6&gt;,&lt;7&gt;,&lt;8&gt;,&lt;9&gt;,M,&lt;10&gt;,M,&lt;11&gt;,&lt;12&gt;xx&lt;CR&gt;&lt;LF&gt;
$GPGGA：起始引导符及语句格式说明(本句为GPS定位数据)；
&lt;1&gt; UTC时间，格式为hhmmss.sss；
&lt;2&gt; 纬度，格式为ddmm.mmmm(第一位是零也将传送)；
&lt;3&gt; 纬度半球，N或S(北纬或南纬)
&lt;4&gt; 经度，格式为dddmm.mmmm(第一位零也将传送)；
&lt;5&gt; 经度半球，E或W(东经或西经)
&lt;6&gt; 定位质量指示，0=定位无效，1=定位有效；
&lt;7&gt; 使用卫星数量，从00到12(第一个零也将传送)
&lt;8&gt; 水平精确度，0.5到99.9
&lt;9&gt; 天线离海平面的高度，-9999.9到9999.9米 M 指单位米
&lt;10&gt; 大地水准面高度，-9999.9到9999.9米 M 指单位米
&lt;11&gt; 差分GPS数据期限(RTCM SC-104)，最后设立RTCM传送的秒数量
&lt;12&gt; 差分参考基站标号，从0000到1023(首位0也将传送)。
</code></pre><ol>
<li>时间，这个是格林威治时间，是世界时间（UTC），我们需要把它转换成北京时间（BTC），BTC和UTC差了8个小时，要在这个时间基础上加8个小时。</li>
<li>纬度，我们需要把它转换成地球经纬度的格式，计算方法：
如接收到的纬度是：2303.6024
2303.6024 / 100 = 23.036024 可以直接读出23度
2303.6024–23* 100 = 3.6024
3.6024/ 60 = 0.06004
所以纬度是：23.06004°。</li>
<li>南北纬，这个位有两种值‘N’（北纬）和‘S’（南纬）</li>
</ol>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>JavaScript脚本语言使用笔录</title>
            <link>https://sengmitnick.com/blog/24/</link>
            <pubDate>Mon, 31 Mar 2014 10:47:29 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/24/</guid>
            <description>&lt;p&gt;js键盘事件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//这个就是键盘触发的函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubmitOrHidden&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt;){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;evt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;keyCode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;){&lt;span style=&#34;color:#75715e&#34;&gt;//如果取到的键值是回车
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;//do something        
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        &lt;span style=&#34;color:#75715e&#34;&gt;//其他键  dosomething
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }

}
window.document.&lt;span style=&#34;color:#a6e22e&#34;&gt;onkeydown&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SubmitOrHidden&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//当有键按下时执行函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
            <content type="html"><![CDATA[<p>js键盘事件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span><span style="color:#f92672">&gt;</span>
<span style="color:#75715e">//这个就是键盘触发的函数
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">SubmitOrHidden</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">evt</span>){
    <span style="color:#a6e22e">evt</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">event</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">evt</span>;
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">evt</span>.<span style="color:#a6e22e">keyCode</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">13</span>){<span style="color:#75715e">//如果取到的键值是回车
</span><span style="color:#75715e"></span>          <span style="color:#75715e">//do something        
</span><span style="color:#75715e"></span>     }<span style="color:#66d9ef">else</span>{
        <span style="color:#75715e">//其他键  dosomething
</span><span style="color:#75715e"></span>    }

}
window.document.<span style="color:#a6e22e">onkeydown</span><span style="color:#f92672">=</span><span style="color:#a6e22e">SubmitOrHidden</span>;<span style="color:#75715e">//当有键按下时执行函数
</span><span style="color:#75715e"></span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</code></pre></div><p>附常用功能键:</p>
<table>
<thead>
<tr>
<th style="text-align:left">常数</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">vbKeyBack</td>
<td style="text-align:left">8</td>
<td style="text-align:left">BACKSPACE 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyTab</td>
<td style="text-align:left">9</td>
<td style="text-align:left">TAB 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyReturn</td>
<td style="text-align:left">13</td>
<td style="text-align:left">ENTER 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyShift</td>
<td style="text-align:left">16</td>
<td style="text-align:left">SHIFT 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyControl</td>
<td style="text-align:left">17</td>
<td style="text-align:left">CTRL 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyCapital</td>
<td style="text-align:left">20</td>
<td style="text-align:left">CAPS LOCK 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyEscape</td>
<td style="text-align:left">27</td>
<td style="text-align:left">ESC 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeySpace</td>
<td style="text-align:left">32</td>
<td style="text-align:left">SPACEBAR 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyPageUp</td>
<td style="text-align:left">33</td>
<td style="text-align:left">PAGEUP 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyPageDown</td>
<td style="text-align:left">34</td>
<td style="text-align:left">PAGEDOWN 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyEnd</td>
<td style="text-align:left">35</td>
<td style="text-align:left">END 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyPrint</td>
<td style="text-align:left">42</td>
<td style="text-align:left">PRINT SCREEN 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyDelete</td>
<td style="text-align:left">46</td>
<td style="text-align:left">DEL 键</td>
</tr>
<tr>
<td style="text-align:left">vbKeyNumlock</td>
<td style="text-align:left">144</td>
<td style="text-align:left">NUM LOCK 键</td>
</tr>
</tbody>
</table>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>MySQL使用过程中遇到问题总结</title>
            <link>https://sengmitnick.com/blog/22/</link>
            <pubDate>Sat, 22 Mar 2014 10:40:04 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/22/</guid>
            <description>&lt;h2 id=&#34;access-denied-for-user&#34;&gt;Access denied for user&amp;hellip;&lt;/h2&gt;
&lt;p&gt;用phpmyadmin连接mysql时遇到了以下的提示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#1045 - Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password: NO)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="access-denied-for-user">Access denied for user&hellip;</h2>
<p>用phpmyadmin连接mysql时遇到了以下的提示：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#1045 - Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</span>
</code></pre></div><p>解决方法：</p>
<p>phpMyAdmin 试图连接到 MySQL 服务器，但服务器拒绝连接。您应该检查 config.inc.php 中的主机、用户名和密码，并且确定这些信息与 MySQL 服务器的管理员所给出的信息一致。
我想应该也是跟phpmyadmin里的配置有关，事实也是如此。
打开 <code>config.inc.php</code> 里看到里面有两行就是问题的关键：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$cfg[<span style="color:#e6db74">&#39;Servers&#39;</span>][$i][<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;root&#39;</span>;
$cfg[<span style="color:#e6db74">&#39;Servers&#39;</span>][$i][<span style="color:#e6db74">&#39;password&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
</code></pre></div><p>这一般是phpmyadmin里的默认设置，用户名为root，密码为空，当本机建立mysql数据库时可以直接连接。所以一般第一次用phpmyadmin连接时都会成功，但后面为什么会提示拒绝连接呢？因为root密码（或者别的用户名）已经修改过了，有可以在是命令行里改的也有可以是在phpmyadmin里改的：



  <figure>
    <a href="/blog/22/1.jpg" target="_blank">
      <img src="/blog/22/1.jpg" alt="线路图"/>
      <figcaption><p>线路图</p></figcaption>
    </a>
    
  </figure>
</p>
<p>如果设置了使用密码的话那么下面的登入密码也需要同时修改，否则只能改配置文件config.inc.php</p>
<p>我记得默认密码是空的，后来加上就连接拒绝了，现在再看到刚才那两行代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$cfg[<span style="color:#e6db74">&#39;Servers&#39;</span>][$i][<span style="color:#e6db74">&#39;user&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;root&#39;</span>;
$cfg[<span style="color:#e6db74">&#39;Servers&#39;</span>][$i][<span style="color:#e6db74">&#39;password&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
</code></pre></div><p>其实指的就是登入信息里的用户名和密码，如果留空那那么错误提示里就是(using password: NO)，如果随便打几个字上去就那就是(using password: YES)，嗯，如果你把改过的密码敲上去，那么就可以登录成功了。当然这是本地登录时可以设置固定用户登录（使用配置文件），如果想出现提示输入用户名和密码的对话框，那么需要设置另一行代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$cfg[<span style="color:#e6db74">&#39;Servers&#39;</span>][$i][<span style="color:#e6db74">&#39;auth_type&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;config&#39;</span>; <span style="color:#75715e">//还可以用http或者cookie方式
</span></code></pre></div><p>当改成http时就会出现对话框，用cookie就是按浏览器进程。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>误删磁盘分区或分区莫名丢失后完美数据恢复方案</title>
            <link>https://sengmitnick.com/blog/21/</link>
            <pubDate>Sat, 22 Mar 2014 10:37:40 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/21/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;恢复分区系统环境：Win8 32bit PE（大白菜PE系统）&lt;/li&gt;
&lt;li&gt;恢复过程中用到的软件：
&lt;ul&gt;
&lt;li&gt;DiskGenius（PE里自带）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.portablesoft.org/data-recovery-wizard/&#34;&gt;Data Recovery Wizard绿色免费版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;恢复成功的分区系统：NTFS&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>恢复分区系统环境：Win8 32bit PE（大白菜PE系统）</li>
<li>恢复过程中用到的软件：
<ul>
<li>DiskGenius（PE里自带）</li>
<li><a href="http://www.portablesoft.org/data-recovery-wizard/">Data Recovery Wizard绿色免费版</a></li>
</ul>
</li>
<li>恢复成功的分区系统：NTFS</li>
</ul>

</div>
<p>事故产生原因分析：</p>
<p>本人属于误删磁盘分区情况，删除分区的系统环境是Debian7.40系统。</p>
<p>事故现场保留：</p>
<p>本人在误删磁盘分区后，原封不动。其表现为所丢失分区在DiskGenius显示为空闲状态，如下图所选分区部分。



  <figure>
    <a href="/blog/21/1.jpg" target="_blank">
      <img src="/blog/21/1.jpg" alt="demo"/>
      <figcaption><p>demo</p></figcaption>
    </a>
    
  </figure>
</p>
<p>完美解决方案：</p>
<h2 id="找回丢失分区">找回丢失分区</h2>
<p>使用DiskGenius的搜索分区功能把所丢失的分区找回来，操作流程如下图：</p>
<h3 id="对所选择的分区空闲进行搜索已丢失分区重建分区表">对所选择的分区（空闲）进行搜索已丢失分区（重建分区表）</h3>



  <figure>
    <a href="/blog/21/2.jpg" target="_blank">
      <img src="/blog/21/2.jpg" alt="重建分区表"/>
      <figcaption><p>重建分区表</p></figcaption>
    </a>
    
  </figure>

<h3 id="开始进行搜索">开始进行搜索</h3>
<p>过程中会提示搜索到某某分区，让你选择保留还是忽略，操作流程若下图：



  <figure>
    <a href="/blog/21/3.jpg" target="_blank">
      <img src="/blog/21/3.jpg" alt="开始搜索"/>
      <figcaption><p>开始搜索</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/21/4.jpg" target="_blank">
      <img src="/blog/21/4.jpg" alt="搜索中..."/>
      <figcaption><p>搜索中...</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/21/5.png" target="_blank">
      <img src="/blog/21/5.png" alt="搜索成功"/>
      <figcaption><p>搜索成功</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/21/6.png" target="_blank">
      <img src="/blog/21/6.png" alt="搜索完成"/>
      <figcaption><p>搜索完成</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="获取丢失分区">获取丢失分区</h3>
<p>最后就可以获得丢失的分区，只不过不能读不能写,直接打开会提示要格式化（因为我的就弄好了就发不了图了），当然，还有一种情况，那就是搜索出来的分区是可读的，那样就恭喜你，不用下一步了，因为你成功了。</p>
<h2 id="使用data-recovery-wizard恢复不可识别的分区">使用Data Recovery Wizard恢复不可识别的分区。</h2>
<p><strong>按图操作：</strong>
选择模式,第二个为我们需要的。



  <figure>
    <a href="/blog/21/07.png" target="_blank">
      <img src="/blog/21/07.png" alt="恢复"/>
      <figcaption><p>恢复</p></figcaption>
    </a>
    
  </figure>
</p>
<p>这个默认，下一步。（搜索类型而已）



  <figure>
    <a href="/blog/21/08.png" target="_blank">
      <img src="/blog/21/08.png" alt="搜索类型"/>
      <figcaption><p>搜索类型</p></figcaption>
    </a>
    
  </figure>
</p>
<p>选择之前我们用DiskGenius搜索出来的已丢失分区，要是有多个就一个一个来吧。



  <figure>
    <a href="/blog/21/09.png" target="_blank">
      <img src="/blog/21/09.png" alt="已丢失分区"/>
      <figcaption><p>已丢失分区</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="搜索开始咯坐等结束吧">搜索开始咯，坐等结束吧。</h3>
<p>我之前恢复的分有1.4T，用了17小时左右呐。



  <figure>
    <a href="/blog/21/10.png" target="_blank">
      <img src="/blog/21/10.png" alt="已丢失分区"/>
      <figcaption><p>已丢失分区</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="搜索结果">搜索结果</h3>
<p>这里是搜索到的，一般选择第一个就可以了，你选其他的也木有用，选了恢复的也是损坏的。



  <figure>
    <a href="/blog/21/11.png" target="_blank">
      <img src="/blog/21/11.png" alt="搜索结果"/>
      <figcaption><p>搜索结果</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="这是选择要恢复的文件">这是选择要恢复的文件</h3>
<p>我尝试过，即使文件下面有个红色小d的也可以完美恢复。



  <figure>
    <a href="/blog/21/12.png" target="_blank">
      <img src="/blog/21/12.png" alt="选择要恢复的文件"/>
      <figcaption><p>选择要恢复的文件</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="恢复到什么地方">恢复到什么地方</h3>
<p>这是要选择把恢复文件恢复到什么地方
我选择的是一个移动硬盘，其他情况没有测试（以前曾经试过恢复到原本的磁盘是损坏的，不过不是用这种方法）。



  <figure>
    <a href="/blog/21/13.png" target="_blank">
      <img src="/blog/21/13.png" alt="恢复到什么地方"/>
      <figcaption><p>恢复到什么地方</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="恢复成功">恢复成功</h3>
<p>来到这里就几乎算恢复成功了，选择你可以去你上一步选择的路径查看你恢复回来的资料啦！！！（是不是很兴奋？数据又回来咯）



  <figure>
    <a href="/blog/21/14.png" target="_blank">
      <img src="/blog/21/14.png" alt="恢复成功"/>
      <figcaption><p>恢复成功</p></figcaption>
    </a>
    
  </figure>
</p>
<h3 id="保存搜索结果">保存搜索结果</h3>
<p>现在，你可以返回（按BACK按钮两次）继续重新选择恢复文件（返回2.6步骤）或者返回（按BACK按钮两次）把你那个搜索结果保存成文件。</p>
<div class="note warning">
    PS：该方案就这样子啦。再一次重申一下，本方案目前只对那些分区丢失却没有格式化的分区进行了测试。而对于分区丢失并已经格式化的分区，还木有进行测试，如果有哪位童鞋出现这种情况并用我的这个方案成功恢复数据的话，记住告诉我一声哟！
</div>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>对个人在使用不同ubuntu版本过程中所遇到的问题总结</title>
            <link>https://sengmitnick.com/blog/11/</link>
            <pubDate>Sat, 08 Mar 2014 10:15:18 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/11/</guid>
            <description>&lt;h2 id=&#34;无法获得锁-varlibdpkglock-&#34;&gt;无法获得锁 /var/lib/dpkg/lock &amp;hellip;&lt;/h2&gt;
&lt;p&gt;具体报错如下：&lt;/p&gt;
&lt;div class=&#34;note danger&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)&lt;/li&gt;
&lt;li&gt;E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;产生原因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当在使用apt－get安装或者其他操作时，还木有操作完成就直接关闭终端，从而导致关闭了终端，apt－get进程却没有结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;终端输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ps  -aux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;列出进程。找到含有apt-get的进程，直接 &lt;code&gt;sudo kill PID&lt;/code&gt; 。解决。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="无法获得锁-varlibdpkglock-">无法获得锁 /var/lib/dpkg/lock &hellip;</h2>
<p>具体报错如下：</p>
<div class="note danger">
    <ul>
<li>E: 无法获得锁 /var/lib/dpkg/lock - open (11: 资源暂时不可用)</li>
<li>E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</li>
</ul>

</div>
<p><strong>产生原因：</strong></p>
<p>当在使用apt－get安装或者其他操作时，还木有操作完成就直接关闭终端，从而导致关闭了终端，apt－get进程却没有结束。</p>
<p><strong>解决办法1：</strong></p>
<p>终端输入:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ps  -aux
</code></pre></div><p>列出进程。找到含有apt-get的进程，直接 <code>sudo kill PID</code> 。解决。</p>
<p><strong>解决办法2：</strong> 强制解锁；命令如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo rm /var/cache/apt/archives/lock
sudo rm /var/lib/dpkg/lock
</code></pre></div><h2 id="ubuntu-1204-文本编辑器gedit显示乱码">ubuntu 12.04 文本编辑器（gedit）显示乱码</h2>
<p><strong>原因分析：</strong> 这种情况是因为 设置当中没有包括汉字常见的各种编码形式</p>
<p><strong>解决方案：</strong> 终端输入：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gsettings set org.gnome.gedit.preferences.encodings auto-detected “<span style="color:#f92672">[</span>‘GB18030’, ‘GB2312’, ‘GBK’, ‘UTF-8’, ‘BIG5’, ‘CURRENT’, ‘UTF-16’<span style="color:#f92672">]</span>”
gsettings set org.gnome.gedit.preferences.encodings shown-in-menu “<span style="color:#f92672">[</span>‘GB18030’, ‘GB2312’, ‘GBK’, ‘UTF-8’, ‘BIG5’, ‘CURRENT’, ‘UTF-16’<span style="color:#f92672">]</span>
</code></pre></div><h2 id="ubuntu-1204下音乐乱码">ubuntu 12.04下音乐乱码</h2>
<p><strong>原因分析：</strong>
这个问题出现在mp3文件里，由于大陆大多数MP3文件都是用GBK/GB18030编码写入标签信息的，而大多数的linux播放器默认以utf-8编码读取，这就产生了乱码。</p>
<p><strong>解决方法：</strong></p>
<p>使用Mutagen来修改Mp3文件的标签信息，具体方法如下（只针对GBK/GB18030编码的情况）：</p>
<ol>
<li>安装Mutagen:
ubuntu下终端运行</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install python-mutagen
</code></pre></div><p>然后，在终端执行：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mid3iconv -e gbk *.mp3
</code></pre></div><p>如果想转换当前目录下的所有 mp3 (包括子目录)：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd yourdir  <span style="color:#75715e">#yourdir为你的目录</span>
find . -iname “*.mp3” -execdir mid3iconv -e gbk <span style="color:#f92672">{}</span>  <span style="color:#ae81ff">\;</span>
</code></pre></div><h2 id="ubuntu-1204下令其能够开机自动挂载设备">ubuntu 12.04下令其能够开机自动挂载设备</h2>
<p>设置方法：在root权限下终端输入：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">##     fs_spec　 fs_file　  fs_type　fs_options　 fs_dump　 fs_pass</span>
echo “/dev/sda1 /mnt/win_c ntfs     defaults     <span style="color:#ae81ff">0</span>         0” &gt;&gt; /etc/fstab
</code></pre></div><h2 id="ubuntu下如何使用命令搜索某文件下的某字符串">ubuntu下如何使用命令搜索某文件下的某字符串</h2>
<p><strong>解决方法：</strong> 举个例子,例如我要搜索当前目录下C类型文件内有包含字符串“timer”的文件，在终端输入：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">find . -name “*.c” | xargs grep “timer”
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之platform</title>
            <link>https://sengmitnick.com/blog/19/</link>
            <pubDate>Wed, 05 Mar 2014 10:30:00 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/19/</guid>
            <description>&lt;p&gt;首先简单普及一下 &lt;code&gt;platform&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
    &lt;p&gt;&lt;strong&gt;Linux platform driver&lt;/strong&gt; 机制和传统的 &lt;strong&gt;device_driver&lt;/strong&gt; 机制相比，一个十分明显的优势在于 &lt;code&gt;platform&lt;/code&gt; 机制将本身的资源注册进内核，由内核统一管理，在驱动程序中使用这些资源时通过platform_device提供的标准接口进行申请并使用。&lt;/p&gt;
&lt;p&gt;这样提高了驱动和资源管理的独立性，并且拥有较好的可移植性和安全性。   &lt;code&gt;platform_device&lt;/code&gt; 最大的特定是CPU直接寻址设备的寄存器空间，即使对于其他总线设备，设备本身的寄存器无法通过CPU总线访问，但总线的 &lt;code&gt;controller&lt;/code&gt; 仍然需要通过 &lt;code&gt;platform bus&lt;/code&gt; 来管理。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Linux 2.6&lt;/code&gt; 的设备驱动模型中，关心总线、设备和驱动这3个实体，总线将设备和驱动绑定。
在系统每注册一个设备的时候，会寻找与之匹配的驱动；相反的，在系统每注册一个驱动的时候，会寻找与之匹配的设备，而匹配由总线完成。&lt;/p&gt;
&lt;p&gt;一个现实的Linux设备和驱动通常都需要挂接在一种总线上，对于本身依附于PCI、USB、I2C、SPI等的设备而言，这自然不是问题，但是在嵌入式系统里面，SoC系统中集成的独立的外设控制器、挂接在SoC内存空间的外设等确不依附于此类总线。&lt;/p&gt;
&lt;p&gt;基于这一背景，Linux发明了一种虚拟的总线，称为platform总线，相应的设备称为platform_device，而驱动成为 &lt;code&gt;platform_driver&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所谓的platform_device并不是与字符设备、块设备和网络设备并列的概念，而是Linux系统提供的一种附加手段，例如，在龙芯1B处理器中，把内部集成的I2C、RTC、SPI、LCD、看门狗等控制器都归纳为platform_device，而它们本身就是字符设备。&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;platform_device结构体的定义可以在内核源代码根目录下include/linux/platform_device.h的这个头文件里查看。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>首先简单普及一下 <code>platform</code>：</p>
<div class="note info">
    <p><strong>Linux platform driver</strong> 机制和传统的 <strong>device_driver</strong> 机制相比，一个十分明显的优势在于 <code>platform</code> 机制将本身的资源注册进内核，由内核统一管理，在驱动程序中使用这些资源时通过platform_device提供的标准接口进行申请并使用。</p>
<p>这样提高了驱动和资源管理的独立性，并且拥有较好的可移植性和安全性。   <code>platform_device</code> 最大的特定是CPU直接寻址设备的寄存器空间，即使对于其他总线设备，设备本身的寄存器无法通过CPU总线访问，但总线的 <code>controller</code> 仍然需要通过 <code>platform bus</code> 来管理。</p>
<p>在 <code>Linux 2.6</code> 的设备驱动模型中，关心总线、设备和驱动这3个实体，总线将设备和驱动绑定。
在系统每注册一个设备的时候，会寻找与之匹配的驱动；相反的，在系统每注册一个驱动的时候，会寻找与之匹配的设备，而匹配由总线完成。</p>
<p>一个现实的Linux设备和驱动通常都需要挂接在一种总线上，对于本身依附于PCI、USB、I2C、SPI等的设备而言，这自然不是问题，但是在嵌入式系统里面，SoC系统中集成的独立的外设控制器、挂接在SoC内存空间的外设等确不依附于此类总线。</p>
<p>基于这一背景，Linux发明了一种虚拟的总线，称为platform总线，相应的设备称为platform_device，而驱动成为 <code>platform_driver</code>。</p>
<p>所谓的platform_device并不是与字符设备、块设备和网络设备并列的概念，而是Linux系统提供的一种附加手段，例如，在龙芯1B处理器中，把内部集成的I2C、RTC、SPI、LCD、看门狗等控制器都归纳为platform_device，而它们本身就是字符设备。</p>

</div>
<p>platform_device结构体的定义可以在内核源代码根目录下include/linux/platform_device.h的这个头文件里查看。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span>  <span style="color:#f92672">*</span> name;  <span style="color:#75715e">/* 设备名 */</span>
    <span style="color:#66d9ef">int</span>     id;
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">device</span>   dev;
    u32     num_resources;  <span style="color:#75715e">/* 设备所使用各类资源数量 */</span>
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">resource</span> <span style="color:#f92672">*</span> resource;        <span style="color:#75715e">/* 资源 */</span>

    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device_id</span> <span style="color:#f92672">*</span>id_entry;

    <span style="color:#75715e">/* MFD cell pointer */</span>
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">mfd_cell</span> <span style="color:#f92672">*</span>mfd_cell;

    <span style="color:#75715e">/* arch specific additions */</span>
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">pdev_archdata</span>    archdata;
};
</code></pre></div><p>结构体用来描述设备的名称、资源信息等.</p>
<p>而对resource的定义在 <strong>include/linux/ioport.h</strong> 下 ：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">resource</span> {
    resource_size_t start;    <span style="color:#75715e">//定义资源的起始地址
</span><span style="color:#75715e"></span>    resource_size_t end;    <span style="color:#75715e">//定义资源的结束地址
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>name;    <span style="color:#75715e">//定义资源的名称
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> flags;    <span style="color:#75715e">//定义资源的类型，比如MEM，IO，IRQ，DMA类型
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">resource</span> <span style="color:#f92672">*</span>parent, <span style="color:#f92672">*</span>sibling, <span style="color:#f92672">*</span>child;
};
</code></pre></div><p>这个结构表示设备所拥有的资源，即I/O端口、I/O映射内存、中断及DMA等。这里的地址指的是物理地址。</p>
<div class="note info">
    start、end和flags这3个字段，分别标明资源的开始值、结束值和类型，flags可以为IORESOURCE_IO、 IORESOURCE_MEM、IORESOURCE_IRQ、IORESOURCE_DMA等。start、end的含义会随着flags而变更，如当 flags为IORESOURCE_MEM时，start、end分别表示该platform_device占据的内存的开始地址和结束地址；当 flags为IORESOURCE_IRQ时，start、end分别表示该platform_device使用的中断号的开始值和结束值，如果只使用了 1个中断号，开始和结束值相同。对于同种类型的资源而言，可以有多份，譬如说某设备占据了2个内存区域，则可以定义2个IORESOURCE_MEM资源。
</div>
<p>对resource的定义也通常在BSP的板文件中进行，而在具体的设备驱动中透过platform_get_resource()这样的API来获取，此API的原型为：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">resource</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">platform_get_resource</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device</span> <span style="color:#f92672">*</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>);
</code></pre></div><p><strong>设备注册：</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//drivers/base/platform.c
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">platform_device_register</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device</span> <span style="color:#f92672">*</span>pdev)
{
        device_initialize(<span style="color:#f92672">&amp;</span>pdev<span style="color:#f92672">-&gt;</span>dev);
        <span style="color:#66d9ef">return</span> platform_device_add(pdev);
}
</code></pre></div><div class="note info">
    另外一种机制就是动态申请platform_device_alloc一个platform_device设备，然后通过platform_device_add_resources及platform_device_add_data等添加相关资源和属性。  <br>
Platform device是一种device自己是不会做事情的，要有人为它做事情，那就是platform driver。platform driver遵循linux系统的driver model。对于device的discovery/enumerate都不是driver自己完成的而是由由系统的driver注册机制完成。driver编写人员只要将注册必须的数据结构初始化并调用注册driver的kernel API就可以了。
</div>
<p>现在，我们就通过一个小小的程序来进一步认识吧：</p>
<div class="note info">
    <ul>
<li>实验开发板：loongson1B linux</li>
<li>内核版本：3.0 mipsel-linux-gcc版本：4.3.0</li>
<li>实验内容：利用platform编写一模块，手动加载这个模块时，板上的led灯亮。</li>
</ul>

</div>
<p>代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: led.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Note: 利用platform写模块 ，LED驱动设备程序
</span><span style="color:#75715e">    &gt; Created Time: 2014年03月05日 星期三 16时14分30秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/uaccess.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/device.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/ioctl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/vmalloc.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/ctype.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/platform_device.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">/*该头文件乃我为了方便使用所写，
</span><span style="color:#75715e">* 里面包含了开发板上所有寄存器的虚地址
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;../ls1b_base.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_AUTHOR(<span style="color:#e6db74">&#34;sengmitnick sengmitnick@163.com&#34;</span>);
MODULE_DESCRIPTION(<span style="color:#e6db74">&#34;LED driver for the ls1b.&#34;</span>);
MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device</span> led_test_device <span style="color:#f92672">=</span>
{
    .name           <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;led_test&#34;</span>,
    .id             <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,

};

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span>  <span style="color:#a6e22e">led_test_probe</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_device</span> <span style="color:#f92672">*</span>pdev)
{<span style="color:#75715e">//GPIO_LED_NUMBER为控制led的gpio号，这里一共4个led灯
</span><span style="color:#75715e"></span>    GPIOCFG1  <span style="color:#f92672">|=</span>  ( <span style="color:#ae81ff">0b1111</span> <span style="color:#f92672">&lt;&lt;</span> ( GPIO_LED_NUMBER <span style="color:#f92672">-</span><span style="color:#ae81ff">32</span> ) ) ;
    GPIOOE1 <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span>  <span style="color:#f92672">~</span>( <span style="color:#ae81ff">0b1111</span> <span style="color:#f92672">&lt;&lt;</span> ( GPIO_LED_NUMBER <span style="color:#f92672">-</span><span style="color:#ae81ff">32</span> ) ) ;
    GPIOOUT1 <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span> <span style="color:#f92672">~</span>( <span style="color:#ae81ff">0b1111</span> <span style="color:#f92672">&lt;&lt;</span> ( GPIO_LED_NUMBER <span style="color:#f92672">-</span><span style="color:#ae81ff">32</span> ) );  
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">platform_driver</span> led_test_driver <span style="color:#f92672">=</span>
{
    .driver <span style="color:#f92672">=</span> {
        .name<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;led_test&#34;</span>,
        .owner<span style="color:#f92672">=</span> THIS_MODULE,

    },
    .probe<span style="color:#f92672">=</span> led_test_probe,
    <span style="color:#75715e">//.remove= sb2f_audio_remove,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//.suspend= ls1x_suspend,
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//.resume= ls1x_resume,
</span><span style="color:#75715e"></span>
};

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">led_init</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">int</span> ret;
    ret <span style="color:#f92672">=</span> platform_device_register(<span style="color:#f92672">&amp;</span>amp;led_test_device);
    <span style="color:#75715e">//if (ret 1= 0)
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> platform_driver_register(<span style="color:#f92672">&amp;</span>amp;led_test_driver);

    <span style="color:#66d9ef">return</span> ret;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">led_exit</span>(<span style="color:#66d9ef">void</span>)
{
    platform_device_unregister(<span style="color:#f92672">&amp;</span>amp;led_test_device);
    platform_driver_unregister(<span style="color:#f92672">&amp;</span>amp;led_test_driver);
}

module_init(led_init);
module_exit(led_exit);
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之红外遥控接收器中断处理程序</title>
            <link>https://sengmitnick.com/blog/18/</link>
            <pubDate>Tue, 04 Mar 2014 10:29:30 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/18/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;实验开发板：loongson1B&lt;/li&gt;
&lt;li&gt;linux内核版本：3.0&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc版本：4.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;结合LED实验和简单中断实验的原理，编写红外遥控接收器中断处理程序。&lt;/p&gt;
&lt;p&gt;实验要求：加载模块后，发射红外线给板上的红外遥控接收器，屏幕就会打印相应的字符。&lt;/p&gt;
&lt;p&gt;代码实现如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>实验开发板：loongson1B</li>
<li>linux内核版本：3.0</li>
<li>mipsel-linux-gcc版本：4.3.0</li>
</ul>

</div>
<p>结合LED实验和简单中断实验的原理，编写红外遥控接收器中断处理程序。</p>
<p>实验要求：加载模块后，发射红外线给板上的红外遥控接收器，屏幕就会打印相应的字符。</p>
<p>代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: infrared.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Note: 红外遥控接收器中断处理程序
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月26日 星期三 17时52分57秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/errno.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/mm.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/sched.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/io.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/interrupt.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_AUTHOR(<span style="color:#e6db74">&#34;sengmitnick sengmitnick@163.com&#34;</span>);
MODULE_DESCRIPTION(<span style="color:#e6db74">&#34;Infrared remote control receiver interrupt handling driver for the ls1b.&#34;</span>);
MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);

<span style="color:#75715e">#define infraredMEM_SIZE 0x1000
</span><span style="color:#75715e">#define MEM_CLEAR 0x1
</span><span style="color:#75715e">#define GPIOCFG0 (*(volatile unsigned *)0xbfd010C0)
</span><span style="color:#75715e">#define GPIOCFG1 (*(volatile unsigned *)0xbfd010C4)
</span><span style="color:#75715e">#define GPIOOE0 (*(volatile unsigned *)0xbfd010D0)
</span><span style="color:#75715e">#define GPIOOE1 (*(volatile unsigned *)0xbfd010D4)
</span><span style="color:#75715e">#define GPIOIN0 (*(volatile unsigned *)0xbfd010E0)
</span><span style="color:#75715e">#define GPIOIN1 (*(volatile unsigned *)0xbfd010E4)
</span><span style="color:#75715e">#define GPIOOUT0 (*(volatile unsigned *)0xbfd010F0)
</span><span style="color:#75715e">#define GPIOOUT1 (*(volatile unsigned *)0xbfd010F4)
</span><span style="color:#75715e">#define interrupt_irq 125
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>
{
    dev_t devno;
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">cdev</span> cdev;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> mem[infraredMEM_SIZE];
}<span style="color:#f92672">*</span>interrupt_devp;


<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">interrupt_open</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_open, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#75715e">//file-&gt;private_data = interrupt_devp;
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">interrupt_release</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_release , CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">interrupt_read</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span> buffer, size_t len, loff_t <span style="color:#f92672">*</span> offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_read, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">interrupt_write</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>filp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span>buffer, size_t len, loff_t <span style="color:#f92672">*</span>offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_write, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file_operations</span> interrupt_fops <span style="color:#f92672">=</span>
{
    .owner <span style="color:#f92672">=</span> THIS_MODULE,
    .read <span style="color:#f92672">=</span> interrupt_read,
    .write <span style="color:#f92672">=</span> interrupt_write,
    .open <span style="color:#f92672">=</span> interrupt_open,
    .release <span style="color:#f92672">=</span> interrupt_release,
};

irqreturn_t <span style="color:#a6e22e">interrupt_interrupt</span>(<span style="color:#66d9ef">int</span> irq,<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>dev_id)
{

    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> (IRQ_HANDLED);
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">interrupt_init</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">int</span> ret;
    dev_t devno <span style="color:#f92672">=</span> MKDEV(<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">1</span>);
    <span style="color:#75715e">//ret = alloc_chrdev_region(&amp;devno,0,1,&#34;interrupt&#34;);
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> register_chrdev_region(devno, <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;interrupt&#34;</span>);
    <span style="color:#66d9ef">if</span>(ret <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt:can&#39;t get major.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        <span style="color:#66d9ef">goto</span> fail;

    }
    printk(KERN_ALERT <span style="color:#e6db74">&#34;devno is %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,devno);


    interrupt_devp <span style="color:#f92672">=</span> kmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>),GFP_KERNEL );
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>interrupt_devp)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;ok!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        ret <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>ENOMEM;
        <span style="color:#66d9ef">goto</span> fail;
    }
    memset(interrupt_devp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>));
    interrupt_devp<span style="color:#f92672">-&gt;</span>devno <span style="color:#f92672">=</span> devno;
    cdev_init(<span style="color:#f92672">&amp;</span>interrupt_devp<span style="color:#f92672">-&gt;</span>cdev,<span style="color:#f92672">&amp;</span>interrupt_fops);
    interrupt_devp<span style="color:#f92672">-&gt;</span>cdev.owner <span style="color:#f92672">=</span> THIS_MODULE;
    ret <span style="color:#f92672">=</span> cdev_add(<span style="color:#f92672">&amp;</span>interrupt_devp<span style="color:#f92672">-&gt;</span>cdev,devno,<span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span>(ret)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;Error %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ret);
        <span style="color:#66d9ef">goto</span> fail;
    }

    GPIOCFG1 <span style="color:#f92672">|=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">29</span> ) ;
    GPIOOE1  <span style="color:#f92672">|=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">29</span> ) ;
    GPIOIN1  <span style="color:#f92672">|=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">29</span> ) ;

    <span style="color:#75715e">//ret = request_irq(interrupt_irq,interrupt_interrupt,IRQF_SHARED,&#34;eth0&#34;,NULL);
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> request_irq(interrupt_irq,interrupt_interrupt,IRQF_SHARED <span style="color:#f92672">|</span> IRQ_TYPE_LEVEL_LOW ,<span style="color:#e6db74">&#34;myirq&#34;</span>,interrupt_devp);
    <span style="color:#66d9ef">if</span> (ret <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>)
    {
      printk(KERN_EMERG <span style="color:#e6db74">&#34;Error %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ret);
    }
    enable_irq(interrupt_irq);
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt driver initialized, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

fail:
    <span style="color:#66d9ef">if</span>(devno <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
    {
        unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span>(interrupt_devp)
    {
        kfree(interrupt_devp);
    }
    <span style="color:#66d9ef">return</span> ret;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">interrupt_exit</span>(<span style="color:#66d9ef">void</span>)
{
    dev_t devno <span style="color:#f92672">=</span> interrupt_devp<span style="color:#f92672">-&gt;</span>devno;

    cdev_del(<span style="color:#f92672">&amp;</span>interrupt_devp<span style="color:#f92672">-&gt;</span>cdev);
    <span style="color:#66d9ef">if</span>(interrupt_devp)
    {
        kfree(interrupt_devp);
    }
    unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    free_irq(interrupt_irq,interrupt_devp);
    printk(KERN_EMERG <span style="color:#e6db74">&#34;Goodbye , cruel CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}

module_init(interrupt_init);
module_exit(interrupt_exit);
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之简单中断处理程序</title>
            <link>https://sengmitnick.com/blog/17/</link>
            <pubDate>Mon, 03 Mar 2014 10:27:05 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/17/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;实验开发板：loongson1B&lt;/li&gt;
&lt;li&gt;linux内核版本：3.0&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc版本：4.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;学习编写中断处理程序，通过一个简单中断处理程序加深认识。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>实验开发板：loongson1B</li>
<li>linux内核版本：3.0</li>
<li>mipsel-linux-gcc版本：4.3.0</li>
</ul>

</div>
<p>学习编写中断处理程序，通过一个简单中断处理程序加深认识。</p>
<p>代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: interrupt.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Note: 简单中断处理程序
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月26日 星期三 17时52分57秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/errno.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/mm.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/sched.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/io.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_AUTHOR(<span style="color:#e6db74">&#34;sengmitnick sengmitnick@163.com&#34;</span>);
MODULE_DESCRIPTION(<span style="color:#e6db74">&#34;interrupt driver for the ls1b.&#34;</span>);
MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);

<span style="color:#75715e">#define interruptMEM_SIZE 0x1000
</span><span style="color:#75715e">#define MEM_CLEAR 0x1
</span><span style="color:#75715e">#define interrupt_irq 34
</span><span style="color:#75715e"></span>
 <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>
{
    dev_t devno;
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">cdev</span> cdev;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> mem[interruptMEM_SIZE];
}<span style="color:#f92672">*</span>interrupt_devp;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">interrupt_open</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_open, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">interrupt_release</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_release , CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">interrupt_read</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span> buffer, size_t len, loff_t <span style="color:#f92672">*</span> offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_read, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">interrupt_write</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>filp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span>buffer, size_t len, loff_t <span style="color:#f92672">*</span>offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt_write, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file_operations</span> interrupt_fops <span style="color:#f92672">=</span>
{
    .owner <span style="color:#f92672">=</span> THIS_MODULE,
    .read <span style="color:#f92672">=</span> interrupt_read,
    .write <span style="color:#f92672">=</span> interrupt_write,
    .open <span style="color:#f92672">=</span> interrupt_open,
    .release <span style="color:#f92672">=</span> interrupt_release,
};

irqreturn_t <span style="color:#a6e22e">interrupt_interrupt</span>(<span style="color:#66d9ef">int</span> irq,<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>dev_id)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;irq is %d .</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,irq);
    <span style="color:#66d9ef">return</span> (IRQ_HANDLED);
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">interrupt_init</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">int</span> ret;
    dev_t devno <span style="color:#f92672">=</span> MKDEV(<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">1</span>);
    <span style="color:#75715e">//ret = alloc_chrdev_region(&amp;amp;devno,0,1,&#34;interrupt&#34;);
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> register_chrdev_region(devno, <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;interrupt&#34;</span>);
    <span style="color:#66d9ef">if</span>(ret <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt:can&#39;t get major.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        <span style="color:#66d9ef">goto</span> fail;

    }
    printk(KERN_ALERT <span style="color:#e6db74">&#34;devno is %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,devno);


    interrupt_devp <span style="color:#f92672">=</span> kmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>),GFP_KERNEL );
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>interrupt_devp)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;ok!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        ret <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>ENOMEM;
        <span style="color:#66d9ef">goto</span> fail;
    }
    memset(interrupt_devp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">interrupt_dev</span>));
    interrupt_devp<span style="color:#f92672">-&gt;</span>devno <span style="color:#f92672">=</span> devno;
    cdev_init(<span style="color:#f92672">&amp;</span>amp;interrupt_devp<span style="color:#f92672">-&gt;</span>cdev,<span style="color:#f92672">&amp;</span>amp;interrupt_fops);
    interrupt_devp<span style="color:#f92672">-&gt;</span>cdev.owner <span style="color:#f92672">=</span> THIS_MODULE;
    ret <span style="color:#f92672">=</span> cdev_add(<span style="color:#f92672">&amp;</span>amp;interrupt_devp<span style="color:#f92672">-&gt;</span>cdev,devno,<span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span>(ret)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;Error %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ret);
        <span style="color:#66d9ef">goto</span> fail;
    }

    <span style="color:#75715e">//ret = request_irq(interrupt_irq,interrupt_interrupt,IRQF_SHARED,&#34;eth0&#34;,NULL);
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//注册中断服务函数，如果参数flags为IRQF_SHARED，参数dev_id就不能为NULL，不然中断不起作用。
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> request_irq(interrupt_irq,interrupt_interrupt,IRQF_SHARED,<span style="color:#e6db74">&#34;eth0&#34;</span>,interrupt_devp);

    enable_irq(interrupt_irq);

    printk(KERN_EMERG <span style="color:#e6db74">&#34;interrupt driver initialized, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

fail:
    <span style="color:#66d9ef">if</span>(devno <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
    {
        unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span>(interrupt_devp)
    {
        kfree(interrupt_devp);
    }
    <span style="color:#66d9ef">return</span> ret;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">interrupt_exit</span>(<span style="color:#66d9ef">void</span>)
{
    dev_t devno <span style="color:#f92672">=</span> interrupt_devp<span style="color:#f92672">-&gt;</span>devno;

    cdev_del(<span style="color:#f92672">&amp;</span>amp;interrupt_devp<span style="color:#f92672">-&gt;</span>cdev);
    <span style="color:#66d9ef">if</span>(interrupt_devp)
    {
        kfree(interrupt_devp);
    }
    unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);

    free_irq(interrupt_irq,interrupt_devp);

    printk(KERN_EMERG <span style="color:#e6db74">&#34;Goodbye , cruel CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}

module_init(interrupt_init);
module_exit(interrupt_exit);
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之led灯驱动程序</title>
            <link>https://sengmitnick.com/blog/16/</link>
            <pubDate>Mon, 03 Mar 2014 10:25:42 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/16/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;实验开发板：loongson1B&lt;/li&gt;
&lt;li&gt;linux内核版本：3.0&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc版本：4.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;基于hello进阶程序进一步改写，编写led灯驱动程序。&lt;/p&gt;
&lt;p&gt;实验要求：实现led灯驱动程序，在应用程序里直接控制LED的开关和读取状态控制&lt;/p&gt;
&lt;p&gt;代码实现如下：&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>实验开发板：loongson1B</li>
<li>linux内核版本：3.0</li>
<li>mipsel-linux-gcc版本：4.3.0</li>
</ul>

</div>
<p>基于hello进阶程序进一步改写，编写led灯驱动程序。</p>
<p>实验要求：实现led灯驱动程序，在应用程序里直接控制LED的开关和读取状态控制</p>
<p>代码实现如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: led.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Note: 实现led灯驱动程序，在应用程序里直接控制LED的开关和读取状态控制
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月26日 星期三 17时52分57秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/uaccess.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/device.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/ioctl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/vmalloc.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/ctype.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_AUTHOR(<span style="color:#e6db74">&#34;sengmitnick sengmitnick@163.com&#34;</span>);
MODULE_DESCRIPTION(<span style="color:#e6db74">&#34;LED driver for the ls1b.&#34;</span>);
MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);

<span style="color:#75715e">#define HELLOMEM_SIZE 0x1000
</span><span style="color:#75715e">#define MEM_CLEAR 0x1
</span><span style="color:#75715e">#define GPIOCFG0 (*(volatile unsigned *)0xbfd010C0)
</span><span style="color:#75715e">#define GPIOCFG1 (*(volatile unsigned *)0xbfd010C4)
</span><span style="color:#75715e">#define GPIOOE0 (*(volatile unsigned *)0xbfd010D0)
</span><span style="color:#75715e">#define GPIOOE1 (*(volatile unsigned *)0xbfd010D4)
</span><span style="color:#75715e">#define GPIOIN0 (*(volatile unsigned *)0xbfd010E0)
</span><span style="color:#75715e">#define GPIOIN1 (*(volatile unsigned *)0xbfd010E4)
</span><span style="color:#75715e">#define GPIOOUT0 (*(volatile unsigned *)0xbfd010F0)
</span><span style="color:#75715e">#define GPIOOUT1 (*(volatile unsigned *)0xbfd010F4)
</span><span style="color:#75715e"></span>
 <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">led_dev</span>
{
    dev_t devno;
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">cdev</span> cdev;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> mem[HELLOMEM_SIZE];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">led_dev</span> <span style="color:#f92672">*</span>led_devp;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">led_open</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    GPIOCFG1  <span style="color:#f92672">|=</span>    <span style="color:#ae81ff">0x000000C0</span> ;
    GPIOOE1   <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span>  <span style="color:#f92672">~</span>(<span style="color:#ae81ff">0x000000C0</span>);
    GPIOOUT1  <span style="color:#f92672">|=</span>   (<span style="color:#ae81ff">0x000000c0</span>);
    printk(KERN_EMERG <span style="color:#e6db74">&#34;led_open, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#75715e">//file-&gt;private_data = led_devp;
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">led_release</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;led_release , CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">led_read</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span> buffer, size_t len, loff_t <span style="color:#f92672">*</span> offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;led_read, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">led_write</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>filp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span>buffer, size_t len, loff_t <span style="color:#f92672">*</span>offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;led_write, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">led_ioctl</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inodep, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>filp, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> cmd, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> arg)
{
    GPIOCFG1  <span style="color:#f92672">|=</span>  <span style="color:#ae81ff">0x000000C0</span> ;
    <span style="color:#75715e">//static led_dev *dev = filp-&gt;private_data;/*获得设备结构体指针*/
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">switch</span> (cmd) {
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span>  <span style="color:#f92672">:</span> <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span>  <span style="color:#f92672">:</span> {GPIOOE1 <span style="color:#f92672">|=</span>   (<span style="color:#ae81ff">0x000000C0</span>);GPIOIN1  <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span> <span style="color:#f92672">~</span>(<span style="color:#ae81ff">0x000000c0</span>);<span style="color:#66d9ef">break</span>;}
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span>  <span style="color:#f92672">:</span> {GPIOOE1 <span style="color:#f92672">|=</span>   (<span style="color:#ae81ff">0x000000C0</span>);GPIOIN1  <span style="color:#f92672">|=</span>  (<span style="color:#ae81ff">0x000000c0</span>);<span style="color:#66d9ef">break</span>;}
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span>  <span style="color:#f92672">:</span> {GPIOOE1 <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span>  <span style="color:#f92672">~</span>(<span style="color:#ae81ff">0x000000C0</span>);GPIOOUT1 <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span> <span style="color:#f92672">~</span>(<span style="color:#ae81ff">0x000000c0</span>);<span style="color:#66d9ef">break</span>;}
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span>  <span style="color:#f92672">:</span> {GPIOOE1 <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">=</span>  <span style="color:#f92672">~</span>(<span style="color:#ae81ff">0x000000C0</span>);GPIOOUT1 <span style="color:#f92672">|=</span>  (<span style="color:#ae81ff">0x000000c0</span>);<span style="color:#66d9ef">break</span>;}
    <span style="color:#66d9ef">default</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span> EINVAL;
}
<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file_operations</span> led_fops <span style="color:#f92672">=</span>
{
    .owner <span style="color:#f92672">=</span> THIS_MODULE,
    .read <span style="color:#f92672">=</span> led_read,
    .write <span style="color:#f92672">=</span> led_write,
    .open <span style="color:#f92672">=</span> led_open,
    .unlocked_ioctl <span style="color:#f92672">=</span> led_ioctl,
    .release <span style="color:#f92672">=</span> led_release,
};

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">led_init</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">int</span> ret;
    dev_t devno <span style="color:#f92672">=</span> MKDEV(<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">1</span>);
    <span style="color:#75715e">//ret = alloc_chrdev_region(&amp;amp;devno,0,1,&#34;led&#34;);
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> register_chrdev_region(devno, <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;led&#34;</span>);
    <span style="color:#66d9ef">if</span>(ret <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;led:can&#39;t get major.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        <span style="color:#66d9ef">goto</span> fail;

    }
    printk(KERN_ALERT <span style="color:#e6db74">&#34;devno is %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,devno);


    led_devp <span style="color:#f92672">=</span> kmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">led_dev</span>),GFP_KERNEL );
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>led_devp)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;ok!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        ret <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>ENOMEM;
        <span style="color:#66d9ef">goto</span> fail;
    }
    memset(led_devp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">led_dev</span>));
    led_devp<span style="color:#f92672">-&gt;</span>devno <span style="color:#f92672">=</span> devno;
    cdev_init(<span style="color:#f92672">&amp;</span>amp;led_devp<span style="color:#f92672">-&gt;</span>cdev,<span style="color:#f92672">&amp;</span>amp;led_fops);
    led_devp<span style="color:#f92672">-&gt;</span>cdev.owner <span style="color:#f92672">=</span> THIS_MODULE;
    ret <span style="color:#f92672">=</span> cdev_add(<span style="color:#f92672">&amp;</span>amp;led_devp<span style="color:#f92672">-&gt;</span>cdev,devno,<span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span>(ret)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;Error %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ret);
        <span style="color:#66d9ef">goto</span> fail;
    }

    printk(KERN_EMERG <span style="color:#e6db74">&#34;led driver initialized, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

fail:
    <span style="color:#66d9ef">if</span>(devno <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
    {
        unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span>(led_devp)
    {
        kfree(led_devp);
    }
    <span style="color:#66d9ef">return</span> ret;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">led_exit</span>(<span style="color:#66d9ef">void</span>)
{
    dev_t devno <span style="color:#f92672">=</span> led_devp<span style="color:#f92672">-&gt;</span>devno;

    cdev_del(<span style="color:#f92672">&amp;</span>amp;led_devp<span style="color:#f92672">-&gt;</span>cdev);
    <span style="color:#66d9ef">if</span>(led_devp)
    {
        kfree(led_devp);
    }
    unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    printk(KERN_EMERG <span style="color:#e6db74">&#34;Goodbye , cruel CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}

module_init(led_init);
module_exit(led_exit);
</code></pre></div><p>编写简单应用程序进行测试。</p>
<p>首先，创建设备节点：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mknod -m <span style="color:#ae81ff">0666</span> /dev/led c <span style="color:#ae81ff">250</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>然后，编写程序，例子代码如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: main.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月28日 星期五 12时53分52秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/types.h&gt;    </span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/stat.h&gt;    </span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[])
{
    <span style="color:#66d9ef">int</span> fd,i;
    fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;/dev/led&#34;</span>, O_RDWR);
    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,fd);  
    i <span style="color:#f92672">=</span>  <span style="color:#f92672">*</span>argv[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;0&#39;</span>;
    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,i);
    ioctl(fd,i,<span style="color:#ae81ff">1</span>);
    close(fd);
}
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>对printk 函数的详细解释</title>
            <link>https://sengmitnick.com/blog/15/</link>
            <pubDate>Mon, 03 Mar 2014 10:22:55 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/15/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    本文转载自&lt;a href=&#34;http://blog.sina.com.cn/s/blog_636a55070101i6sr.html&#34;&gt;http://blog.sina.com.cn/s/blog_636a55070101i6sr.html&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;首先，printk有8个loglevel,定义在&amp;lt;linux/kernel.h&amp;gt;中，其中数值范围从0到7，数值越小，优先级越高。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_EMERG   &amp;#34;&amp;lt;0&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//系统崩溃
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_ALERT   &amp;#34;&amp;lt;1&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//必须紧急处理
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_CRIT    &amp;#34;&amp;lt;2&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//临界条件，严重的硬软件错误
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_ERR     &amp;#34;&amp;lt;3&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//报告错误
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_WARNING &amp;#34;&amp;lt;4&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//警告
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_NOTICE  &amp;#34;&amp;lt;5&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//普通但还是须注意
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_INFO    &amp;#34;&amp;lt;6&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define    KERN_DEBUG   &amp;#34;&amp;lt;7&amp;gt;&amp;#34;      &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//调试信息
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这里也可以看出他们的优先级是数值越小，其紧急和严重程度就越高。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    本文转载自<a href="http://blog.sina.com.cn/s/blog_636a55070101i6sr.html">http://blog.sina.com.cn/s/blog_636a55070101i6sr.html</a>
</div>
<p>首先，printk有8个loglevel,定义在&lt;linux/kernel.h&gt;中，其中数值范围从0到7，数值越小，优先级越高。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#define    KERN_EMERG   &#34;&lt;0&gt;&#34;      </span><span style="color:#75715e">//系统崩溃
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_ALERT   &#34;&lt;1&gt;&#34;      </span><span style="color:#75715e">//必须紧急处理
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_CRIT    &#34;&lt;2&gt;&#34;      </span><span style="color:#75715e">//临界条件，严重的硬软件错误
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_ERR     &#34;&lt;3&gt;&#34;      </span><span style="color:#75715e">//报告错误
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_WARNING &#34;&lt;4&gt;&#34;      </span><span style="color:#75715e">//警告
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_NOTICE  &#34;&lt;5&gt;&#34;      </span><span style="color:#75715e">//普通但还是须注意
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_INFO    &#34;&lt;6&gt;&#34;      </span><span style="color:#75715e">//信息
</span><span style="color:#75715e"></span><span style="color:#75715e">#define    KERN_DEBUG   &#34;&lt;7&gt;&#34;      </span><span style="color:#75715e">//调试信息
</span></code></pre></div><p>从这里也可以看出他们的优先级是数值越小，其紧急和严重程度就越高。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> console_printk[];

<span style="color:#75715e">#define console_loglevel (console_printk[0])
</span><span style="color:#75715e">#define default_message_loglevel (console_printk[1])
</span><span style="color:#75715e">#define minimum_console_loglevel (console_printk[2])
</span><span style="color:#75715e">#define default_console_loglevel (console_printk[3])
</span></code></pre></div><p>未指定优先级的默认级别定义在 <strong>/kernel/printk.c</strong> 中：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#define DEFAULT_MESSAGE_LOGLEVEL 4
</span><span style="color:#75715e">#define MINIMUM_CONSOLE_LOGLEVEL 1
</span><span style="color:#75715e">#define DEFAULT_CONSOLE_LOGLEVEL 7
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> console_printk[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {
       DEFAULT_CONSOLE_LOGLEVEL,   <span style="color:#75715e">//终端级别
</span><span style="color:#75715e"></span>       DEFAULT_MESSAGE_LOGLEVEL,   <span style="color:#75715e">//默认级别
</span><span style="color:#75715e"></span>       MINIMUM_CONSOLE_LOGLEVEL,   <span style="color:#75715e">//让用户使用的最小级别
</span><span style="color:#75715e"></span>       DEFAULT_CONSOLE_LOGLEVEL,   <span style="color:#75715e">//默认终端级别
</span><span style="color:#75715e"></span>};
</code></pre></div><p>当优先级的值小于 <code>console_loglevel</code> 这个整数变量的值，信息才能显示出来。而 <code>console_loglevel</code>的初始值 <code>DEFAULT_CONSOLE_LOGLEVEL</code> 也定义在 <strong>/kernel/printk.c</strong> 中：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat /proc/sys/kernel/printk
<span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">7</span>
</code></pre></div><p>这个默认值是在 <code>sysctl.conf</code> 中写的，在系统启动时就把这个值写到 <strong>/proc/sys/kernel/printk</strong> 这个文件了。也可以使用下面的命令修改其值</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/proc/sys/kernel/printk
cat /proc/sys/kernel/printk
<span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">7</span>
</code></pre></div><p>它们根据日志记录消息的重要性，定义将其发送到何处。关于不同日志级别的更多信息，请阅读 syslog(2) 联机帮助页。
该文件的四个值为：</p>
<ul>
<li>控制台日志级别：优先级高于该值的消息将被打印至控制台</li>
<li>缺省的消息日志级别：将用该优先级来打印没有优先级的消息</li>
<li>最低的控制台日志级别：控制台日志级别可被设置的最小值（最高优先级）</li>
<li>缺省的控制台日志级别：控制台日志级别的缺省值</li>
</ul>
<p>以下是我的测试程序和作的相关的测试。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/kernel.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">pinit</span>(<span style="color:#66d9ef">void</span>)
{
printk(<span style="color:#e6db74">&#34;&lt;0&gt;goodluck0!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;1&gt;goodluck1!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;2&gt;goodluck2!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;3&gt;goodluck3!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;4&gt;goodluck4!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;5&gt;goodluck5!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;6&gt;goodluck6!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;7&gt;goodluck7!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;8&gt;goodluck8!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);<span style="color:#75715e">//虽然没有这级别，我还是试了一把。目的是看默认级别。
</span><span style="color:#75715e"></span><span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">pexit</span>(<span style="color:#66d9ef">void</span>)
{
printk(<span style="color:#e6db74">&#34;&lt;0&gt;goodbey!0</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;1&gt;goodbey!1</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;2&gt;goodbey!2</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;3&gt;goodbey!3</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;4&gt;goodbey!4</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;5&gt;goodbey!5</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;6&gt;goodbey!6</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
printk(<span style="color:#e6db74">&#34;&lt;7&gt;goodbey!7</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}

module_init(pinit);
module_exit(pexit);
</code></pre></div><p>在这里我只观察了四个比较重要的日志文件：messages，kern.log，syslog，debug。这四个文件都在/var/log/这个目录下。它的日志文件经观察未出现这些 <code>printk</code> 信息。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cat /proc/sys/kernel/printk
<span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">7</span>
在上面这种情况下日志文件的变化情况是：
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。
cat /proc/sys/kernel/printk
<span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">7</span>
在上面这种情况下日志文件的变化情况是：
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。

cat /proc/sys/kernel/printk
<span style="color:#ae81ff">7</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">7</span>
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。
</code></pre></div><p>分析结论：在操作系统是图形化的界面下测试证明-日志记录和终端级别是没有关系的，但是在文本界面下的结果和这里是不太一样的，根据不同的设置有些信息会输出到终端。这里就不多说了。</p>
<p>其次有关于系统的日志记录工具有两种主要的：syslog和klog。</p>
<p>Linux系统中/etc/init.d/sysklogd会启动2个守护进程:Klogd, Syslogd。</p>
<p>syslog是 Unix 系统的一个常见组件，用于执行系统日志记录活动。syslogd 是它的守护进程。syslogd 从一组日志源（如 /dev/log 和 /dev/klog ）中读取数据，并按照 /etc/syslog.conf 中的说明处理这些日志消息。通过调用syslog()，可将应用程序日志消息记录到 syslog 中。syslog 消息采用一种包含可选优先级和设备的标准格式。优先级指示消息的紧急程度。设备指示发布消息的子系统。/usr/include/syslog.h中定义了它的优先级和设备资源。</p>
<p>klog是一个从Unix内核接受消息的设备klogd 守护进程获得并记录 Linux 内核信息。通常，syslogd 会记录 klogd 传来的所有内核信息。</p>
<p>syslogd的配置文件是/etc/syslog.conf。</p>
<p>下面是我机子上这个文件的部分内容。主要是对debug和messages文件要记录内容的设置。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">*.<span style="color:#f92672">=</span>debug;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        auth,authpriv.none;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        news.none;mail.none     -/var/log/debug
*.<span style="color:#f92672">=</span>info;*.<span style="color:#f92672">=</span>notice;*.<span style="color:#f92672">=</span>warn;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        auth,authpriv.none;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        cron,daemon.none;<span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        mail,news.none          -/var/log/messages
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>写驱动模块时编译出错总结</title>
            <link>https://sengmitnick.com/blog/14/</link>
            <pubDate>Mon, 03 Mar 2014 10:21:19 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/14/</guid>
            <description>&lt;p&gt;错误1：error: implicit declaration of function ‘kmalloc’&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;
缺少了一个头文件，添加上就可以了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;linux/slab.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
            <content type="html"><![CDATA[<p>错误1：error: implicit declaration of function ‘kmalloc’</p>
<p><strong>解决方法：</strong>
缺少了一个头文件，添加上就可以了</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span></code></pre></div><p>待续。。。</p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之hello word程序进阶学习</title>
            <link>https://sengmitnick.com/blog/12/</link>
            <pubDate>Mon, 03 Mar 2014 10:17:30 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/12/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;实验开发板：loongson1B&lt;/li&gt;
&lt;li&gt;linux内核版本：3.0&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc版本：4.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;进一步修改hello.c&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>实验开发板：loongson1B</li>
<li>linux内核版本：3.0</li>
<li>mipsel-linux-gcc版本：4.3.0</li>
</ul>

</div>
<p>进一步修改hello.c</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: hello.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Note: 改写hello驱动程序，使其在应用程序调用open，read，write，close
</span><span style="color:#75715e">            时能在驱动里打印出来
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月26日 星期三 17时52分57秒
</span><span style="color:#75715e"> ************************************************************************/</span>

<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/slab.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/types.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/fs.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/errno.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/mm.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/sched.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/cdev.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/io.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
MODULE_AUTHOR(<span style="color:#e6db74">&#34;sengmitnick sengmitnick@163.com&#34;</span>);
MODULE_DESCRIPTION(<span style="color:#e6db74">&#34;hello test driver for the ls1b.&#34;</span>);
MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);

<span style="color:#75715e">#define HELLOMEM_SIZE 0x1000
</span><span style="color:#75715e">#define MEM_CLEAR 0x1
</span><span style="color:#75715e"></span>
 <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">hello_dev</span>
{
    dev_t devno;
    <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">cdev</span> cdev;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> mem[HELLOMEM_SIZE];
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">hello_dev</span> <span style="color:#f92672">*</span>hello_devp;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hello_open</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;hello_open, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#75715e">//file-&gt;private_data = hello_devp;
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hello_release</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">inode</span> <span style="color:#f92672">*</span>inode, <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>file)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;hello_release , CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">hello_read</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span> filp, <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span> buffer, size_t len, loff_t <span style="color:#f92672">*</span> offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;hello_read, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> ssize_t <span style="color:#a6e22e">hello_write</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">*</span>filp, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> __user <span style="color:#f92672">*</span>buffer, size_t len, loff_t <span style="color:#f92672">*</span>offset)
{
    printk(KERN_EMERG <span style="color:#e6db74">&#34;hello_write, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">file_operations</span> hello_fops <span style="color:#f92672">=</span>
{
    .owner <span style="color:#f92672">=</span> THIS_MODULE,
    .read <span style="color:#f92672">=</span> hello_read,
    .write <span style="color:#f92672">=</span> hello_write,
    .open <span style="color:#f92672">=</span> hello_open,
    .release <span style="color:#f92672">=</span> hello_release,
};

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> __init <span style="color:#a6e22e">hello_init</span>(<span style="color:#66d9ef">void</span>)
{
    <span style="color:#66d9ef">int</span> ret;
    dev_t devno <span style="color:#f92672">=</span> MKDEV(<span style="color:#ae81ff">250</span>, <span style="color:#ae81ff">1</span>);
    <span style="color:#75715e">//ret = alloc_chrdev_region(&amp;amp;devno,0,1,&#34;hello&#34;);
</span><span style="color:#75715e"></span>    ret <span style="color:#f92672">=</span> register_chrdev_region(devno, <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;hello&#34;</span>);
    <span style="color:#66d9ef">if</span>(ret <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;hello:can&#39;t get major.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        <span style="color:#66d9ef">goto</span> fail;

    }
    printk(KERN_ALERT <span style="color:#e6db74">&#34;devno is %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,devno);


    hello_devp <span style="color:#f92672">=</span> kmalloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">hello_dev</span>),GFP_KERNEL );
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>hello_devp)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;ok!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        ret <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>ENOMEM;
        <span style="color:#66d9ef">goto</span> fail;
    }
    memset(hello_devp,<span style="color:#ae81ff">0</span>,<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">hello_dev</span>));
    hello_devp<span style="color:#f92672">-&gt;</span>devno <span style="color:#f92672">=</span> devno;
    cdev_init(<span style="color:#f92672">&amp;</span>amp;hello_devp<span style="color:#f92672">-&gt;</span>cdev,<span style="color:#f92672">&amp;</span>amp;hello_fops);
    hello_devp<span style="color:#f92672">-&gt;</span>cdev.owner <span style="color:#f92672">=</span> THIS_MODULE;
    ret <span style="color:#f92672">=</span> cdev_add(<span style="color:#f92672">&amp;</span>amp;hello_devp<span style="color:#f92672">-&gt;</span>cdev,devno,<span style="color:#ae81ff">1</span>);
    <span style="color:#66d9ef">if</span>(ret)
    {
        printk(KERN_EMERG <span style="color:#e6db74">&#34;Error %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, ret);
        <span style="color:#66d9ef">goto</span> fail;
    }

    printk(KERN_EMERG <span style="color:#e6db74">&#34;hello driver initialized, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;

fail:
    <span style="color:#66d9ef">if</span>(devno <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>)
    {
        unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">if</span>(hello_devp)
    {
        kfree(hello_devp);
    }
    <span style="color:#66d9ef">return</span> ret;
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> __exit <span style="color:#a6e22e">hello_exit</span>(<span style="color:#66d9ef">void</span>)
{
    dev_t devno <span style="color:#f92672">=</span> hello_devp<span style="color:#f92672">-&gt;</span>devno;

    cdev_del(<span style="color:#f92672">&amp;</span>amp;hello_devp<span style="color:#f92672">-&gt;</span>cdev);
    <span style="color:#66d9ef">if</span>(hello_devp)
    {
        kfree(hello_devp);
    }
    unregister_chrdev_region(devno, <span style="color:#ae81ff">1</span>);
    printk(KERN_EMERG <span style="color:#e6db74">&#34;Goodbye , cruel CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}

module_init(hello_init);
module_exit(hello_exit);
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>对编译烧写Linux内核(MIPS )过程中及成功后却出现问题的问题总结</title>
            <link>https://sengmitnick.com/blog/10/</link>
            <pubDate>Thu, 27 Feb 2014 10:00:24 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/10/</guid>
            <description>&lt;div class=&#34;note default&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;系统: Kubuntu14.04&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc: gcc version 4.3.0 (GCC)&lt;/li&gt;
&lt;li&gt;MIPS内核版本: linux 3.0.0+&lt;/li&gt;
&lt;li&gt;开发板: loongson 1B&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</description>
            <content type="html"><![CDATA[<div class="note default">
    <ul>
<li>系统: Kubuntu14.04</li>
<li>mipsel-linux-gcc: gcc version 4.3.0 (GCC)</li>
<li>MIPS内核版本: linux 3.0.0+</li>
<li>开发板: loongson 1B</li>
</ul>

</div>
<h2 id="mmcsd卡驱动的问题-不断的mmc0-mmc_rescan_try_freq-trying-to-init-card-at-400000-hz">MMC/SD卡驱动的问题: 不断的mmc0: mmc_rescan_try_freq: trying to init card at 400000 Hz</h2>
<p><strong>解决方法：</strong></p>
<ol>
<li>重新配置内核，禁用SD卡驱动</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Device Drivers  ---&gt;
----    &lt;*&gt; MMC/SD/SDIO card support  ---&gt;
---------    &lt; &gt;   MMC/SD/SDIO over SPI
</code></pre></div><ol start="2">
<li>在SD卡槽里插入SD卡</li>
</ol>
<h2 id="内核烧写后进去不停的出现乱码">内核烧写后进去不停的出现乱码</h2>
<p><strong>解决方法：</strong> 重新配置内核</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Machine selection  ---&gt;
----       LS1B board configure <span style="color:#f92672">(</span>ls1b_board<span style="color:#f92672">)</span>  ---&gt;
--------    <span style="color:#f92672">(</span>X<span style="color:#f92672">)</span> ls1b_board
--------    <span style="color:#f92672">(</span> <span style="color:#f92672">)</span> ls1b_core_board
</code></pre></div><h2 id="文件系统中只能注册模块不能卸载模块即可以使用insmod却不能使用rmmod">文件系统中只能注册模块不能卸载模块（即可以使用insmod却不能使用rmmod）</h2>
<p><strong>解决方法：</strong> 重新配置内核，添加内核对rmmod的支持</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Enable loadable module support  ---&gt;
--- Enable loadable module support ---
<span style="color:#f92672">[</span> <span style="color:#f92672">]</span>   Forced module loading
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span>   Module unloading
<span style="color:#f92672">[</span> <span style="color:#f92672">]</span>     Forced module unloading
<span style="color:#f92672">[</span> <span style="color:#f92672">]</span>   Module versioning support
<span style="color:#f92672">[</span> <span style="color:#f92672">]</span>   Source checksum <span style="color:#66d9ef">for</span> all modules
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>初步学习linux内核模块和设备驱动程序之hello word程序</title>
            <link>https://sengmitnick.com/blog/8/</link>
            <pubDate>Wed, 26 Feb 2014 09:39:44 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/8/</guid>
            <description>&lt;div class=&#34;note default&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;实验开发板：loongson1B&lt;/li&gt;
&lt;li&gt;linux内核版本：3.0&lt;/li&gt;
&lt;li&gt;mipsel-linux-gcc版本：4.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;p&gt;编写 &lt;code&gt;hello.c&lt;/code&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<div class="note default">
    <ul>
<li>实验开发板：loongson1B</li>
<li>linux内核版本：3.0</li>
<li>mipsel-linux-gcc版本：4.3.0</li>
</ul>

</div>
<p>编写 <code>hello.c</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">/*************************************************************************
</span><span style="color:#75715e">    &gt; File Name: hello.c
</span><span style="color:#75715e">    &gt; Author: sengmitnick
</span><span style="color:#75715e">    &gt; Mail: sengmitnick@163.com
</span><span style="color:#75715e">    &gt; Created Time: 2014年02月26日 星期三 17时52分57秒
</span><span style="color:#75715e"> ************************************************************************/</span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/init.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/module.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>MODULE_LICENSE(<span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>);
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">hello_init</span>(<span style="color:#66d9ef">void</span>)
{
    printk(KERN_ALERT <span style="color:#e6db74">&#34;hello, CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">hello_exit</span>(<span style="color:#66d9ef">void</span>)
{
    printk(KERN_ALERT <span style="color:#e6db74">&#34;Goodbye , cruel CPP!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}
module_init(hello_init);
module_exit(hello_exit);
</code></pre></div><p>编写Makefile：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Makefile" data-lang="Makefile"><span style="color:#960050;background-color:#1e0010">ifneq</span> <span style="color:#960050;background-color:#1e0010">(</span><span style="color:#66d9ef">$(</span>KERNELRELEASE<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">,)</span>
obj-m <span style="color:#f92672">:=</span> hello.o
<span style="color:#960050;background-color:#1e0010">else</span>
KDIR <span style="color:#f92672">?=</span> /lib/modules/<span style="color:#66d9ef">$(</span>shell uname -r<span style="color:#66d9ef">)</span>/build
PWD <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell pwd<span style="color:#66d9ef">)</span>
<span style="color:#a6e22e">default</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KDIR<span style="color:#66d9ef">)</span> SUBDIRS<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> modules
<span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KDIR<span style="color:#66d9ef">)</span> SUBDIRS<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> clean
    rm -rf Module.markers modules.order Module.symvers
<span style="color:#960050;background-color:#1e0010">endif</span>
</code></pre></div><p>在命令行执行以下操作：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">make
sudo insmod ./hello.ko
dmesg | tail
sudo rmmod hello.ko
dmesg | tail
</code></pre></div><p>如果我们要把这个设备驱动移植到开发板上，就得进行以下操作：</p>
<div class="note info">
    开发板： loongson 1B
</div>
<p>编写Makefile：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Makefile" data-lang="Makefile"><span style="color:#960050;background-color:#1e0010">ifneq</span> <span style="color:#960050;background-color:#1e0010">(</span><span style="color:#66d9ef">$(</span>KERNELRELEASE<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">,)</span>
obj-m <span style="color:#f92672">:=</span> hello.o
<span style="color:#960050;background-color:#1e0010">else</span>
KDIR <span style="color:#f92672">?=</span> .../1b-linux-3.0-20130104/  <span style="color:#75715e">#这个路径改为你要烧写带板上的内核路径。</span>
PWD <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>shell pwd<span style="color:#66d9ef">)</span>
<span style="color:#a6e22e">default</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KDIR<span style="color:#66d9ef">)</span> SUBDIRS<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> modules
<span style="color:#a6e22e">clean</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">$(</span>MAKE<span style="color:#66d9ef">)</span> -C <span style="color:#66d9ef">$(</span>KDIR<span style="color:#66d9ef">)</span> SUBDIRS<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>PWD<span style="color:#66d9ef">)</span> clean
    rm -rf Module.markers modules.order Module.symvers
<span style="color:#960050;background-color:#1e0010">endif</span>
</code></pre></div><p>编译好后会生成一个hello.ko的文件，把该文件copy到板上，</p>
<p>在板上命令行执行以下操作：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo insmod ./hello.ko
dmesg | tail
sudo rmmod hello.ko
dmesg | tail
</code></pre></div><p>该过程中会出现一个问题，就是<a href="/blog/10/#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8F%AA%E8%83%BD%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97%E4%B8%8D%E8%83%BD%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97%E5%8D%B3%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8insmod%E5%8D%B4%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8rmmod">只能注册模块不能卸载模块（即可以使用insmod却不能使用rmmod</a>。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>Qt下使用QtSql连接sqlite3所遇到的问题</title>
            <link>https://sengmitnick.com/blog/7/</link>
            <pubDate>Tue, 25 Feb 2014 09:33:57 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/7/</guid>
            <description>&lt;div class=&#34;note danger&#34;&gt;
    开发环境：Qt Creator 2.8.1Based on Qt 5.0.2 (GCC 4.8.2, 32 bit)
&lt;/div&gt;</description>
            <content type="html"><![CDATA[<div class="note danger">
    开发环境：Qt Creator 2.8.1Based on Qt 5.0.2 (GCC 4.8.2, 32 bit)
</div>
<p>问题1：编译无错误，在执行时终端出现以下字母：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">QSqlDatabasePrivate::addDatabase: duplicate connection name <span style="color:#e6db74">&#39;qt_sql_default_connection&#39;</span>, old connection removed
</code></pre></div><p>问题所在代码段：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">QSqlDatabase db <span style="color:#f92672">=</span> QSqlDatabase<span style="color:#f92672">::</span>addDatabase(<span style="color:#e6db74">&#34;QSQLITE&#34;</span>);
</code></pre></div><p>解决方法：把问题所在代码段改为以下代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">QSqlDatabase db;
<span style="color:#66d9ef">if</span>(QSqlDatabase<span style="color:#f92672">::</span>contains(<span style="color:#e6db74">&#34;GBond&#34;</span>))
db <span style="color:#f92672">=</span> QSqlDatabase<span style="color:#f92672">::</span>database(<span style="color:#e6db74">&#34;GBond&#34;</span>);
<span style="color:#66d9ef">else</span>
db <span style="color:#f92672">=</span> QSqlDatabase<span style="color:#f92672">::</span>addDatabase(<span style="color:#e6db74">&#34;QSQLITE&#34;</span>, <span style="color:#e6db74">&#34;GBond&#34;</span>);
</code></pre></div><p>这样一来，以上问题就解决了。不过，再次执行时终端出现以下字母：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
</code></pre></div><p>问题所在代码段：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">QSqlQuery query;
QString sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INSERT INTO contact VALUES(1 , &#39;smk&#39; , 17 , &#39;friend&#39;, &#39;18998416978&#39; );&#34;</span> ;
query.exec(sql);
</code></pre></div><p>解决方法：把问题所在代码段改为以下代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">QSqlQuery <span style="color:#a6e22e">query</span>(db);
QString sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INSERT INTO contact VALUES(1 , &#39;smk&#39; , 17 , &#39;friend&#39;, &#39;18998416978&#39; );&#34;</span> ;
query.exec(sql);
</code></pre></div><p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>QT课程总结</title>
            <link>https://sengmitnick.com/blog/6/</link>
            <pubDate>Mon, 17 Feb 2014 09:25:50 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/6/</guid>
            <description>&lt;h2 id=&#34;搭建qt开发环境其中包括本地桌面版qt编译嵌入式qt图形库的编译&#34;&gt;搭建QT开发环境，其中包括本地(桌面版)qt编译，嵌入式QT图形库的编译&lt;/h2&gt;
&lt;h3 id=&#34;遇到问题&#34;&gt;遇到问题：&lt;/h3&gt;
&lt;p&gt;（1）配置时报错：“tslib functionly test fail!” 。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="搭建qt开发环境其中包括本地桌面版qt编译嵌入式qt图形库的编译">搭建QT开发环境，其中包括本地(桌面版)qt编译，嵌入式QT图形库的编译</h2>
<h3 id="遇到问题">遇到问题：</h3>
<p>（1）配置时报错：“tslib functionly test fail!” 。</p>
<h3 id="解决办法1">解决办法1：</h3>
<p>没有指定触摸屏库的位置，配置时指定可以解决，或者在<code>mkspecs/qws/linux-mips-g++/qmake.conf</code>里</p>
<p>指定两个qt环境变量：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp">QMAKE_INCDIR            <span style="color:#f92672">+=</span> <span style="color:#f92672">/</span>opt<span style="color:#f92672">/</span>mipsel<span style="color:#f92672">/</span>tslib<span style="color:#f92672">/</span>include
QMAKE_LIBDIR            <span style="color:#f92672">+=</span> <span style="color:#f92672">/</span>opt<span style="color:#f92672">/</span>mipsel<span style="color:#f92672">/</span>tslib<span style="color:#f92672">/</span>lib
</code></pre></div><h3 id="解决办法2检查并确保实际库是否正确">解决办法2：检查并确保实际库是否正确</h3>
<p>（2）出现交叉工具链没有找到的情况，主要解决方法是把工具链的路径加到PATH环境变量里。</p>
<p>（3）在安装交叉工具链的时候，要注意特定的路径。</p>
<p>（4）出现编译工程时，产生的Makefile，无法正确指定编译器（交叉工具链）。</p>
<p>qmake的路径必须是交叉编译产生的工具</p>
<p>QMAKESPEC必须在交叉编译QT库里的路径（mkspecs/qws/linux-mips-g++/）</p>
<p>（5）编译器工具链版本与图形库源码版本不一致的情况下，都可以出现编译出错的问题。</p>
<h2 id="qt程序是框架qapplication类编写helloworld例子主要是通过label类显示字符串">QT程序是框架，QApplication类。编写helloworld例子，主要是通过Label类显示字符串</h2>
<h2 id="qt布局水平垂直网格三种布局方式">QT布局，水平、垂直、网格三种布局方式</h2>
<p>写AddressBook类的图形布局。</p>
<p>可以通过qtdesigner来进行图形界面的布局。</p>
<p>可以通过QT集成开发环境qtcreator来进行Qt程序开发。</p>
<h2 id="qt信号与槽机制">QT信号与槽机制</h2>
<ol>
<li>应用于对象之间的通信</li>
<li>当信号与槽相关联的时候，信号产生，与之对应的槽函数就会调用。</li>
<li>通过connect函数进行信号与槽的关联，通过disconnect去除关联。</li>
<li>信号可以信号，一个信号可以关联多个槽。</li>
<li>信号不是函数，槽是函数</li>
<li>信号与槽可以通过参数来传递数据</li>
<li>在类的声明的时候，要在类声明开始声明Q_OBJECT宏。</li>
<li>槽函数声明的时候指定权限&ndash;public、pravite、pretect，不同的权限决定了其作用范围。</li>
</ol>
<h2 id="做addressbook例程时通过qmap容器类来保存数据">做AddressBook例程时，通过QMap容器类来保存数据</h2>
<h2 id="计算器例程">计算器例程。</h2>
<ol>
<li>尽量以简单的方式去做动作，使逻辑尽量的简单。</li>
<li>表达式的运算算法。</li>
</ol>
<h2 id="数码相框">数码相框</h2>
<ol>
<li>显示jpeg、jpg这一类的图片的时候，无法显示
<ol>
<li>编译时，要工程文件.pro里，加QTPLUGIN += qjpeg。</li>
<li>拷贝plugins/imageformats/目录的libqjpeg.so到板上。可以拷贝到/lib目录，如果拷贝到其它目录下，就需要在LD_LIBRARY_PATH里增加这个库的路径。</li>
<li>要对qt运行时的环境变量QT_PLUGIN_PATH的值为插件的路径。</li>
</ol>
</li>
<li>对于控件的动画特效无法完成。通过更新Qt图形库的版本来解决。
<ol>
<li>编译新版本的库的时候，注意配置时候的一些参数，还有注意用新版本的工具链进行编译。</li>
</ol>
</li>
<li>当文件系统的运行库所用的工具链版本与应用程序编译时所用的工具链不一致的情况下，可能出现不可预料的问题。</li>
<li>根据实际的使用环境去设计图形界面，也就是要注意我们产品的使用场合是嵌入式小产品的场合，所以根据这种小屏显示的情况进行图形界面的设计。还注意用户体验，好玩、好用、方便。</li>
</ol>
<h2 id="网络编程----即时通信工具例程">网络编程 &ndash; 即时通信工具例程</h2>
<ol>
<li>UDP与TCP通信方式的特点。UDP是实时的、不可靠的通信，TCP是可靠、有延时、基于连接的一种通信方式。</li>
<li>根据通信方式的特点在不同的应用场合使用不同的通信方式。</li>
<li>通过QT的socket类可以非常方便的完成网络通信。</li>
</ol>
<h2 id="数据库">数据库</h2>
<h2 id="qtopia的移植与使用">QTOPIA的移植与使用</h2>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>超简单的数码相框制作</title>
            <link>https://sengmitnick.com/blog/5/</link>
            <pubDate>Sat, 15 Feb 2014 09:14:23 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/5/</guid>
            <description>&lt;div class=&#34;note info&#34;&gt;
    &lt;ul&gt;
&lt;li&gt;项目名称：数码相框（简单）&lt;/li&gt;
&lt;li&gt;项目分类：嵌入式应用开发&lt;/li&gt;
&lt;li&gt;PC机系统环境：ubuntu10.04&lt;/li&gt;
&lt;li&gt;PC机Qt版本：QMake version 2.01a Using Qt version 4.5.3 Qt Creator 1.2.0 based on Qt 4.5.2&lt;/li&gt;
&lt;li&gt;开发板：loongson 1B&lt;/li&gt;
&lt;li&gt;开发板系统环境：嵌入式Linux&lt;/li&gt;
&lt;li&gt;开发板Qt版本：QMake version 2.01a Using Qt version 4.5.3&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;</description>
            <content type="html"><![CDATA[<div class="note info">
    <ul>
<li>项目名称：数码相框（简单）</li>
<li>项目分类：嵌入式应用开发</li>
<li>PC机系统环境：ubuntu10.04</li>
<li>PC机Qt版本：QMake version 2.01a Using Qt version 4.5.3 Qt Creator 1.2.0 based on Qt 4.5.2</li>
<li>开发板：loongson 1B</li>
<li>开发板系统环境：嵌入式Linux</li>
<li>开发板Qt版本：QMake version 2.01a Using Qt version 4.5.3</li>
</ul>

</div>
<h2 id="项目介绍">项目介绍</h2>
<p>数码相框： Digital Photo Frame</p>
<p>数码相框是观看和分享数码照片的专用设备。</p>
<div class="note info">
    数码相框是展示数码照片而非纸质照片的相框。数码摄影必然推动数码相框的发展，因为全世界打印的数码相片不到35%。数码相框通常直接插上相机的存储卡展示照片，当然更多的数码相框会提供内部存储空间以接外接存储卡功能。数码相框就是一个相框，不过它不再用放进相片的方式来展示，而是通过一个液晶的屏幕显示，它可以通过读卡器的接口从SD卡获取相片，并设置循环显示的方式，比普通的相框更灵活多变，也给现在日益使用的数码相片一个新的展示空间。
</div>
<h3 id="目前实现功能">目前实现功能：</h3>
<ul>
<li>打开一张图片并显示</li>
<li>打开一文件夹下所以的图片并播放</li>
<li>播放图片时刻通过点击屏幕进行暂停或继续</li>
<li>暂停时可以手动点击下一张、上一张</li>
</ul>
<h2 id="实现过程">实现过程</h2>
<p>在qtcreator下新建一个Qt4GUI应用 项目 — Digital_photo_frame</p>
<h3 id="打开并显示一张图片功能">打开并显示一张图片功能</h3>
<p>在Qt中,Qt提供给了4个图像类：QImage/QPixmap/QBitmap/Qpicture。</p>
<p>而用Qt程序在嵌入式上显示一幅图片，分别使用QImage/Qpixmap有以下两种方法：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//dangerous should not beused, cannot display earth.png,
</span><span style="color:#75715e">//but if we changeearth.png to a smaller image e.g. apple.png, apple.png can be displayed
</span><span style="color:#75715e"></span>QPixmap pixmap;

pixmap.load(<span style="color:#e6db74">&#34;:/pics/\*.png&#34;</span> );

label<span style="color:#f92672">-&gt;</span>;setPixmap(pixmap );
</code></pre></div><p>AND</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//dangerous should not beused, cannot display earth.png,  
</span><span style="color:#75715e">//but if we changeearth.png to a smaller image e.g. apple.png, apple.png can be displayed
</span><span style="color:#75715e"></span>
QPixmap pixmap;
pixmap.load(<span style="color:#e6db74">&#34;:/pics/\*.png&#34;</span> );
QPainter <span style="color:#a6e22e">painter</span>(<span style="color:#66d9ef">this</span>);
painter.drawPixmap(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,pixmap);
</code></pre></div><p>而我则同时使用两个类对显示的图片就行了优化,即采用Qimage优化图片尺寸，Qpixmap缓存绘图的方式。</p>
<p>以下的代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>Show_img(QString fileName,<span style="color:#66d9ef">int</span> imgW)
{<span style="color:#75715e">//打开一张图片并显示，&lt;span style=&#34;font-family: Arial, Helvetica, sans-serif;&#34;&gt;;fileName为文件路径，imgW为图片宽度&lt;/span&gt;;
</span><span style="color:#75715e"></span>
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fileName.isEmpty()) {
    QImage image;
    <span style="color:#75715e">//image.scaled(360,176,Qt::KeepAspectRatio);
</span><span style="color:#75715e"></span>    image.load(fileName);
    <span style="color:#66d9ef">double</span> showwidth<span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span>;(imgW);
    <span style="color:#66d9ef">double</span> showheight<span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span>;((<span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">double</span><span style="color:#f92672">&gt;</span>;(image.width())<span style="color:#f92672">*</span>showwidth)<span style="color:#f92672">/</span>image.height());
    <span style="color:#75715e">//double showwidth= static_cast&lt;double&gt;;(width());
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//double showheight= static_cast&lt;double&gt;;(height());
</span><span style="color:#75715e"></span>
        <span style="color:#66d9ef">if</span> (image.isNull()) {
            QMessageBox<span style="color:#f92672">::</span>information(<span style="color:#66d9ef">this</span>, tr(<span style="color:#e6db74">&#34;Image Viewer&#34;</span>),
                                      tr(<span style="color:#e6db74">&#34;Cannot load %1.&#34;</span>).arg(fileName));
    <span style="color:#66d9ef">return</span>;
}
    QPixmap _pixmap <span style="color:#f92672">=</span>QPixmap<span style="color:#f92672">::</span>fromImage(image.scaled(showwidth, showheight,Qt<span style="color:#f92672">::</span>KeepAspectRatio));
    ui<span style="color:#f92672">-&gt;</span>;imglabel<span style="color:#f92672">-&gt;</span>;setPixmap(_pixmap);
    ui<span style="color:#f92672">-&gt;</span>;imglabel<span style="color:#f92672">-&gt;</span>;adjustSize();
     }
}
</code></pre></div><p>打开一张图片可以用 <strong>QFileDialog</strong> 类来操作，以下是这个功能的代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>on_open_file_triggered()
{
    QFileDialog <span style="color:#f92672">*</span>fileDialog <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> QFileDialog(<span style="color:#66d9ef">this</span>);
    <span style="color:#75715e">//fileDialog-&gt;;setViewMode(QFileDialog::List);
</span><span style="color:#75715e"></span>    <span style="color:#75715e">//fileDialog-&gt;;setGeometry(10,10,200,150);
</span><span style="color:#75715e"></span>    qDebug() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;QFileDialogminimumWidth:&#34;</span> <span style="color:#f92672">&lt;&lt;</span> QString<span style="color:#f92672">::</span>number(fileDialog<span style="color:#f92672">-&gt;</span>;minimumWidth(),<span style="color:#ae81ff">10</span>);
    QString fileName <span style="color:#f92672">=</span> fileDialog<span style="color:#f92672">-&gt;</span>;getOpenFileName(<span style="color:#66d9ef">this</span>,tr(<span style="color:#e6db74">&#34;Open Image Files&#34;</span>),<span style="color:#e6db74">&#34;/&#34;</span>,tr(<span style="color:#e6db74">&#34;Images (*.gif *.png *.bmp *.jpg)&#34;</span>));    
    Show_img(fileName,<span style="color:#ae81ff">480</span>);
    ui<span style="color:#f92672">-&gt;</span>;actionFull_screen<span style="color:#f92672">-&gt;</span>;setEnabled(true);

}
</code></pre></div><h3 id="播放图片功能">播放图片功能</h3>
<p><strong>播放功能实现原理：</strong> 使用一个定时器，在每次定时器触发后，调用一次显示图片动作，然后等定时器再次触发后，再显示下一次图片处理动作。以下是代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// 在头文件声明定时器
</span><span style="color:#75715e"></span>QTimer <span style="color:#f92672">*</span>Player_Timer;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//在定义cpp里面的构造函数里面创建定时器
</span><span style="color:#75715e"></span>Digital_photo_frame<span style="color:#f92672">::</span>Digital_photo_frame(QWidget <span style="color:#f92672">*</span>parent)
    <span style="color:#f92672">:</span> QMainWindow(parent), ui(<span style="color:#66d9ef">new</span> Ui<span style="color:#f92672">::</span>Digital_photo_frame)
{
    ui<span style="color:#f92672">-&gt;</span>;setupUi(<span style="color:#66d9ef">this</span>);

    Player_Timer <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> QTimer(<span style="color:#66d9ef">this</span>);
    connect( Player_Timer, SIGNAL(timeout()), <span style="color:#66d9ef">this</span>, SLOT(Player_img()) );
}<span style="color:#f92672">&lt;/</span>pre<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;</span>pre <span style="color:#66d9ef">class</span><span style="color:#960050;background-color:#1e0010">=&#34;</span><span style="color:#a6e22e">prettyprint</span> linenums bush:cpp<span style="color:#e6db74">&#34; lang=&#34;</span>cpp<span style="color:#e6db74">&#34;&gt;//与定时器判断的函数</span>
<span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>Player_img()
{
    Player_img(list,path,i,<span style="color:#ae81ff">480</span>);
    <span style="color:#66d9ef">if</span> (i<span style="color:#f92672">&gt;</span>;<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">&amp;</span>amp; i<span style="color:#f92672">&lt;</span>(count<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
    {
        i<span style="color:#f92672">++</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
        i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
    }
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>Player_img(QFileInfoList list,QString path,<span style="color:#66d9ef">int</span> i,<span style="color:#66d9ef">int</span> imgW)
{    <span style="color:#75715e">//打开并显示一个list中的一张图片，list为文件夹下所有图片的列表，i为列表的第（i+1）张图片，imgW为图片显示宽度
</span><span style="color:#75715e"></span>    QFileInfo fileInfo <span style="color:#f92672">=</span> list.at(i);
    path<span style="color:#f92672">=</span>fileInfo.filePath();
    Show_img(path,imgW);
}
</code></pre></div><p>最终的功能函数：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>on_actionPlayer_triggered()
{
    on_actionFull_screen_triggered();
    QDir <span style="color:#a6e22e">picdir</span>(<span style="color:#e6db74">&#34;./tupiang&#34;</span>);
    QStringList filters;
    filters <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;*.bmp&#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;*.jpg&#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;*.png&#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;*.gif&#34;</span>;
    picdir.setNameFilters(filters);
    list <span style="color:#f92672">=</span> picdir.entryInfoList();
    count <span style="color:#f92672">=</span> list.count();qDebug() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;path:&#34;</span> <span style="color:#f92672">&lt;&lt;</span> path ;
    qDebug() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;picdir:&#34;</span> <span style="color:#f92672">&lt;&lt;</span> picdir  ;
    qDebug() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;count:&#34;</span> <span style="color:#f92672">&lt;&lt;</span> count ;
    Player_Timer<span style="color:#f92672">-&gt;</span>;start(<span style="color:#ae81ff">5000</span>);
}
</code></pre></div><h3 id="暂停和继续播放功能">暂停和继续播放功能</h3>
<p>点击屏幕触发鼠标事件，进而实现暂停功能，其实现原理是，当点击屏幕使触发鼠标单击事件，在事件里判断定时器状态进而实现暂停和继续播放功能。以下是代码实现功能：开启鼠标事件得在构造函数里添加以下一句：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>;setMouseTracking (true);

</code></pre></div><p>功能实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>mousePressEvent ( QMouseEvent <span style="color:#f92672">*</span> e )<span style="color:#75715e">//鼠标单击事件响应
</span><span style="color:#75715e"></span>{   
    <span style="color:#66d9ef">if</span> ( Player_Timer<span style="color:#f92672">-&gt;</span>;isActive() )
    {
        Player_Timer<span style="color:#f92672">-&gt;</span>;stop();
    }
    <span style="color:#66d9ef">else</span>{Player_Timer<span style="color:#f92672">-&gt;</span>;start(<span style="color:#ae81ff">5000</span>);}
}<span style="color:#f92672">&lt;</span>
</code></pre></div><h3 id="手动上下一张功能">手动上下一张功能</h3>
<p>代码实现：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>on_pBtn_next_clicked()<span style="color:#75715e">//下一张
</span><span style="color:#75715e"></span>{
    <span style="color:#66d9ef">if</span>(count<span style="color:#f92672">&gt;</span>;<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>){
    <span style="color:#66d9ef">if</span> (i<span style="color:#f92672">&gt;</span>;<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">&amp;</span>amp; i<span style="color:#f92672">&lt;</span>(count<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
    {
        i<span style="color:#f92672">++</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
        i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
    }
    Player_img(list,path,i,<span style="color:#ae81ff">480</span>);
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> Digital_photo_frame<span style="color:#f92672">::</span>on_pBtn_last_clicked()<span style="color:#75715e">//上一张
</span><span style="color:#75715e"></span>{
    <span style="color:#66d9ef">if</span>(count<span style="color:#f92672">&gt;</span>;<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>){
    <span style="color:#66d9ef">if</span> (i<span style="color:#f92672">&gt;</span>;<span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;</span>amp;<span style="color:#f92672">&amp;</span>amp; i<span style="color:#f92672">&lt;=</span>(count<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
    {
        i<span style="color:#f92672">--</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
        i<span style="color:#f92672">=</span>(count<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
    }
    Player_img(list,path,i,<span style="color:#ae81ff">480</span>);
}
</code></pre></div><h2 id="其他">其他</h2>
<p>当程序编译好后放到开发板上播放会发现播放不了jpg、gif等图片格式。
解决方法：</p>
<p>利用Qt的plugins机制解决过程：</p>
<p>** 条件设定：**</p>
<p>在移植Qt在开发板上时，编译参数已开启了对这些图片格式的支持（如何知道？查看你的Qt/E的安装路径，在路径下有一个plugins文件夹，plugins下有imageformats文件夹，该文件夹下若有以下几个库就对了（如下图））</p>



  <figure>
    <a href="/blog/5/1.jpg" target="_blank">
      <img src="/blog/5/1.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>

<h3 id="设置环境变量">设置环境变量：</h3>
<p>在PC的终端下执行以下两条命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">xport LD_LIBRARY_PATH<span style="color:#f92672">=</span>$QTDIR/plugins/imageformats:$LD_LIBRARY_PATH
export QT_PLUGIN_PATH<span style="color:#f92672">=</span>$QTDIR/plugins
</code></pre></div><h3 id="修改pro文件">修改pro文件</h3>
<p>在Qt项目的pro文件中增加 <code>QTPLUGIN += qjpeg  qgif</code></p>
<h3 id="在开发板运行">在开发板运行：</h3>
<p>把PC机上的图片插件库复制到开发板上并如同第二步一样设置开发板的环境变量，然后就可以运行了。</p>
<p><strong>END……</strong></p>]]></content>
        </item>
        
        <item>
            <title>windows server 2008 R2 安装后的配置总结</title>
            <link>https://sengmitnick.com/blog/2/</link>
            <pubDate>Sun, 02 Feb 2014 06:02:43 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/2/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;这篇文章是我在安装好windows server 2008 R2系统后，对如何配置才能更好适合个人使用的一些总结，希望对大家有点用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何把它变成熟悉的win7界面&#34;&gt;如何把它变成熟悉的win7界面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对于我来说，看惯了win7的界面，对windows server 2008 R2的那个单调界面非常不爽，于是，进行对win2008进行了一系列的配置，终于把它变成熟悉的win7界面。&lt;/p&gt;
&lt;/blockquote&gt;</description>
            <content type="html"><![CDATA[<blockquote>
<p>这篇文章是我在安装好windows server 2008 R2系统后，对如何配置才能更好适合个人使用的一些总结，希望对大家有点用。</p>
</blockquote>
<h2 id="如何把它变成熟悉的win7界面">如何把它变成熟悉的win7界面</h2>
<blockquote>
<p>对于我来说，看惯了win7的界面，对windows server 2008 R2的那个单调界面非常不爽，于是，进行对win2008进行了一系列的配置，终于把它变成熟悉的win7界面。</p>
</blockquote>
<p>1,、打开 <code>服务管理器</code> ，在主界面找到 <code>功能摘要</code> ，点击添加功能，在弹出的窗体中找到 <code>桌面体验</code> 这一项，打上勾，按下一步，连续按几下，最后会提示要重启，重启后，在桌面右击，熟悉的 <code>个性化</code> 出来啦！！！
2、开启THEMES服务：运行－services.msc －找到Themes服务项，默认是禁用，改为自动。
<code>PS：AREO透明效果得显卡支持才会有相应的颜色方案。 同时开启图片预览功能 </code>
3、桌面右键→个性化→主题→选择相应的win7主题。</p>
<h2 id="设置浏览网页时不会弹出窗口">设置浏览网页时不会弹出窗口</h2>
<blockquote>
<p>刚刚安装好win2008，用IE进行浏览网站，每打开一个网站，都会弹出一个窗口，这非常让我懊火，如果让这个窗口在我们浏览网页时不会弹出呢？</p>
</blockquote>
<p>打开 <code>服务管理器</code> ，在主界面找到 <code>安全信息</code> ，点击 <code>配置IE ESC</code> ，在弹出的窗体中把管理员和用户都选择禁用，这样，讨厌的窗口就不会再出现咯！！！</p>
<h2 id="让系统自动登陆">让系统自动登陆</h2>
<blockquote>
<p>平时开电脑时，电脑都是自动登陆的，即使设置密码登陆，系统也不会说什么密码强度之类的，登陆时也不需要热启（即CTRL+ALT+DEL），那么，如何让系统自动登陆呢？</p>
</blockquote>
<p>1、首先关闭UAC：打开 <code>控制面板</code> ，在主界面找到 <code>用户帐户</code> ，点击 <code>更改用户账户控制设置</code> ，把其调为从不通知。
2、更改密码使用期限与复杂性要求：打开 <code>控制面板</code> ，在主界面找到 <code>管理工具</code> ，点击，在弹出的窗口里找到 <code>本地安全策略</code> ，在弹出的窗口里再找到 <code>账户策略</code> ，再找到 <code>密码策略</code> ，打开，把 <code>密码必须符合复杂性要求</code> 禁用,把 <code>密码最长使用期限</code> 设置为0。
3、取消开机按 CTRL+ALT+DEL登陆：打开控制面板，在主界面找到 <code>管理工具</code> ，点击，在弹出的窗口里找到 <code>本地安全策略</code> ，在弹出的窗口里再找到 <code>本地策略</code> → <code>安全选项</code> → <code>交互式登陆：无须按CTRL+ALT+DEL</code> →启用。
4、按win+R，输入 <code>rundll32 netplwiz.dll,UsersRunDll</code> 命令打开帐户窗口，先选中要自动登陆的账户，去选 <code>要使用本机，用户必须输入用户名密码</code> 复选框，输入该帐户的 密码即可让该用户自动登陆咯。
四、win2008关机特麻烦，每次关机都要选择关机理由，烦死了，那么如何取消关机时出现的关机理由选择项？
按win+R，输入 <code>gpedit.msc</code> ，在打开的窗口里找到 <code>计算机配置</code> ，点击，再点击 <code>管理模板</code> → <code>系统</code> → <code>显示“关闭事件跟踪程序”</code> →禁用.</p>
<h2 id="对系统进行一系列的优化">对系统进行一系列的优化</h2>
<blockquote>
<p>我在安装了win2008后，发现开机关机都好慢，为此，就要对系统进行一系列的优化咯，以下是我怕的一些优化设置：</p>
</blockquote>
<h3 id="让程序运行更流畅">让程序运行更流畅</h3>



  <figure>
    <a href="/blog/2/1.jpg" target="_blank">
      <img src="/blog/2/1.jpg" alt="让网络登录更流畅"/>
      <figcaption><p>让程序运行更流畅</p></figcaption>
    </a>
    
  </figure>

<h3 id="让网络登录更流畅">让网络登录更流畅</h3>



  <figure>
    <a href="/blog/2/11.jpg" target="_blank">
      <img src="/blog/2/11.jpg" alt="让网络登录更流畅"/>
      <figcaption><p>让网络登录更流畅</p></figcaption>
    </a>
    
  </figure>

<h3 id="让系统启动更流畅">让系统启动更流畅</h3>
<p>


  <figure>
    <a href="/blog/2/12.jpg" target="_blank">
      <img src="/blog/2/12.jpg" alt="让系统启动更流畅-1"/>
      <figcaption><p>让系统启动更流畅-1</p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/2/13.jpg" target="_blank">
      <img src="/blog/2/13.jpg" alt="让系统启动更流畅-2"/>
      <figcaption><p>让系统启动更流畅-2</p></figcaption>
    </a>
    
  </figure>
</p>
<h4 id="提高win2008系统关机速度">提高Win2008系统关机速度</h4>
<p>定位注册表到 HKEY_CURRENT_USER\Control Panel\Desktop ，设置键值 WaitToKillAppTimeout 为1</p>
<h4 id="加快win2008菜单显示速度">加快Win2008菜单显示速度</h4>
<p>定位注册表到 HKEY_CURRENT_USER\Control Panel\Desktop ，设置键值 MenuShowDelay 为 1</p>
<h4 id="自动释放dll占用内存">自动释放Dll占用内存</h4>
<p>定位注册表到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer ，设置键值 AlwaysUnloadDLL 为1</p>
<h4 id="加速关闭没有响应的程序">加速关闭没有响应的程序</h4>
<p>定位注册表到 HKEY_CURRENT_USER\Control Panel\Desktop ，设置键值 AutoEndTasks 为1</p>
<h2 id="其他配置">其他配置</h2>
<blockquote>
<p>好了，基本就是这些了，下面就是一些在网上找到的其他配置了，那些我没有去弄：</p>
</blockquote>
<h3 id="如何取消每次开机的默认共享">如何取消每次开机的默认共享？</h3>
<p>将下列内容导入注册表，重启即可(前提是要关闭UAC)。
Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Lanmanserver\Parameters]
“AutoShareServer”=dword:00000000</p>
<h3 id="如何启用摄像机摄像头或者扫描仪等设备">如何启用摄像机，摄像头或者扫描仪等设备？</h3>
<p>启动Windows Image Acquisition (WIA) 服务，并设置启动类型为自动。
PS：这个，我不需要，呵呵。。。</p>
<h3 id="如何打开显卡的硬件加速">如何打开显卡的硬件加速？</h3>
<p>桌面右键→个性化→显示设置→高级设置→疑难解答→更该设置→硬件加速→完全。然后运行dxdiag，打开显示选项卡，会发现DirectX功能已经全部启用了。
PS：哈，我的显卡不支持啦。</p>
<h3 id="开启icf后局域网内机器如何实现互访">开启ICF后局域网内机器如何实现互访？</h3>
<p>控制面板→Windows防火墙→取消阻止所有传入连接，并在“例外”中选中“文件和打印机共享”。</p>
<h3 id="为何无法实现局域网互访">为何无法实现局域网互访？</h3>
<p>从以下几个方面入手：
本地连接→右键属性→取消Internet协议版本6，缩短验证时间。
检查各机器所属工作组名称是否一致。
检查机器IP是否在同一网段，如192.168.1.X。
将网络和共享中心→网络连接→自定义→位置类型设置为专用，降低保护。
将网络和共享中心→共享和发现→网络发现启用，文件共享启用，密码保护的共享关闭。</p>
<h3 id="如何设置ie浏览器代理">如何设置IE浏览器代理？</h3>
<p>打开IE工具栏的Internet选项→连接→拨号和虚拟专用网络设置中选中您的拨号连接→设置，在“设置”页面中，选中“对此连接使用代理服务器”然后在“地址”栏中填上代理 服务器地址和端口，单击“确定”。</p>
<h3 id="某些应用程序无法运行该如何处理">某些应用程序无法运行，该如何处理？</h3>
<p>尝试更改数据执行保护设置，控制面板→系统→高级系统设置→高级→性能→设置→数据执行保护→为除下列选定程序之外的所有程序和服务启用DEP，添加该应用程序。</p>
<h3 id="如何关闭休眠功能">如何关闭休眠功能？</h3>
<p>桌面右键→个性化→屏幕保护程序→更改电源设置→更改计算机的睡眠时间→使计算机进入睡眠状态设为从不。</p>
<h3 id="如何彻底删除休眠文件">如何彻底删除休眠文件？</h3>
<p>系统盘右键→属性→常规→磁盘清理→选中休眠文件清理器→确定。</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="http://www.smn.cn:81/showtopic-48.aspx">http://www.smn.cn:81/showtopic-48.aspx</a>
<a href="http://freemanluo.blog.51cto.com/636588/335019">http://freemanluo.blog.51cto.com/636588/335019</a></p>
<p>……END</p>]]></content>
        </item>
        
        <item>
            <title>东莞松山湖一游</title>
            <link>https://sengmitnick.com/blog/4/</link>
            <pubDate>Sat, 07 Dec 2013 09:07:43 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/4/</guid>
            <description>&lt;p&gt;来广州大学城有一段时间了，至去广工考了那个嵌入式的证书（大大的打击了），到现在也一个月的时间了。
原以为过来这边是实习的，哪知道是培训。&lt;/p&gt;
&lt;p&gt;有点被坑了，也迷茫了，因为现在有两条路，要不培训，要不另找工作；
而我也几乎应聘了一段日子了，不是很理想；
没有办法，就去了东莞，找朋友谈谈，聊聊，散散心。
在TA的提议下，我们就去了附近的松山湖。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>来广州大学城有一段时间了，至去广工考了那个嵌入式的证书（大大的打击了），到现在也一个月的时间了。
原以为过来这边是实习的，哪知道是培训。</p>
<p>有点被坑了，也迷茫了，因为现在有两条路，要不培训，要不另找工作；
而我也几乎应聘了一段日子了，不是很理想；
没有办法，就去了东莞，找朋友谈谈，聊聊，散散心。
在TA的提议下，我们就去了附近的松山湖。</p>
<p>


  <figure>
    <a href="/blog/4/2.jpg" target="_blank">
      <img src="/blog/4/2.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/4/3.jpg" target="_blank">
      <img src="/blog/4/3.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/4/4.jpg" target="_blank">
      <img src="/blog/4/4.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>




  <figure>
    <a href="/blog/4/5.jpg" target="_blank">
      <img src="/blog/4/5.jpg" alt=""/>
      <figcaption><p></p></figcaption>
    </a>
    
  </figure>
</p>]]></content>
        </item>
        
        <item>
            <title>走遍广州之增城白水寨</title>
            <link>https://sengmitnick.com/blog/3/</link>
            <pubDate>Wed, 01 May 2013 15:01:31 +0000</pubDate>
            
            <guid>https://sengmitnick.com/blog/3/</guid>
            <description>&lt;p&gt;五一啦。。。。。
一开始放的两天假都是暴雨，郁闷死哥了~&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>五一啦。。。。。
一开始放的两天假都是暴雨，郁闷死哥了~</p>
<p>这样一来，只好呆在宿舍做作业咯~</p>
<p>搞我的ASP网站啦！！！</p>
<p>终于，在五一当天</p>
<p>天气不错! ！！</p>
<p>一开始还会怕会想之前那样，早上晴朗中午暴雨</p>
<p>等到了中午，天气依然很棒</p>
<p>于是就决定去增城白水寨一游啦</p>



  <figure>
    <a href="/blog/3/01.jpg" target="_blank">
      <img src="/blog/3/01.jpg" alt="初到白水寨"/>
      <figcaption><p>初到白水寨</p></figcaption>
    </a>
    
  </figure>

<p>初到白水寨</p>
<p>买票啦</p>
<p>竟然木有学生票买</p>
<p>竟然要￥48</p>
<p>


  <figure>
    <a href="/blog/3/02.jpg" target="_blank">
      <img src="/blog/3/02.jpg" alt="天南第一梯"/>
      <figcaption><p>天南第一梯</p></figcaption>
    </a>
    
  </figure>

天南第一梯哟
总共9999级嘞，不知道能爬到多少嘞</p>



  <figure>
    <a href="/blog/3/03.jpg" target="_blank">
      <img src="/blog/3/03.jpg" alt="瀑布"/>
      <figcaption><p>瀑布</p></figcaption>
    </a>
    
  </figure>

<p>瀑布嘞，近距离哟
当那水花扑面而来，空气因水花溅起而成的微风吹起我那头发
疲劳一下子消逝，汗水随风而去
心情一下子hi了起来
生活的鸭梨也。。。。



  <figure>
    <a href="/blog/3/04.jpg" target="_blank">
      <img src="/blog/3/04.jpg" alt="个人照"/>
      <figcaption><p>个人照</p></figcaption>
    </a>
    
  </figure>

嘻嘻……
来个个人照啦



  <figure>
    <a href="/blog/3/05.jpg" target="_blank">
      <img src="/blog/3/05.jpg" alt="沐云亭"/>
      <figcaption><p>沐云亭</p></figcaption>
    </a>
    
  </figure>
<br>
当真有一览众山小的feel
辛苦的爬到了3699级
精力依然充沛
可惜，和我一起的台兄已经累的不得了咯~
睇来只能走到4099，最后的一站啦</p>
<p>


  <figure>
    <a href="/blog/3/06.jpg" target="_blank">
      <img src="/blog/3/06.jpg" alt="水库"/>
      <figcaption><p>水库</p></figcaption>
    </a>
    
  </figure>

最后一站，水库呐
看着这湖
微风迎面扑过
这一刻，所有的其他事情都抛去吧！
让我们享受这美妙的一刻。。。。。</p>



  <figure>
    <a href="/blog/3/07.jpg" target="_blank">
      <img src="/blog/3/07.jpg" alt="草地"/>
      <figcaption><p>草地</p></figcaption>
    </a>
    
  </figure>

<p>水库下面的草地嘞</p>
<p>躺下去
享受大自然的搏爱
投入大地母亲的怀抱
线路图



  <figure>
    <a href="/blog/3/08.jpg" target="_blank">
      <img src="/blog/3/08.jpg" alt="线路图"/>
      <figcaption><p>线路图</p></figcaption>
    </a>
    
  </figure>

嘻嘻……，下设时看到的路线图，原来还有穿梭巴士嘞</p>
<p>


  <figure>
    <a href="/blog/3/09.jpg" target="_blank">
      <img src="/blog/3/09.jpg" alt="白水寨"/>
      <figcaption><p>白水寨</p></figcaption>
    </a>
    
  </figure>

虽然，这瀑布在我们下山的时候就慢慢的变小了
但，这并不影响我游玩的心情
我，依然意犹未尽
唯一的遗憾，就是木有爬到9999级
看那山顶的风景
俯视山下那迷人的风观</p>]]></content>
        </item>
        
    </channel>
</rss>
